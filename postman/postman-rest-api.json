{
	"info": {
		"_postman_id": "d0a8263f-c63a-4757-8585-85c5157e8a24",
		"name": "Automated Tests | OfficeX REST API",
		"description": "REST API docs for [OfficeX](https://officex.app)\n\nView full docs at [https://dev.officex.app](https://dev.officex.app)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46989309",
		"_collection_link": "https://www.postman.com/officexapp-3755884/official-officex-public-rest-api/collection/4li62o1/automated-tests-officex-rest-api?action=share&source=collection_link&creator=46989309"
	},
	"item": [
		{
			"name": "health",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response should contain the required field 'message'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('message');",
							"});",
							"",
							"",
							"pm.test(\"Message should be a string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Response content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer YOUR_API_KEY",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{FactoryEndpoint}}/health",
					"host": [
						"{{FactoryEndpoint}}"
					],
					"path": [
						"health"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer YOUR_API_KEY",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://officex.otterpad.cc/health",
							"protocol": "https",
							"host": [
								"officex",
								"otterpad",
								"cc"
							],
							"path": [
								"health"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "29"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 19:39:47 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"message\": \"OK - helloworld\"\n}"
				}
			]
		},
		{
			"name": "factory/snapshot",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the JSON response",
							"var jsonData = pm.response.json();",
							"",
							"// Check if the response is successful and contains the drive_id",
							"if (pm.response.code === 200 && jsonData.ok && jsonData.ok.data.apikeys_by_value) {",
							"    var data = jsonData.ok.data;",
							"    var api_key_value = Object.keys(data.apikeys_by_value)[0]",
							"    console.log(`api_key_value`, api_key_value)",
							"    if (api_key_value) {",
							"        pm.collectionVariables.set(\"factory_auth_token\", api_key_value);",
							"        console.log(\"Successfully set factory_auth_token to: \" + api_key_value);",
							"    }",
							"} else {",
							"    // Log an error if the request was not successful",
							"    console.error(\"Failed to retrieve drive_id. Status code: \" + pm.response.code);",
							"    console.error(\"Response body:\", pm.response.text());",
							"}",
							"",
							"",
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      ok: {",
							"        type: \"object\",",
							"        properties: {",
							"          data: {",
							"            type: \"object\",",
							"            properties: {",
							"              canister_id: { type: \"string\" },",
							"              version: { type: \"string\" },",
							"              owner_id: { type: \"string\" },",
							"              host_url: { type: \"string\" },",
							"              apikeys_by_value: {",
							"                type: \"object\",",
							"                additionalProperties: { type: \"string\" }",
							"              },",
							"              apikeys_by_id: {",
							"                type: \"object\",",
							"                additionalProperties: {",
							"                  type: \"object\",",
							"                  properties: {",
							"                    id: { type: \"string\" },",
							"                    value: { type: \"string\" },",
							"                    user_id: { type: \"string\" },",
							"                    name: { type: \"string\" },",
							"                    created_at: { type: \"number\" },",
							"                    expires_at: { type: \"number\" },",
							"                    is_revoked: { type: \"boolean\" },",
							"                    begins_at: { type: \"number\" },",
							"                    labels: { type: \"array\" }",
							"                  },",
							"                  required: [\"id\", \"value\", \"user_id\", \"name\", \"created_at\", \"expires_at\", \"is_revoked\", \"begins_at\", \"labels\"]",
							"                }",
							"              },",
							"              users_apikeys: {",
							"                type: \"object\",",
							"                additionalProperties: { type: \"array\" }",
							"              },",
							"              apikeys_history: { type: \"array\" },",
							"              deployments_by_giftcard_id: { type: \"object\" },",
							"              historical_giftcards: { type: \"array\" },",
							"              drive_to_giftcard_hashtable: { type: \"object\" },",
							"              user_to_giftcards_hashtable: { type: \"object\" },",
							"              giftcard_by_id: { type: \"object\" },",
							"              timestamp_ms: { type: \"string\" }",
							"            },",
							"            required: [\"canister_id\", \"version\", \"owner_id\", \"host_url\", \"apikeys_by_value\", \"apikeys_by_id\", \"users_apikeys\", \"apikeys_history\", \"deployments_by_giftcard_id\", \"historical_giftcards\", \"drive_to_giftcard_hashtable\", \"user_to_giftcards_hashtable\", \"giftcard_by_id\", \"timestamp_ms\"]",
							"          }",
							"        },",
							"        required: [\"data\"]",
							"      }",
							"    },",
							"    required: [\"ok\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{vault:bearer-token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{FactoryEndpoint}}/v1/factory/snapshot",
					"host": [
						"{{FactoryEndpoint}}"
					],
					"path": [
						"v1",
						"factory",
						"snapshot"
					]
				}
			},
			"response": []
		},
		{
			"name": "factory/quickstart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n//   \"email\": \"\",\n//   note?: string;\n//   org_name?: string;\n//   admin?: string;\n//   \"members\": [{ \"name\": \"Joe\" }],\n//   \"bundled_default_disk\": {\n//     \"name\": \"Default Storage\",\n//     \"disk_type\": \"AWS_BUCKET\",\n//     \"public_note\": \"Files only valid for 24 hours\",\n//     \"autoexpire_ms\": 100000,\n//     \"auth_json\": {\n//         \"endpoint\": \"https://s3.amazonaws.com\",\n//         \"access_key\": \"________\",\n//         \"secret_key\": \"___________\",\n//         \"bucket\": \"________\",\n//         \"region\": \"us-east-1\"\n//     }\n//     }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{FactoryEndpoint}}/v1/factory/quickstart",
					"host": [
						"{{FactoryEndpoint}}"
					],
					"path": [
						"v1",
						"factory",
						"quickstart"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer YOUR_API_KEY",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"action\": \"CREATE\",\n    \"usd_revenue_cents\": 200,\n    \"note\": \"Giftcard for new organization\",\n    \"gas_cycles_included\": 3500000000000\n    // \"external_id\": \"StripeID_abc123\",\n    // \"disk_auth_json\": \"{\\\"endpoint\\\":\\\"https://gateway.storjshare.io\\\",\\\"access_key\\\":\\\"YOUR_S3_ACCESS_KEY\\\",\\\"secret_key\\\":\\\"YOUR_S3_SECRET_KEY\\\",\\\"bucket\\\":\\\"YOUR_S3_BUCKET_NAME\\\",\\\"region\\\":\\\"us-east-1\\\"}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{FactoryEndpoint}}/v1/factory/giftcards/spawnorg/upsert",
							"host": [
								"{{FactoryEndpoint}}"
							],
							"path": [
								"v1",
								"factory",
								"giftcards",
								"spawnorg",
								"upsert"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "225"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 19:40:23 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"id\": \"GiftcardSpawnOrgID_3d53b19c-4025-49e1-a4ac-086a4db6ed92\",\n            \"usd_revenue_cents\": 200,\n            \"note\": \"Giftcard for new organization\",\n            \"gas_cycles_included\": 3500000000000,\n            \"timestamp_ms\": 1753299623042,\n            \"redeemed\": false\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "factory/helpers/generate-crypto-identity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the JSON response",
							"var jsonData = pm.response.json();",
							"",
							"// Check if the response is successful and contains the drive_id",
							"if (pm.response.code === 200 && jsonData.ok && jsonData.ok.data.user_id) {",
							"    ",
							"    var admin_user_id = jsonData.ok.data.user_id",
							"    console.log(`admin_user_id`, admin_user_id)",
							"    if (admin_user_id) {",
							"        pm.collectionVariables.set(\"admin_user_id\", admin_user_id);",
							"        console.log(\"Successfully set admin_user_id to: \" + admin_user_id);",
							"    }",
							"} else {",
							"    // Log an error if the request was not successful",
							"    console.error(\"Failed to retrieve admin_user_id. Status code: \" + pm.response.code);",
							"    console.error(\"Response body:\", pm.response.text());",
							"}",
							"",
							"",
							"var responseJSON = pm.response.json();",
							"",
							"// Define the expected schema",
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      ok: {",
							"        type: \"object\",",
							"        properties: {",
							"          data: {",
							"            type: \"object\",",
							"            properties: {",
							"              user_id: { type: \"string\" },",
							"              icp_principal: { type: \"string\" },",
							"              evm_public_key: { type: \"string\" },",
							"              evm_private_key: { type: \"string\" },",
							"              origin: { type: \"object\" }",
							"            },",
							"            required: [\"user_id\", \"icp_principal\", \"evm_public_key\", \"evm_private_key\", \"origin\"]",
							"          }",
							"        },",
							"        required: [\"data\"]",
							"      }",
							"    },",
							"    required: [\"ok\"]",
							"  };",
							"",
							"  pm.expect(tv4.validate(responseJSON, schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"secret_entropy\": \"supersecretpassword\"\n    // \"seed_phrase\": \"wire oven dust shallow clog name solution proof they rent tonight lab\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{FactoryEndpoint}}/v1/factory/helpers/generate-crypto-identity",
					"host": [
						"{{FactoryEndpoint}}"
					],
					"path": [
						"v1",
						"factory",
						"helpers",
						"generate-crypto-identity"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer YOUR_API_KEY",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"action\": \"CREATE\",\n    \"usd_revenue_cents\": 200,\n    \"note\": \"Giftcard for new organization\",\n    \"gas_cycles_included\": 3500000000000\n    // \"external_id\": \"StripeID_abc123\",\n    // \"disk_auth_json\": \"{\\\"endpoint\\\":\\\"https://gateway.storjshare.io\\\",\\\"access_key\\\":\\\"YOUR_S3_ACCESS_KEY\\\",\\\"secret_key\\\":\\\"YOUR_S3_SECRET_KEY\\\",\\\"bucket\\\":\\\"YOUR_S3_BUCKET_NAME\\\",\\\"region\\\":\\\"us-east-1\\\"}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{FactoryEndpoint}}/v1/factory/giftcards/spawnorg/upsert",
							"host": [
								"{{FactoryEndpoint}}"
							],
							"path": [
								"v1",
								"factory",
								"giftcards",
								"spawnorg",
								"upsert"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "225"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 19:40:23 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"id\": \"GiftcardSpawnOrgID_3d53b19c-4025-49e1-a4ac-086a4db6ed92\",\n            \"usd_revenue_cents\": 200,\n            \"note\": \"Giftcard for new organization\",\n            \"gas_cycles_included\": 3500000000000,\n            \"timestamp_ms\": 1753299623042,\n            \"redeemed\": false\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "factory/giftcards/spawnorg/create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Set the variables",
							"var jsonData = pm.response.json();",
							"",
							"// Check if the response is successful and contains the drive_id",
							"if (pm.response.code === 200 && jsonData.ok && jsonData.ok.data.id) {",
							"    var data = jsonData.ok.data;",
							"    var gift_card_id = data.id;",
							"    if (gift_card_id) {",
							"        pm.collectionVariables.set(\"gift_card_id\", gift_card_id);",
							"        console.log(\"Successfully set gift_card_id to: \" + gift_card_id);",
							"    }",
							"} else {",
							"    // Log an error if the request was not successful",
							"    console.error(\"Failed to retrieve gift_card_id. Status code: \" + pm.response.code);",
							"    console.error(\"Response body:\", pm.response.text());",
							"}",
							"",
							"// Integration Tests",
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      ok: {",
							"        type: \"object\",",
							"        properties: {",
							"          data: {",
							"            type: \"object\",",
							"            properties: {",
							"              id: { type: \"string\" },",
							"              usd_revenue_cents: { type: \"integer\" },",
							"              note: { type: \"string\" },",
							"              gas_cycles_included: { type: \"integer\" },",
							"              timestamp_ms: { type: \"integer\" },",
							"              redeemed: { type: \"boolean\" }",
							"            },",
							"            required: [\"id\", \"usd_revenue_cents\", \"note\", \"gas_cycles_included\", \"timestamp_ms\", \"redeemed\"]",
							"          }",
							"        },",
							"        required: [\"data\"]",
							"      }",
							"    },",
							"    required: [\"ok\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{factory_auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    // \"usd_revenue_cents\": 200,\n    // \"note\": \"Giftcard for new organization\",\n    // \"gas_cycles_included\": 3500000000000\n    // \"external_id\": \"StripeID_abc123\",\n    // \"disk_auth_json\": \"{\\\"endpoint\\\":\\\"https://gateway.storjshare.io\\\",\\\"access_key\\\":\\\"YOUR_S3_ACCESS_KEY\\\",\\\"secret_key\\\":\\\"YOUR_S3_SECRET_KEY\\\",\\\"bucket\\\":\\\"YOUR_S3_BUCKET_NAME\\\",\\\"region\\\":\\\"us-east-1\\\"}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{FactoryEndpoint}}/v1/factory/giftcards/spawnorg/create",
					"host": [
						"{{FactoryEndpoint}}"
					],
					"path": [
						"v1",
						"factory",
						"giftcards",
						"spawnorg",
						"create"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer YOUR_API_KEY",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"action\": \"CREATE\",\n    \"usd_revenue_cents\": 200,\n    \"note\": \"Giftcard for new organization\",\n    \"gas_cycles_included\": 3500000000000\n    // \"external_id\": \"StripeID_abc123\",\n    // \"disk_auth_json\": \"{\\\"endpoint\\\":\\\"https://gateway.storjshare.io\\\",\\\"access_key\\\":\\\"YOUR_S3_ACCESS_KEY\\\",\\\"secret_key\\\":\\\"YOUR_S3_SECRET_KEY\\\",\\\"bucket\\\":\\\"YOUR_S3_BUCKET_NAME\\\",\\\"region\\\":\\\"us-east-1\\\"}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{FactoryEndpoint}}/v1/factory/giftcards/spawnorg/upsert",
							"host": [
								"{{FactoryEndpoint}}"
							],
							"path": [
								"v1",
								"factory",
								"giftcards",
								"spawnorg",
								"upsert"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "225"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 19:40:23 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"id\": \"GiftcardSpawnOrgID_3d53b19c-4025-49e1-a4ac-086a4db6ed92\",\n            \"usd_revenue_cents\": 200,\n            \"note\": \"Giftcard for new organization\",\n            \"gas_cycles_included\": 3500000000000,\n            \"timestamp_ms\": 1753299623042,\n            \"redeemed\": false\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "factory/giftcards/spawnorg/redeem",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Fixed checking for correct property names",
							"var jsonData = pm.response.json();",
							"if (pm.response.code === 200 && jsonData.ok && jsonData.ok.data.redeem_code && jsonData.ok.data.drive_id && jsonData.ok.data.host) {",
							"    var data = jsonData.ok.data;",
							"    var redeem_code = data.redeem_code;",
							"    var drive_id = data.drive_id;",
							"    var host = data.host;",
							"    ",
							"    pm.collectionVariables.set(\"redeem_code\", redeem_code);",
							"    console.log(\"Successfully set redeem_code to: \" + redeem_code);",
							"",
							"    pm.collectionVariables.set(\"Server host\", host);",
							"    console.log(\"Successfully set Server host to: \" + host);",
							"",
							"    pm.collectionVariables.set(\"org_id\", drive_id);",
							"    console.log(\"Successfully set org_id to: \" + drive_id);",
							"    ",
							"} else {",
							"    // Log an error if the request was not successful",
							"    console.error(\"Failed to retrieve redeem_code or org_id or host. Status code: \" + pm.response.code);",
							"    console.error(\"Response body:\", pm.response.text());",
							"}",
							"",
							"",
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      ok: {",
							"        type: \"object\",",
							"        properties: {",
							"          data: {",
							"            type: \"object\",",
							"            properties: {",
							"              owner_id: { type: \"string\" },",
							"              drive_id: { type: \"string\" },",
							"              host: { type: \"string\" }, ",
							"              redeem_code: { type: \"string\" },",
							"              disk_auth_json: { type: [\"object\", \"null\"] }",
							"            },",
							"",
							"          }",
							"        },",
							"        required: [\"data\"]",
							"      }",
							"    },",
							"    required: [\"ok\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer YOUR_API_KEY",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"giftcard_id\": \"{{gift_card_id}}\",\n  \"owner_user_id\": \"{{admin_user_id}}\",\n  \"organization_name\": \"Demo Organization\",\n  \"owner_name\": \"Arbitrary Admin Anon\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{FactoryEndpoint}}/v1/factory/giftcards/spawnorg/redeem",
					"host": [
						"{{FactoryEndpoint}}"
					],
					"path": [
						"v1",
						"factory",
						"giftcards",
						"spawnorg",
						"redeem"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer YOUR_API_KEY",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"giftcard_id\": \"GiftcardSpawnOrgID_3d53b19c-4025-49e1-a4ac-086a4db6ed92\",\n  \"owner_icp_principal\": \"rkibf-jg5lt-t76aq-bqqvo-v5rg6-2gnal-cjdgv-iugcr-v3xx4-qxnxo-zae\",\n  \"organization_name\": \"Demo Organization\",\n  \"owner_name\": \"Arbitrary Admin Anon\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{FactoryEndpoint}}/v1/factory/giftcards/spawnorg/redeem",
							"host": [
								"{{FactoryEndpoint}}"
							],
							"path": [
								"v1",
								"factory",
								"giftcards",
								"spawnorg",
								"redeem"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "286"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 19:42:14 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"owner_id\": \"UserID_rkibf-jg5lt-t76aq-bqqvo-v5rg6-2gnal-cjdgv-iugcr-v3xx4-qxnxo-zae\",\n            \"drive_id\": \"DriveID_2epvx-sybqy-5oke6-xrwy4-j3cey-qaqy7-z2jje-hiatq-zzb2x-x3veb-4qe\",\n            \"endpoint\": \"https://officex.otterpad.cc\",\n            \"redeem_code\": \"REDEEM_1753299734913\",\n            \"disk_auth_json\": null\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/organization/redeem",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Set env vars",
							"var jsonData = pm.response.json();",
							"if (pm.response.code === 200 && jsonData.ok && jsonData.ok.data.api_key) {",
							"    var data = jsonData.ok.data;",
							"    var api_key = data.api_key;",
							"    if (api_key) {",
							"        pm.collectionVariables.set(\"auth_token\", api_key);",
							"        console.log(\"Successfully set auth_token to: \" + api_key);",
							"    }",
							"} else {",
							"    // Log an error if the request was not successful",
							"    console.error(\"Failed to retrieve auth_token. Status code: \" + pm.response.code);",
							"    console.error(\"Response body:\", pm.response.text());",
							"}",
							"",
							"// integration tests",
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      ok: {",
							"        type: \"object\",",
							"        properties: {",
							"          data: {",
							"            type: \"object\",",
							"            properties: {",
							"              drive_id: { type: \"string\" },",
							"              host_url: { type: \"string\" },",
							"              api_key: { type: \"string\" },",
							"              note: { type: \"string\" },",
							"              admin_login_password: { type: \"string\" },",
							"              auto_login_url: { type: \"string\" }",
							"            },",
							"            required: [\"drive_id\", \"host_url\", \"api_key\", \"note\", \"admin_login_password\", \"auto_login_url\"]",
							"          }",
							"        },",
							"        required: [\"data\"]",
							"      }",
							"    },",
							"    required: [\"ok\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer BEARER",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"redeem_code\": \"{{redeem_code}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/organization/redeem",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"organization",
						"redeem"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer YOUR_API_KEY",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"redeem_code\": \"REDEEM_1753352970157\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/organization/redeem",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"organization",
								"redeem"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "access-control-allow-origin",
							"value": "*"
						},
						{
							"key": "content-type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "content-length",
							"value": "803"
						},
						{
							"key": "Date",
							"value": "Thu, 24 Jul 2025 10:31:24 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=72"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"drive_id\": \"DriveID_y6l3d-rw4ep-o5pii-o5usy-kls3l-vyx7b-63dhu-lupsq-x3gvb-ror6e-wae\",\n            \"endpoint_url\": \"http://localhost:8888\",\n            \"api_key\": \"eyJhdXRoX3R5cGUiOiJBUElfS0VZIiwidmFsdWUiOiI1NzUzNDMxZmQ0MmE2MTEwYzZiMWExMGE2ZTQ4ZjlhZTg5MTViNGVhM2MyYjFmOTIxYTljYmJhODgxNmQyZGYwIn0=\",\n            \"note\": \"giftcard GiftcardSpawnOrgID_07629364-c21a-4300-9bfc-bd4ec0458c07 was redeemed to spawn drive with 3500000000000 cycles, owned by UserID_rkibf-jg5lt-t76aq-bqqvo-v5rg6-2gnal-cjdgv-iugcr-v3xx4-qxnxo-zae, on timestamp_ms 1753352970157 2025-07-24T10:29:30.157Z\",\n            \"admin_login_password\": \"DriveID_y6l3d-rw4ep-o5pii-o5usy-kls3l-vyx7b-63dhu-lupsq-x3gvb-ror6e-wae:eyJhdXRoX3R5cGUiOiJBUElfS0VZIiwidmFsdWUiOiI1NzUzNDMxZmQ0MmE2MTEwYzZiMWExMGE2ZTQ4ZjlhZTg5MTViNGVhM2MyYjFmOTIxYTljYmJhODgxNmQyZGYwIn0=@http://localhost:8888\"\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "factory/helpers/migrate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{factory_auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"drives\": [\"{{org_id}}\"]\n// \"drives\": []\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/factory/helpers/migrate",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"factory",
						"helpers",
						"migrate"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer YOUR_API_KEY",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"redeem_code\": \"REDEEM_1753352970157\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/organization/redeem",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"organization",
								"redeem"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "access-control-allow-origin",
							"value": "*"
						},
						{
							"key": "content-type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "content-length",
							"value": "803"
						},
						{
							"key": "Date",
							"value": "Thu, 24 Jul 2025 10:31:24 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=72"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"drive_id\": \"DriveID_y6l3d-rw4ep-o5pii-o5usy-kls3l-vyx7b-63dhu-lupsq-x3gvb-ror6e-wae\",\n            \"endpoint_url\": \"http://localhost:8888\",\n            \"api_key\": \"eyJhdXRoX3R5cGUiOiJBUElfS0VZIiwidmFsdWUiOiI1NzUzNDMxZmQ0MmE2MTEwYzZiMWExMGE2ZTQ4ZjlhZTg5MTViNGVhM2MyYjFmOTIxYTljYmJhODgxNmQyZGYwIn0=\",\n            \"note\": \"giftcard GiftcardSpawnOrgID_07629364-c21a-4300-9bfc-bd4ec0458c07 was redeemed to spawn drive with 3500000000000 cycles, owned by UserID_rkibf-jg5lt-t76aq-bqqvo-v5rg6-2gnal-cjdgv-iugcr-v3xx4-qxnxo-zae, on timestamp_ms 1753352970157 2025-07-24T10:29:30.157Z\",\n            \"admin_login_password\": \"DriveID_y6l3d-rw4ep-o5pii-o5usy-kls3l-vyx7b-63dhu-lupsq-x3gvb-ror6e-wae:eyJhdXRoX3R5cGUiOiJBUElfS0VZIiwidmFsdWUiOiI1NzUzNDMxZmQ0MmE2MTEwYzZiMWExMGE2ZTQ4ZjlhZTg5MTViNGVhM2MyYjFmOTIxYTljYmJhODgxNmQyZGYwIn0=@http://localhost:8888\"\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "organization/snapshot",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'ok' object in the response\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist.and.to.be.an('object');",
							"",
							"    const okData = responseData.ok.data;",
							"    pm.expect(okData).to.exist.and.to.be.an('object');",
							"",
							"    pm.expect(okData).to.have.all.keys(",
							"        'DRIVE_ID', 'CANISTER_ID', 'VERSION', 'OWNER_ID', 'URL_ENDPOINT', ",
							"        'DRIVE_STATE_TIMESTAMP_NS', 'EXTERNAL_ID_MAPPINGS', ",
							"        'RECENT_DEPLOYMENTS', 'SPAWN_REDEEM_CODE', 'SPAWN_NOTE', ",
							"        'NONCE_UUID_GENERATED', 'UUID_CLAIMED', 'APIKEYS_BY_VALUE_HASHTABLE', ",
							"        'APIKEYS_BY_ID_HASHTABLE', 'USERS_APIKEYS_HASHTABLE', ",
							"        'CONTACTS_BY_ID_HASHTABLE', 'CONTACTS_BY_ICP_PRINCIPAL_HASHTABLE', ",
							"        'CONTACTS_BY_TIME_LIST', 'HISTORY_SUPERSWAP_USERID', ",
							"        'folder_uuid_to_metadata', 'file_uuid_to_metadata', ",
							"        'full_folder_path_to_uuid', 'full_file_path_to_uuid', ",
							"        'DISKS_BY_ID_HASHTABLE', 'DISKS_BY_TIME_LIST', ",
							"        'DRIVES_BY_ID_HASHTABLE', 'DRIVES_BY_TIME_LIST', ",
							"        'DIRECTORY_PERMISSIONS_BY_ID_HASHTABLE', ",
							"        'DIRECTORY_PERMISSIONS_BY_RESOURCE_HASHTABLE', ",
							"        'DIRECTORY_GRANTEE_PERMISSIONS_HASHTABLE', ",
							"        'DIRECTORY_PERMISSIONS_BY_TIME_LIST', ",
							"        'SYSTEM_PERMISSIONS_BY_ID_HASHTABLE', ",
							"        'SYSTEM_PERMISSIONS_BY_RESOURCE_HASHTABLE', ",
							"        'SYSTEM_GRANTEE_PERMISSIONS_HASHTABLE', ",
							"        'SYSTEM_PERMISSIONS_BY_TIME_LIST', ",
							"        'INVITES_BY_ID_HASHTABLE', 'USERS_INVITES_LIST_HASHTABLE', ",
							"        'GROUPS_BY_ID_HASHTABLE', 'GROUPS_BY_TIME_LIST', ",
							"        'WEBHOOKS_BY_ALT_INDEX_HASHTABLE', 'WEBHOOKS_BY_ID_HASHTABLE', ",
							"        'WEBHOOKS_BY_TIME_LIST', 'PURCHASES_BY_ID_HASHTABLE', ",
							"        'PURCHASES_BY_TIME_LIST'",
							"    );",
							"});",
							"",
							"",
							"",
							"pm.test(\"Ensure RECENT_DEPLOYMENTS is an empty array\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.ok.data.RECENT_DEPLOYMENTS).to.be.an('array').that.is.empty;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/organization/snapshot",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"organization",
						"snapshot"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/organization/shortlink | create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Set env vars",
							"var jsonData = pm.response.json();",
							"if (pm.response.code === 200 && jsonData.ok && jsonData.ok.data.slug) {",
							"    var data = jsonData.ok.data;",
							"    var slug = data.slug;",
							"    if (slug) {",
							"        pm.collectionVariables.set(\"shortlink_slug\", slug);",
							"        console.log(\"Successfully set shortlink_slug to: \" + slug);",
							"    }",
							"} else {",
							"    // Log an error if the request was not successful",
							"    console.error(\"Failed to retrieve shortlink_slug. Status code: \" + pm.response.code);",
							"    console.error(\"Response body:\", pm.response.text());",
							"}",
							"",
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      ok: {",
							"        type: \"object\",",
							"        properties: {",
							"          data: {",
							"            type: \"object\",",
							"            properties: {",
							"              slug: { type: \"string\" },",
							"              original_url: { type: \"string\" },",
							"              shortlink_url: { type: \"string\" }",
							"            },",
							"            required: [\"slug\", \"original_url\", \"shortlink_url\"]",
							"          }",
							"        },",
							"        required: [\"data\"]",
							"      }",
							"    },",
							"    required: [\"ok\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"original_url\": \"https://google.com/my-final-destination\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/organization/shortlink",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"organization",
						"shortlink"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"filters\": \"\",\n  \"page_size\": 50,\n  \"direction\": \"ASC\",\n  \"cursor_up\": \"string\",\n  \"cursor_down\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/list",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"contacts",
								"list"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "3762"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 19:45:00 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"items\": [\n                {\n                    \"id\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n                    \"name\": \"Owner\",\n                    \"avatar\": null,\n                    \"email\": null,\n                    \"notifications_url\": null,\n                    \"public_note\": null,\n                    \"private_note\": null,\n                    \"evm_public_address\": \"\",\n                    \"icp_principal\": \"jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n                    \"seed_phrase\": null,\n                    \"from_placeholder_user_id\": null,\n                    \"redeem_code\": \"REDEEM_1753276590260\",\n                    \"created_at\": 1753276590260,\n                    \"last_online_ms\": 1753276590260,\n                    \"external_id\": null,\n                    \"external_payload\": null,\n                    \"permission_previews\": [\n                        \"CREATE\",\n                        \"VIEW\",\n                        \"EDIT\",\n                        \"DELETE\",\n                        \"INVITE\"\n                    ],\n                    \"labels\": [],\n                    \"group_previews\": [\n                        {\n                            \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                            \"invite_id\": \"GroupInviteID_76d008d7-9a46-4da9-9435-c45c24af11dc\",\n                            \"is_admin\": true,\n                            \"group_name\": \"Group for All\",\n                            \"group_avatar\": \"\"\n                        }\n                    ]\n                },\n                {\n                    \"id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\",\n                    \"name\": \"John Doe\",\n                    \"avatar\": \"\",\n                    \"email\": \"\",\n                    \"notifications_url\": \"\",\n                    \"public_note\": \"Senior Project Manager for Beta group\",\n                    \"private_note\": \"Recently promoted, great communicator\",\n                    \"evm_public_address\": \"\",\n                    \"icp_principal\": \"veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\",\n                    \"seed_phrase\": \"\",\n                    \"from_placeholder_user_id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\",\n                    \"redeem_code\": \"RedeemTokenID_5cddae34-15e0-45a6-a556-d10afd190b86\",\n                    \"created_at\": 1753278982655,\n                    \"last_online_ms\": 0,\n                    \"external_id\": \"\",\n                    \"external_payload\": \"{\\\"department\\\": \\\"product\\\", \\\"title\\\": \\\"Lead Project Manager\\\", \\\"location\\\": \\\"Remote\\\", \\\"updated\\\": true}\",\n                    \"permission_previews\": [\n                        \"CREATE\",\n                        \"VIEW\",\n                        \"EDIT\",\n                        \"DELETE\",\n                        \"INVITE\"\n                    ],\n                    \"labels\": [],\n                    \"group_previews\": [\n                        {\n                            \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                            \"invite_id\": \"GroupInviteID_e6569cac-f6ee-4274-afa4-aacc55c97aca\",\n                            \"is_admin\": false,\n                            \"group_name\": \"Group for All\",\n                            \"group_avatar\": \"\"\n                        },\n                        {\n                            \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                            \"invite_id\": \"GroupInviteID_e6569cac-f6ee-4274-afa4-aacc55c97aca\",\n                            \"is_admin\": false,\n                            \"group_name\": \"Group for All\",\n                            \"group_avatar\": \"\"\n                        }\n                    ]\n                },\n                {\n                    \"id\": \"UserID_yghsj-jf6tk-32lwm-asdd3-jisdj-bbnvf-xhagi-k2pdd-ikncd-6opry-sqe\",\n                    \"name\": \"John Doee\",\n                    \"avatar\": \"\",\n                    \"email\": \"\",\n                    \"notifications_url\": \"\",\n                    \"public_note\": \"Note from User: Redeemed by \\\"Anon\\\" on 7/23/2025, 10:20:59 PM\",\n                    \"private_note\": \"\",\n                    \"evm_public_address\": \"\",\n                    \"icp_principal\": \"yghsj-jf6tk-32lwm-asdd3-jisdj-bbnvf-xhagi-k2pdd-ikncd-6opry-sqe\",\n                    \"seed_phrase\": \"\",\n                    \"from_placeholder_user_id\": \"UserID_7ha37-haziy-u5x36-qbyih-jrmza-zjnok-igpzn-bogz5-qduxp-yvkab-lqe\",\n                    \"redeem_code\": null,\n                    \"created_at\": 1753283670631,\n                    \"last_online_ms\": 0,\n                    \"external_id\": null,\n                    \"external_payload\": null,\n                    \"permission_previews\": [\n                        \"CREATE\",\n                        \"VIEW\",\n                        \"EDIT\",\n                        \"DELETE\",\n                        \"INVITE\"\n                    ],\n                    \"labels\": [],\n                    \"group_previews\": [\n                        {\n                            \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                            \"invite_id\": \"GroupInviteID_ca0ad758-3c49-401d-bb36-7f241e658436\",\n                            \"is_admin\": false,\n                            \"group_name\": \"Group for All\",\n                            \"group_avatar\": \"\"\n                        }\n                    ]\n                },\n                {\n                    \"id\": \"UserID_oik5u-j2dre-qb6km-xljny-hdrew-eft3z-znkyx-curyp-bvcrz-lgz5g-iae\",\n                    \"name\": \"John Doe\",\n                    \"avatar\": \"\",\n                    \"email\": \"\",\n                    \"notifications_url\": \"\",\n                    \"public_note\": \"\",\n                    \"private_note\": \"\",\n                    \"evm_public_address\": \"\",\n                    \"icp_principal\": \"oik5u-j2dre-qb6km-xljny-hdrew-eft3z-znkyx-curyp-bvcrz-lgz5g-iae\",\n                    \"seed_phrase\": \"\",\n                    \"from_placeholder_user_id\": \"UserID_oik5u-j2dre-qb6km-xljny-hdrew-eft3z-znkyx-curyp-bvcrz-lgz5g-iae\",\n                    \"redeem_code\": \"RedeemTokenID_448a53c2-2b5a-49f4-a3e1-61ba00d28cd7\",\n                    \"created_at\": 1753286498879,\n                    \"last_online_ms\": 0,\n                    \"external_id\": null,\n                    \"external_payload\": null,\n                    \"permission_previews\": [\n                        \"CREATE\",\n                        \"VIEW\",\n                        \"EDIT\",\n                        \"DELETE\",\n                        \"INVITE\"\n                    ],\n                    \"labels\": [],\n                    \"group_previews\": [\n                        {\n                            \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                            \"invite_id\": \"GroupInviteID_adbb38bc-f241-428c-a18d-807e5fda46bf\",\n                            \"is_admin\": false,\n                            \"group_name\": \"Group for All\",\n                            \"group_avatar\": \"\"\n                        }\n                    ]\n                }\n            ],\n            \"page_size\": 4,\n            \"total\": 4,\n            \"direction\": \"ASC\",\n            \"cursor\": null\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/organization/shortlink | redeem",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response should contain the required field 'ok'\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.have.property('ok');",
							"});",
							"",
							"",
							"pm.test(\"The 'data' field must be present and is an object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('ok').that.is.an('object');",
							"    pm.expect(responseData.ok).to.have.property('data').that.is.an('object');",
							"});",
							"",
							"",
							"pm.test(\"The original_url field must be a non-empty string in the data object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('ok').that.is.an('object');",
							"    pm.expect(responseData.ok).to.have.property('data').that.is.an('object');",
							"    pm.expect(responseData.ok.data).to.have.property('original_url').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"slug\": \"{{shortlink_slug}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/organization/shortlink",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"organization",
						"shortlink"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"filters\": \"\",\n  \"page_size\": 50,\n  \"direction\": \"ASC\",\n  \"cursor_up\": \"string\",\n  \"cursor_down\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/list",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"contacts",
								"list"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "3762"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 19:45:00 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"items\": [\n                {\n                    \"id\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n                    \"name\": \"Owner\",\n                    \"avatar\": null,\n                    \"email\": null,\n                    \"notifications_url\": null,\n                    \"public_note\": null,\n                    \"private_note\": null,\n                    \"evm_public_address\": \"\",\n                    \"icp_principal\": \"jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n                    \"seed_phrase\": null,\n                    \"from_placeholder_user_id\": null,\n                    \"redeem_code\": \"REDEEM_1753276590260\",\n                    \"created_at\": 1753276590260,\n                    \"last_online_ms\": 1753276590260,\n                    \"external_id\": null,\n                    \"external_payload\": null,\n                    \"permission_previews\": [\n                        \"CREATE\",\n                        \"VIEW\",\n                        \"EDIT\",\n                        \"DELETE\",\n                        \"INVITE\"\n                    ],\n                    \"labels\": [],\n                    \"group_previews\": [\n                        {\n                            \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                            \"invite_id\": \"GroupInviteID_76d008d7-9a46-4da9-9435-c45c24af11dc\",\n                            \"is_admin\": true,\n                            \"group_name\": \"Group for All\",\n                            \"group_avatar\": \"\"\n                        }\n                    ]\n                },\n                {\n                    \"id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\",\n                    \"name\": \"John Doe\",\n                    \"avatar\": \"\",\n                    \"email\": \"\",\n                    \"notifications_url\": \"\",\n                    \"public_note\": \"Senior Project Manager for Beta group\",\n                    \"private_note\": \"Recently promoted, great communicator\",\n                    \"evm_public_address\": \"\",\n                    \"icp_principal\": \"veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\",\n                    \"seed_phrase\": \"\",\n                    \"from_placeholder_user_id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\",\n                    \"redeem_code\": \"RedeemTokenID_5cddae34-15e0-45a6-a556-d10afd190b86\",\n                    \"created_at\": 1753278982655,\n                    \"last_online_ms\": 0,\n                    \"external_id\": \"\",\n                    \"external_payload\": \"{\\\"department\\\": \\\"product\\\", \\\"title\\\": \\\"Lead Project Manager\\\", \\\"location\\\": \\\"Remote\\\", \\\"updated\\\": true}\",\n                    \"permission_previews\": [\n                        \"CREATE\",\n                        \"VIEW\",\n                        \"EDIT\",\n                        \"DELETE\",\n                        \"INVITE\"\n                    ],\n                    \"labels\": [],\n                    \"group_previews\": [\n                        {\n                            \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                            \"invite_id\": \"GroupInviteID_e6569cac-f6ee-4274-afa4-aacc55c97aca\",\n                            \"is_admin\": false,\n                            \"group_name\": \"Group for All\",\n                            \"group_avatar\": \"\"\n                        },\n                        {\n                            \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                            \"invite_id\": \"GroupInviteID_e6569cac-f6ee-4274-afa4-aacc55c97aca\",\n                            \"is_admin\": false,\n                            \"group_name\": \"Group for All\",\n                            \"group_avatar\": \"\"\n                        }\n                    ]\n                },\n                {\n                    \"id\": \"UserID_yghsj-jf6tk-32lwm-asdd3-jisdj-bbnvf-xhagi-k2pdd-ikncd-6opry-sqe\",\n                    \"name\": \"John Doee\",\n                    \"avatar\": \"\",\n                    \"email\": \"\",\n                    \"notifications_url\": \"\",\n                    \"public_note\": \"Note from User: Redeemed by \\\"Anon\\\" on 7/23/2025, 10:20:59 PM\",\n                    \"private_note\": \"\",\n                    \"evm_public_address\": \"\",\n                    \"icp_principal\": \"yghsj-jf6tk-32lwm-asdd3-jisdj-bbnvf-xhagi-k2pdd-ikncd-6opry-sqe\",\n                    \"seed_phrase\": \"\",\n                    \"from_placeholder_user_id\": \"UserID_7ha37-haziy-u5x36-qbyih-jrmza-zjnok-igpzn-bogz5-qduxp-yvkab-lqe\",\n                    \"redeem_code\": null,\n                    \"created_at\": 1753283670631,\n                    \"last_online_ms\": 0,\n                    \"external_id\": null,\n                    \"external_payload\": null,\n                    \"permission_previews\": [\n                        \"CREATE\",\n                        \"VIEW\",\n                        \"EDIT\",\n                        \"DELETE\",\n                        \"INVITE\"\n                    ],\n                    \"labels\": [],\n                    \"group_previews\": [\n                        {\n                            \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                            \"invite_id\": \"GroupInviteID_ca0ad758-3c49-401d-bb36-7f241e658436\",\n                            \"is_admin\": false,\n                            \"group_name\": \"Group for All\",\n                            \"group_avatar\": \"\"\n                        }\n                    ]\n                },\n                {\n                    \"id\": \"UserID_oik5u-j2dre-qb6km-xljny-hdrew-eft3z-znkyx-curyp-bvcrz-lgz5g-iae\",\n                    \"name\": \"John Doe\",\n                    \"avatar\": \"\",\n                    \"email\": \"\",\n                    \"notifications_url\": \"\",\n                    \"public_note\": \"\",\n                    \"private_note\": \"\",\n                    \"evm_public_address\": \"\",\n                    \"icp_principal\": \"oik5u-j2dre-qb6km-xljny-hdrew-eft3z-znkyx-curyp-bvcrz-lgz5g-iae\",\n                    \"seed_phrase\": \"\",\n                    \"from_placeholder_user_id\": \"UserID_oik5u-j2dre-qb6km-xljny-hdrew-eft3z-znkyx-curyp-bvcrz-lgz5g-iae\",\n                    \"redeem_code\": \"RedeemTokenID_448a53c2-2b5a-49f4-a3e1-61ba00d28cd7\",\n                    \"created_at\": 1753286498879,\n                    \"last_online_ms\": 0,\n                    \"external_id\": null,\n                    \"external_payload\": null,\n                    \"permission_previews\": [\n                        \"CREATE\",\n                        \"VIEW\",\n                        \"EDIT\",\n                        \"DELETE\",\n                        \"INVITE\"\n                    ],\n                    \"labels\": [],\n                    \"group_previews\": [\n                        {\n                            \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                            \"invite_id\": \"GroupInviteID_adbb38bc-f241-428c-a18d-807e5fda46bf\",\n                            \"is_admin\": false,\n                            \"group_name\": \"Group for All\",\n                            \"group_avatar\": \"\"\n                        }\n                    ]\n                }\n            ],\n            \"page_size\": 4,\n            \"total\": 4,\n            \"direction\": \"ASC\",\n            \"cursor\": null\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/contacts/list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response contains the 'ok' field\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.have.property('ok');",
							"});",
							"",
							"",
							"pm.test(\"Validate the items array is present and contains at least one object when total is greater than 0\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist;",
							"    pm.expect(responseData.ok.data).to.exist;",
							"    pm.expect(responseData.ok.data.total).to.be.greaterThan(0);",
							"",
							"    if (responseData.ok.data.total > 0) {",
							"        pm.expect(responseData.ok.data.items).to.be.an('array').that.is.not.empty;",
							"        pm.expect(responseData.ok.data.items).to.have.length.of.at.least(1);",
							"    }",
							"});",
							"",
							"",
							"pm.test(\"Created_at and Last_online_ms must be non-negative integers\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist;",
							"    pm.expect(responseData.ok.data).to.exist;",
							"    pm.expect(responseData.ok.data.items).to.be.an('array');",
							"",
							"    responseData.ok.data.items.forEach(item => {",
							"        pm.expect(item.created_at).to.be.a('number').and.to.be.at.least(0, \"Created_at must be a non-negative integer\");",
							"        pm.expect(item.last_online_ms).to.be.a('number').and.to.be.at.least(0, \"Last_online_ms must be a non-negative integer\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Group previews array contains objects with required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.ok.data).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.ok.data.items).to.be.an('array');",
							"",
							"    responseData.ok.data.items.forEach(item => {",
							"        pm.expect(item.group_previews).to.be.an('array');",
							"        item.group_previews.forEach(group => {",
							"            pm.expect(group).to.be.an('object');",
							"            pm.expect(group).to.have.all.keys('group_id', 'invite_id', 'is_admin', 'group_name', 'group_avatar');",
							"        });",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"filters\": \"\",\n  \"page_size\": 50,\n  \"direction\": \"ASC\",\n  \"cursor_up\": \"string\",\n  \"cursor_down\": \"string\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/list",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"contacts",
						"list"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"filters\": \"\",\n  \"page_size\": 50,\n  \"direction\": \"ASC\",\n  \"cursor_up\": \"string\",\n  \"cursor_down\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/list",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"contacts",
								"list"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "3762"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 19:45:00 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"items\": [\n                {\n                    \"id\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n                    \"name\": \"Owner\",\n                    \"avatar\": null,\n                    \"email\": null,\n                    \"notifications_url\": null,\n                    \"public_note\": null,\n                    \"private_note\": null,\n                    \"evm_public_address\": \"\",\n                    \"icp_principal\": \"jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n                    \"seed_phrase\": null,\n                    \"from_placeholder_user_id\": null,\n                    \"redeem_code\": \"REDEEM_1753276590260\",\n                    \"created_at\": 1753276590260,\n                    \"last_online_ms\": 1753276590260,\n                    \"external_id\": null,\n                    \"external_payload\": null,\n                    \"permission_previews\": [\n                        \"CREATE\",\n                        \"VIEW\",\n                        \"EDIT\",\n                        \"DELETE\",\n                        \"INVITE\"\n                    ],\n                    \"labels\": [],\n                    \"group_previews\": [\n                        {\n                            \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                            \"invite_id\": \"GroupInviteID_76d008d7-9a46-4da9-9435-c45c24af11dc\",\n                            \"is_admin\": true,\n                            \"group_name\": \"Group for All\",\n                            \"group_avatar\": \"\"\n                        }\n                    ]\n                },\n                {\n                    \"id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\",\n                    \"name\": \"John Doe\",\n                    \"avatar\": \"\",\n                    \"email\": \"\",\n                    \"notifications_url\": \"\",\n                    \"public_note\": \"Senior Project Manager for Beta group\",\n                    \"private_note\": \"Recently promoted, great communicator\",\n                    \"evm_public_address\": \"\",\n                    \"icp_principal\": \"veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\",\n                    \"seed_phrase\": \"\",\n                    \"from_placeholder_user_id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\",\n                    \"redeem_code\": \"RedeemTokenID_5cddae34-15e0-45a6-a556-d10afd190b86\",\n                    \"created_at\": 1753278982655,\n                    \"last_online_ms\": 0,\n                    \"external_id\": \"\",\n                    \"external_payload\": \"{\\\"department\\\": \\\"product\\\", \\\"title\\\": \\\"Lead Project Manager\\\", \\\"location\\\": \\\"Remote\\\", \\\"updated\\\": true}\",\n                    \"permission_previews\": [\n                        \"CREATE\",\n                        \"VIEW\",\n                        \"EDIT\",\n                        \"DELETE\",\n                        \"INVITE\"\n                    ],\n                    \"labels\": [],\n                    \"group_previews\": [\n                        {\n                            \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                            \"invite_id\": \"GroupInviteID_e6569cac-f6ee-4274-afa4-aacc55c97aca\",\n                            \"is_admin\": false,\n                            \"group_name\": \"Group for All\",\n                            \"group_avatar\": \"\"\n                        },\n                        {\n                            \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                            \"invite_id\": \"GroupInviteID_e6569cac-f6ee-4274-afa4-aacc55c97aca\",\n                            \"is_admin\": false,\n                            \"group_name\": \"Group for All\",\n                            \"group_avatar\": \"\"\n                        }\n                    ]\n                },\n                {\n                    \"id\": \"UserID_yghsj-jf6tk-32lwm-asdd3-jisdj-bbnvf-xhagi-k2pdd-ikncd-6opry-sqe\",\n                    \"name\": \"John Doee\",\n                    \"avatar\": \"\",\n                    \"email\": \"\",\n                    \"notifications_url\": \"\",\n                    \"public_note\": \"Note from User: Redeemed by \\\"Anon\\\" on 7/23/2025, 10:20:59 PM\",\n                    \"private_note\": \"\",\n                    \"evm_public_address\": \"\",\n                    \"icp_principal\": \"yghsj-jf6tk-32lwm-asdd3-jisdj-bbnvf-xhagi-k2pdd-ikncd-6opry-sqe\",\n                    \"seed_phrase\": \"\",\n                    \"from_placeholder_user_id\": \"UserID_7ha37-haziy-u5x36-qbyih-jrmza-zjnok-igpzn-bogz5-qduxp-yvkab-lqe\",\n                    \"redeem_code\": null,\n                    \"created_at\": 1753283670631,\n                    \"last_online_ms\": 0,\n                    \"external_id\": null,\n                    \"external_payload\": null,\n                    \"permission_previews\": [\n                        \"CREATE\",\n                        \"VIEW\",\n                        \"EDIT\",\n                        \"DELETE\",\n                        \"INVITE\"\n                    ],\n                    \"labels\": [],\n                    \"group_previews\": [\n                        {\n                            \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                            \"invite_id\": \"GroupInviteID_ca0ad758-3c49-401d-bb36-7f241e658436\",\n                            \"is_admin\": false,\n                            \"group_name\": \"Group for All\",\n                            \"group_avatar\": \"\"\n                        }\n                    ]\n                },\n                {\n                    \"id\": \"UserID_oik5u-j2dre-qb6km-xljny-hdrew-eft3z-znkyx-curyp-bvcrz-lgz5g-iae\",\n                    \"name\": \"John Doe\",\n                    \"avatar\": \"\",\n                    \"email\": \"\",\n                    \"notifications_url\": \"\",\n                    \"public_note\": \"\",\n                    \"private_note\": \"\",\n                    \"evm_public_address\": \"\",\n                    \"icp_principal\": \"oik5u-j2dre-qb6km-xljny-hdrew-eft3z-znkyx-curyp-bvcrz-lgz5g-iae\",\n                    \"seed_phrase\": \"\",\n                    \"from_placeholder_user_id\": \"UserID_oik5u-j2dre-qb6km-xljny-hdrew-eft3z-znkyx-curyp-bvcrz-lgz5g-iae\",\n                    \"redeem_code\": \"RedeemTokenID_448a53c2-2b5a-49f4-a3e1-61ba00d28cd7\",\n                    \"created_at\": 1753286498879,\n                    \"last_online_ms\": 0,\n                    \"external_id\": null,\n                    \"external_payload\": null,\n                    \"permission_previews\": [\n                        \"CREATE\",\n                        \"VIEW\",\n                        \"EDIT\",\n                        \"DELETE\",\n                        \"INVITE\"\n                    ],\n                    \"labels\": [],\n                    \"group_previews\": [\n                        {\n                            \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                            \"invite_id\": \"GroupInviteID_adbb38bc-f241-428c-a18d-807e5fda46bf\",\n                            \"is_admin\": false,\n                            \"group_name\": \"Group for All\",\n                            \"group_avatar\": \"\"\n                        }\n                    ]\n                }\n            ],\n            \"page_size\": 4,\n            \"total\": 4,\n            \"direction\": \"ASC\",\n            \"cursor\": null\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/contacts/helpers/generate-crypto-identity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"secret_entropy\": \"specific-user-password\"\n    // \"seed_phrase\": \"wire oven dust shallow clog name solution proof they rent tonight lab\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{FactoryEndpoint}}/v1/factory/helpers/generate-crypto-identity",
					"host": [
						"{{FactoryEndpoint}}"
					],
					"path": [
						"v1",
						"factory",
						"helpers",
						"generate-crypto-identity"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer YOUR_API_KEY",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"action\": \"CREATE\",\n    \"usd_revenue_cents\": 200,\n    \"note\": \"Giftcard for new organization\",\n    \"gas_cycles_included\": 3500000000000\n    // \"external_id\": \"StripeID_abc123\",\n    // \"disk_auth_json\": \"{\\\"endpoint\\\":\\\"https://gateway.storjshare.io\\\",\\\"access_key\\\":\\\"YOUR_S3_ACCESS_KEY\\\",\\\"secret_key\\\":\\\"YOUR_S3_SECRET_KEY\\\",\\\"bucket\\\":\\\"YOUR_S3_BUCKET_NAME\\\",\\\"region\\\":\\\"us-east-1\\\"}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{FactoryEndpoint}}/v1/factory/giftcards/spawnorg/upsert",
							"host": [
								"{{FactoryEndpoint}}"
							],
							"path": [
								"v1",
								"factory",
								"giftcards",
								"spawnorg",
								"upsert"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "225"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 19:40:23 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"id\": \"GiftcardSpawnOrgID_3d53b19c-4025-49e1-a4ac-086a4db6ed92\",\n            \"usd_revenue_cents\": 200,\n            \"note\": \"Giftcard for new organization\",\n            \"gas_cycles_included\": 3500000000000,\n            \"timestamp_ms\": 1753299623042,\n            \"redeemed\": false\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/contacts/create | blank",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      ok: {",
							"        type: \"object\",",
							"        properties: {",
							"          data: {",
							"            type: \"object\",",
							"            properties: {",
							"              id: { type: \"string\" },",
							"              name: { type: \"string\" },",
							"              avatar: { type: \"string\" },",
							"              email: { type: \"string\" },",
							"              notifications_url: { type: \"string\" },",
							"              public_note: { type: \"string\" },",
							"              private_note: { type: \"string\" },",
							"              evm_public_address: { type: \"string\" },",
							"              icp_principal: { type: \"string\" },",
							"              secret_entropy: { type: \"string\" },",
							"              seed_phrase: { type: \"string\" },",
							"              labels: { type: \"array\" },",
							"              created_at: { type: \"integer\" },",
							"              last_online_ms: { type: \"integer\" },",
							"              permission_previews: { type: \"array\" },",
							"              group_previews: {",
							"                type: \"array\",",
							"                items: {",
							"                  type: \"object\",",
							"                  properties: {",
							"                    group_id: { type: \"string\" },",
							"                    invite_id: { type: \"string\" },",
							"                    is_admin: { type: \"boolean\" },",
							"                    group_name: { type: \"string\" },",
							"                    group_avatar: { type: \"string\" }",
							"                  },",
							"                  required: [\"group_id\", \"invite_id\", \"is_admin\", \"group_name\", \"group_avatar\"]",
							"                }",
							"              }",
							"            },",
							"            required: [\"id\", \"name\", \"avatar\", \"email\", \"notifications_url\", \"public_note\", \"private_note\", \"evm_public_address\", \"icp_principal\", \"secret_entropy\", \"seed_phrase\", \"labels\", \"created_at\", \"last_online_ms\", \"permission_previews\", \"group_previews\"]",
							"          }",
							"        },",
							"        required: [\"data\"]",
							"      }",
							"    },",
							"    required: [\"ok\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Mary\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/create",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"contacts",
						"create"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Doe\",\n  \"icp_principal\": \"veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n  \"public_note\": \"\",\n  \"is_placeholder\": true,\n  \"id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\"\n  //\"private_note\": \"Primary contact for urgent issues\",\n  //\"external_id\": \"emp-1234\",\n  //\"external_payload\": \"{\\\"department\\\": \\\"product\\\", \\\"title\\\": \\\"Senior Project Manager\\\", \\\"location\\\": \\\"Remote\\\"}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/create",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"contacts",
								"create"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "815"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 19:46:13 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"name\": \"John Doe\",\n            \"avatar\": \"\",\n            \"email\": \"\",\n            \"notifications_url\": \"\",\n            \"public_note\": \"\",\n            \"private_note\": \"\",\n            \"evm_public_address\": \"\",\n            \"icp_principal\": \"veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"seed_phrase\": \"\",\n            \"labels\": [],\n            \"from_placeholder_user_id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"redeem_code\": \"RedeemTokenID_773013f7-9d2f-4daf-8873-daa09cb6cf23\",\n            \"created_at\": 1753299973103,\n            \"last_online_ms\": 0,\n            \"permission_previews\": [\n                \"CREATE\",\n                \"VIEW\",\n                \"EDIT\",\n                \"DELETE\",\n                \"INVITE\"\n            ],\n            \"group_previews\": [\n                {\n                    \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                    \"invite_id\": \"GroupInviteID_930a7fa9-0d9a-4f65-bb10-03db6a572ee6\",\n                    \"is_admin\": false,\n                    \"group_name\": \"Group for All\",\n                    \"group_avatar\": \"\"\n                }\n            ]\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/contacts/create | entropy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Set env vars",
							"var jsonData = pm.response.json();",
							"if (pm.response.code === 200 && jsonData.ok && jsonData.ok.data.id) {",
							"    var data = jsonData.ok.data;",
							"    var contact_user_id = data.id;",
							"    if (contact_user_id) {",
							"        pm.collectionVariables.set(\"user_id\", contact_user_id);",
							"        console.log(\"Successfully set user_id to: \" + contact_user_id);",
							"    }",
							"} else {",
							"    // Log an error if the request was not successful",
							"    console.error(\"Failed to retrieve auth_token. Status code: \" + pm.response.code);",
							"    console.error(\"Response body:\", pm.response.text());",
							"}",
							"",
							"",
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      ok: {",
							"        type: \"object\",",
							"        properties: {",
							"          data: {",
							"            type: \"object\",",
							"            properties: {",
							"              id: { type: \"string\" },",
							"              name: { type: \"string\" },",
							"              avatar: { type: \"string\" },",
							"              email: { type: \"string\" },",
							"              notifications_url: { type: \"string\" },",
							"              public_note: { type: \"string\" },",
							"              private_note: { type: \"string\" },",
							"              evm_public_address: { type: \"string\" },",
							"              icp_principal: { type: \"string\" },",
							"              seed_phrase: { type: \"string\" },",
							"              labels: { type: \"array\" },",
							"              created_at: { type: \"integer\" },",
							"              last_online_ms: { type: \"integer\" },",
							"              permission_previews: { type: \"array\" },",
							"              group_previews: {",
							"                type: \"array\",",
							"                items: {",
							"                  type: \"object\",",
							"                  properties: {",
							"                    group_id: { type: \"string\" },",
							"                    invite_id: { type: \"string\" },",
							"                    is_admin: { type: \"boolean\" },",
							"                    group_name: { type: \"string\" },",
							"                    group_avatar: { type: \"string\" }",
							"                  },",
							"                  required: [\"group_id\", \"invite_id\", \"is_admin\", \"group_name\", \"group_avatar\"]",
							"                }",
							"              }",
							"            },",
							"            required: [\"id\", \"name\", \"avatar\", \"email\", \"notifications_url\", \"public_note\", \"private_note\", \"evm_public_address\", \"icp_principal\", \"seed_phrase\", \"labels\", \"created_at\", \"last_online_ms\", \"permission_previews\", \"group_previews\"]",
							"          }",
							"        },",
							"        required: [\"data\"]",
							"      }",
							"    },",
							"    required: [\"ok\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Zolana\",\n  \"secret_entropy\": \"user-id-from-my-database-with-extra-salt\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/create",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"contacts",
						"create"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Doe\",\n  \"icp_principal\": \"veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n  \"public_note\": \"\",\n  \"is_placeholder\": true,\n  \"id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\"\n  //\"private_note\": \"Primary contact for urgent issues\",\n  //\"external_id\": \"emp-1234\",\n  //\"external_payload\": \"{\\\"department\\\": \\\"product\\\", \\\"title\\\": \\\"Senior Project Manager\\\", \\\"location\\\": \\\"Remote\\\"}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/create",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"contacts",
								"create"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "815"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 19:46:13 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"name\": \"John Doe\",\n            \"avatar\": \"\",\n            \"email\": \"\",\n            \"notifications_url\": \"\",\n            \"public_note\": \"\",\n            \"private_note\": \"\",\n            \"evm_public_address\": \"\",\n            \"icp_principal\": \"veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"seed_phrase\": \"\",\n            \"labels\": [],\n            \"from_placeholder_user_id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"redeem_code\": \"RedeemTokenID_773013f7-9d2f-4daf-8873-daa09cb6cf23\",\n            \"created_at\": 1753299973103,\n            \"last_online_ms\": 0,\n            \"permission_previews\": [\n                \"CREATE\",\n                \"VIEW\",\n                \"EDIT\",\n                \"DELETE\",\n                \"INVITE\"\n            ],\n            \"group_previews\": [\n                {\n                    \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                    \"invite_id\": \"GroupInviteID_930a7fa9-0d9a-4f65-bb10-03db6a572ee6\",\n                    \"is_admin\": false,\n                    \"group_name\": \"Group for All\",\n                    \"group_avatar\": \"\"\n                }\n            ]\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/contacts/create | seed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Sethra\",\n  \"seed_phrase\": \"round care sleep chest luck mirror thick again another smooth above energy\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/create",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"contacts",
						"create"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Doe\",\n  \"icp_principal\": \"veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n  \"public_note\": \"\",\n  \"is_placeholder\": true,\n  \"id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\"\n  //\"private_note\": \"Primary contact for urgent issues\",\n  //\"external_id\": \"emp-1234\",\n  //\"external_payload\": \"{\\\"department\\\": \\\"product\\\", \\\"title\\\": \\\"Senior Project Manager\\\", \\\"location\\\": \\\"Remote\\\"}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/create",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"contacts",
								"create"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "815"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 19:46:13 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"name\": \"John Doe\",\n            \"avatar\": \"\",\n            \"email\": \"\",\n            \"notifications_url\": \"\",\n            \"public_note\": \"\",\n            \"private_note\": \"\",\n            \"evm_public_address\": \"\",\n            \"icp_principal\": \"veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"seed_phrase\": \"\",\n            \"labels\": [],\n            \"from_placeholder_user_id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"redeem_code\": \"RedeemTokenID_773013f7-9d2f-4daf-8873-daa09cb6cf23\",\n            \"created_at\": 1753299973103,\n            \"last_online_ms\": 0,\n            \"permission_previews\": [\n                \"CREATE\",\n                \"VIEW\",\n                \"EDIT\",\n                \"DELETE\",\n                \"INVITE\"\n            ],\n            \"group_previews\": [\n                {\n                    \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                    \"invite_id\": \"GroupInviteID_930a7fa9-0d9a-4f65-bb10-03db6a572ee6\",\n                    \"is_admin\": false,\n                    \"group_name\": \"Group for All\",\n                    \"group_avatar\": \"\"\n                }\n            ]\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/contacts/create | seed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"id\": \"UserID_pungd-p7wtp-mcku5-m7xp6-kies2-kw6ji-d5i2j-4ktx2-ejeea-sexp6-uqe\",\n  \"name\": \"Sethra\",\n  \"seed_phrase\": \"field made theory as crowd stood including flower hall fireplace planet worry\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/create",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"contacts",
						"create"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Doe\",\n  \"icp_principal\": \"veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n  \"public_note\": \"\",\n  \"is_placeholder\": true,\n  \"id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\"\n  //\"private_note\": \"Primary contact for urgent issues\",\n  //\"external_id\": \"emp-1234\",\n  //\"external_payload\": \"{\\\"department\\\": \\\"product\\\", \\\"title\\\": \\\"Senior Project Manager\\\", \\\"location\\\": \\\"Remote\\\"}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/create",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"contacts",
								"create"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "815"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 19:46:13 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"name\": \"John Doe\",\n            \"avatar\": \"\",\n            \"email\": \"\",\n            \"notifications_url\": \"\",\n            \"public_note\": \"\",\n            \"private_note\": \"\",\n            \"evm_public_address\": \"\",\n            \"icp_principal\": \"veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"seed_phrase\": \"\",\n            \"labels\": [],\n            \"from_placeholder_user_id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"redeem_code\": \"RedeemTokenID_773013f7-9d2f-4daf-8873-daa09cb6cf23\",\n            \"created_at\": 1753299973103,\n            \"last_online_ms\": 0,\n            \"permission_previews\": [\n                \"CREATE\",\n                \"VIEW\",\n                \"EDIT\",\n                \"DELETE\",\n                \"INVITE\"\n            ],\n            \"group_previews\": [\n                {\n                    \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                    \"invite_id\": \"GroupInviteID_930a7fa9-0d9a-4f65-bb10-03db6a572ee6\",\n                    \"is_admin\": false,\n                    \"group_name\": \"Group for All\",\n                    \"group_avatar\": \"\"\n                }\n            ]\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/contacts/create | id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Set env vars",
							"var jsonData = pm.response.json();",
							"if (pm.response.code === 200 && jsonData.ok && jsonData.ok.data.id) {",
							"    var data = jsonData.ok.data;",
							"    var contact_user_id = data.id;",
							"    if (contact_user_id) {",
							"        pm.collectionVariables.set(\"user_id\", contact_user_id);",
							"        console.log(\"Successfully set user_id to: \" + contact_user_id);",
							"    }",
							"} else {",
							"    // Log an error if the request was not successful",
							"    console.error(\"Failed to retrieve auth_token. Status code: \" + pm.response.code);",
							"    console.error(\"Response body:\", pm.response.text());",
							"}",
							"",
							"",
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      ok: {",
							"        type: \"object\",",
							"        properties: {",
							"          data: {",
							"            type: \"object\",",
							"            properties: {",
							"              id: { type: \"string\" },",
							"              name: { type: \"string\" },",
							"              avatar: { type: \"string\" },",
							"              email: { type: \"string\" },",
							"              notifications_url: { type: \"string\" },",
							"              public_note: { type: \"string\" },",
							"              private_note: { type: \"string\" },",
							"              evm_public_address: { type: \"string\" },",
							"              icp_principal: { type: \"string\" },",
							"              secret_entropy: { type: \"string\" },",
							"              seed_phrase: { type: \"string\" },",
							"              labels: { type: \"array\" },",
							"              created_at: { type: \"integer\" },",
							"              last_online_ms: { type: \"integer\" },",
							"              permission_previews: { type: \"array\" },",
							"              group_previews: {",
							"                type: \"array\",",
							"                items: {",
							"                  type: \"object\",",
							"                  properties: {",
							"                    group_id: { type: \"string\" },",
							"                    invite_id: { type: \"string\" },",
							"                    is_admin: { type: \"boolean\" },",
							"                    group_name: { type: \"string\" },",
							"                    group_avatar: { type: \"string\" }",
							"                  },",
							"                  required: [\"group_id\", \"invite_id\", \"is_admin\", \"group_name\", \"group_avatar\"]",
							"                }",
							"              }",
							"            },",
							"            required: [\"id\", \"name\", \"avatar\", \"email\", \"notifications_url\", \"public_note\", \"private_note\", \"evm_public_address\", \"icp_principal\", \"secret_entropy\", \"seed_phrase\", \"labels\", \"created_at\", \"last_online_ms\", \"permission_previews\", \"group_previews\"]",
							"          }",
							"        },",
							"        required: [\"data\"]",
							"      }",
							"    },",
							"    required: [\"ok\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"John Doe\",\n  \"id\": \"UserID_67q5a-2manu-6wyl6-6onic-pvqe4-bydge-lhy4g-22nvo-hcact-5qmki-yae\"\n//   \"public_note\": \"\",\n  //\"private_note\": \"Primary contact for urgent issues\",\n  //\"external_id\": \"emp-1234\",\n  //\"external_payload\": \"{\\\"department\\\": \\\"product\\\", \\\"title\\\": \\\"Senior Project Manager\\\", \\\"location\\\": \\\"Remote\\\"}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/create",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"contacts",
						"create"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Doe\",\n  \"icp_principal\": \"veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n  \"public_note\": \"\",\n  \"is_placeholder\": true,\n  \"id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\"\n  //\"private_note\": \"Primary contact for urgent issues\",\n  //\"external_id\": \"emp-1234\",\n  //\"external_payload\": \"{\\\"department\\\": \\\"product\\\", \\\"title\\\": \\\"Senior Project Manager\\\", \\\"location\\\": \\\"Remote\\\"}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/create",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"contacts",
								"create"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "815"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 19:46:13 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"name\": \"John Doe\",\n            \"avatar\": \"\",\n            \"email\": \"\",\n            \"notifications_url\": \"\",\n            \"public_note\": \"\",\n            \"private_note\": \"\",\n            \"evm_public_address\": \"\",\n            \"icp_principal\": \"veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"seed_phrase\": \"\",\n            \"labels\": [],\n            \"from_placeholder_user_id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"redeem_code\": \"RedeemTokenID_773013f7-9d2f-4daf-8873-daa09cb6cf23\",\n            \"created_at\": 1753299973103,\n            \"last_online_ms\": 0,\n            \"permission_previews\": [\n                \"CREATE\",\n                \"VIEW\",\n                \"EDIT\",\n                \"DELETE\",\n                \"INVITE\"\n            ],\n            \"group_previews\": [\n                {\n                    \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                    \"invite_id\": \"GroupInviteID_930a7fa9-0d9a-4f65-bb10-03db6a572ee6\",\n                    \"is_admin\": false,\n                    \"group_name\": \"Group for All\",\n                    \"group_avatar\": \"\"\n                }\n            ]\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/contacts/update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      ok: {",
							"        type: \"object\",",
							"        properties: {",
							"          data: {",
							"            type: \"object\",",
							"            properties: {",
							"              id: { type: \"string\" },",
							"              name: { type: \"string\" },",
							"              avatar: { type: \"string\" },",
							"              email: { type: \"string\" },",
							"              notifications_url: { type: \"string\" },",
							"              public_note: { type: \"string\" },",
							"              private_note: { type: \"string\" },",
							"              evm_public_address: { type: \"string\" },",
							"              icp_principal: { type: \"string\" },",
							"              seed_phrase: { type: \"string\" },",
							"              from_placeholder_user_id: { type: [\"string\", \"null\"] },",
							"              redeem_code: { type: [\"string\", \"null\"] },",
							"              created_at: { type: \"integer\" },",
							"              last_online_ms: { type: \"integer\" },",
							"              external_id: { type: \"string\" },",
							"              external_payload: { type: \"string\" },",
							"              permission_previews: {",
							"                type: \"array\",",
							"                items: { type: \"string\" }",
							"              },",
							"              labels: {",
							"                type: \"array\",",
							"                items: { type: \"string\" }",
							"              },",
							"              group_previews: {",
							"                type: \"array\",",
							"                items: {",
							"                  type: \"object\",",
							"                  properties: {",
							"                    group_id: { type: \"string\" },",
							"                    invite_id: { type: \"string\" },",
							"                    is_admin: { type: \"boolean\" },",
							"                    group_name: { type: \"string\" },",
							"                    group_avatar: { type: \"string\" }",
							"                  },",
							"                  required: [\"group_id\", \"is_admin\"]",
							"                }",
							"              }",
							"            },",
							"            required: [\"id\", \"name\", \"email\"]",
							"          }",
							"        },",
							"        required: [\"data\"]",
							"      }",
							"    },",
							"    required: [\"ok\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{user_id}}\",\n  \"name\": \"Johnny the Kid, Doe\",\n  \"public_note\": \"Senior Project Manager for Bark Group\",\n  \"private_note\": \"Recently promoted, great communicator\",\n  \"evm_public_address\": \"\",\n  \"external_id\": \"\",\n  \"external_payload\": \"{\\\"department\\\": \\\"product\\\", \\\"title\\\": \\\"Lead Project Manager\\\", \\\"location\\\": \\\"Remote\\\", \\\"updated\\\": true}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/update",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"contacts",
						"update"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\",\n  \"nickname\": \"Johnny Doe\",\n  \"public_note\": \"Senior Project Manager for Beta group\",\n  \"private_note\": \"Recently promoted, great communicator\",\n  \"evm_public_address\": \"\",\n  \"icp_principal\": \"veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\",\n  \"external_id\": \"\",\n  \"external_payload\": \"{\\\"department\\\": \\\"product\\\", \\\"title\\\": \\\"Lead Project Manager\\\", \\\"location\\\": \\\"Remote\\\", \\\"updated\\\": true}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/update",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"contacts",
								"update"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "1228"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 19:46:49 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\",\n            \"name\": \"John Doe\",\n            \"avatar\": \"\",\n            \"email\": \"\",\n            \"notifications_url\": \"\",\n            \"public_note\": \"Senior Project Manager for Beta group\",\n            \"private_note\": \"Recently promoted, great communicator\",\n            \"evm_public_address\": \"\",\n            \"icp_principal\": \"veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\",\n            \"seed_phrase\": \"\",\n            \"from_placeholder_user_id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\",\n            \"redeem_code\": \"RedeemTokenID_5cddae34-15e0-45a6-a556-d10afd190b86\",\n            \"created_at\": 1753278982655,\n            \"last_online_ms\": 0,\n            \"external_id\": \"\",\n            \"external_payload\": \"{\\\"department\\\": \\\"product\\\", \\\"title\\\": \\\"Lead Project Manager\\\", \\\"location\\\": \\\"Remote\\\", \\\"updated\\\": true}\",\n            \"permission_previews\": [\n                \"CREATE\",\n                \"VIEW\",\n                \"EDIT\",\n                \"DELETE\",\n                \"INVITE\"\n            ],\n            \"labels\": [],\n            \"group_previews\": [\n                {\n                    \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                    \"invite_id\": \"GroupInviteID_e6569cac-f6ee-4274-afa4-aacc55c97aca\",\n                    \"is_admin\": false,\n                    \"group_name\": \"Group for All\",\n                    \"group_avatar\": \"\"\n                },\n                {\n                    \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                    \"invite_id\": \"GroupInviteID_e6569cac-f6ee-4274-afa4-aacc55c97aca\",\n                    \"is_admin\": false,\n                    \"group_name\": \"Group for All\",\n                    \"group_avatar\": \"\"\n                }\n            ]\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/contacts/get/:contact_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      ok: {",
							"        type: \"object\",",
							"        properties: {",
							"          data: {",
							"            type: \"object\",",
							"            properties: {",
							"              id: { type: \"string\" },",
							"              name: { type: \"string\" },",
							"              avatar: { type: \"string\" },",
							"              email: { type: \"string\" },",
							"              notifications_url: { type: \"string\" },",
							"              public_note: { type: \"string\" },",
							"              private_note: { type: \"string\" },",
							"              evm_public_address: { type: \"string\" },",
							"              icp_principal: { type: \"string\" },",
							"              seed_phrase: { type: \"string\" },",
							"              from_placeholder_user_id: { type: [\"string\", \"null\"] },",
							"              redeem_code: { type: [\"string\", \"null\"] },",
							"              created_at: { type: \"integer\" },",
							"              last_online_ms: { type: \"integer\" },",
							"              external_id: { type: \"string\" },",
							"              external_payload: { type: \"string\" },",
							"              permission_previews: {",
							"                type: \"array\",",
							"                items: { type: \"string\" }",
							"              },",
							"              labels: {",
							"                type: \"array\"",
							"              },",
							"              group_previews: {",
							"                type: \"array\",",
							"                items: {",
							"                  type: \"object\",",
							"                  properties: {",
							"                    group_id: { type: \"string\" },",
							"                    invite_id: { type: \"string\" },",
							"                    is_admin: { type: \"boolean\" },",
							"                    group_name: { type: \"string\" },",
							"                    group_avatar: { type: \"string\" }",
							"                  },",
							"                  required: [\"group_id\", \"invite_id\", \"is_admin\", \"group_name\", \"group_avatar\"]",
							"                }",
							"              }",
							"            },",
							"            required: [\"id\", \"name\", \"avatar\", \"email\", \"notifications_url\", \"public_note\", \"private_note\", \"evm_public_address\", \"icp_principal\", \"seed_phrase\", \"from_placeholder_user_id\", \"redeem_code\", \"created_at\", \"last_online_ms\", \"external_id\", \"external_payload\", \"permission_previews\", \"labels\", \"group_previews\"]",
							"          }",
							"        },",
							"        required: [\"data\"]",
							"      }",
							"    },",
							"    required: [\"ok\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/get/{{user_id}}",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"contacts",
						"get",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/contacts/create | placeholder",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Set env vars",
							"var jsonData = pm.response.json();",
							"if (pm.response.code === 200 && jsonData.ok && jsonData.ok.data.redeem_code) {",
							"    var data = jsonData.ok.data;",
							"    var redeem_code = data.redeem_code;",
							"    if (redeem_code) {",
							"        pm.collectionVariables.set(\"redeem_code\", redeem_code);",
							"        console.log(\"Successfully set redeem_code to: \" + redeem_code);",
							"    }",
							"    var user_id = data.id;",
							"    pm.collectionVariables.set(\"user_id\", user_id);",
							"} else {",
							"    // Log an error if the request was not successful",
							"    console.error(\"Failed to retrieve redeem_code. Status code: \" + pm.response.code);",
							"    console.error(\"Response body:\", pm.response.text());",
							"}",
							"",
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      ok: {",
							"        type: \"object\",",
							"        properties: {",
							"          data: {",
							"            type: \"object\",",
							"            properties: {",
							"              id: { type: \"string\" },",
							"              name: { type: \"string\" },",
							"              avatar: { type: \"string\" },",
							"              email: { type: \"string\" },",
							"              notifications_url: { type: \"string\" },",
							"              public_note: { type: \"string\" },",
							"              private_note: { type: \"string\" },",
							"              evm_public_address: { type: \"string\" },",
							"              icp_principal: { type: \"string\" },",
							"              seed_phrase: { type: \"string\" },",
							"              labels: { type: \"array\" },",
							"              from_placeholder_user_id: { type: \"string\" },",
							"              redeem_code: { type: \"string\" },",
							"              created_at: { type: \"number\" },",
							"              last_online_ms: { type: \"number\" },",
							"              permission_previews: {",
							"                type: \"array\",",
							"                items: { type: \"string\" }",
							"              },",
							"              group_previews: {",
							"                type: \"array\",",
							"                items: {",
							"                  type: \"object\",",
							"                  properties: {",
							"                    group_id: { type: \"string\" },",
							"                    invite_id: { type: \"string\" },",
							"                    is_admin: { type: \"boolean\" },",
							"                    group_name: { type: \"string\" },",
							"                    group_avatar: { type: \"string\" }",
							"                  }",
							"                }",
							"              }",
							"            },",
							"            required: [\"id\", \"name\", \"avatar\", \"email\", \"notifications_url\", \"public_note\", \"private_note\", \"evm_public_address\", \"icp_principal\", \"seed_phrase\", \"created_at\", \"last_online_ms\", \"permission_previews\", \"group_previews\"]",
							"          }",
							"        },",
							"        required: [\"data\"]",
							"      }",
							"    },",
							"    required: [\"ok\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Jill Doe\",\n  \"public_note\": \"\",\n  \"is_placeholder\": true\n//   \"id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\"\n  //\"private_note\": \"Primary contact for urgent issues\",\n  //\"external_id\": \"emp-1234\",\n  //\"external_payload\": \"{\\\"department\\\": \\\"product\\\", \\\"title\\\": \\\"Senior Project Manager\\\", \\\"location\\\": \\\"Remote\\\"}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/create",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"contacts",
						"create"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Doe\",\n  \"icp_principal\": \"veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n  \"public_note\": \"\",\n  \"is_placeholder\": true,\n  \"id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\"\n  //\"private_note\": \"Primary contact for urgent issues\",\n  //\"external_id\": \"emp-1234\",\n  //\"external_payload\": \"{\\\"department\\\": \\\"product\\\", \\\"title\\\": \\\"Senior Project Manager\\\", \\\"location\\\": \\\"Remote\\\"}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/create",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"contacts",
								"create"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "815"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 19:46:13 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"name\": \"John Doe\",\n            \"avatar\": \"\",\n            \"email\": \"\",\n            \"notifications_url\": \"\",\n            \"public_note\": \"\",\n            \"private_note\": \"\",\n            \"evm_public_address\": \"\",\n            \"icp_principal\": \"veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"seed_phrase\": \"\",\n            \"labels\": [],\n            \"from_placeholder_user_id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"redeem_code\": \"RedeemTokenID_773013f7-9d2f-4daf-8873-daa09cb6cf23\",\n            \"created_at\": 1753299973103,\n            \"last_online_ms\": 0,\n            \"permission_previews\": [\n                \"CREATE\",\n                \"VIEW\",\n                \"EDIT\",\n                \"DELETE\",\n                \"INVITE\"\n            ],\n            \"group_previews\": [\n                {\n                    \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                    \"invite_id\": \"GroupInviteID_930a7fa9-0d9a-4f65-bb10-03db6a572ee6\",\n                    \"is_admin\": false,\n                    \"group_name\": \"Group for All\",\n                    \"group_avatar\": \"\"\n                }\n            ]\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/contacts/redeem",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Set env vars",
							"var jsonData = pm.response.json();",
							"if (pm.response.code === 200 && jsonData.ok && jsonData.ok.data.contact) {",
							"    var data = jsonData.ok.data;",
							"    var contact = data.contact;",
							"    if (contact.id) {",
							"        pm.collectionVariables.set(\"user_id\", contact.id);",
							"        console.log(\"Successfully set user_id to: \" + contact.id);",
							"    }",
							"} else {",
							"    // Log an error if the request was not successful",
							"    console.error(\"Failed to retrieve user_id. Status code: \" + pm.response.code);",
							"    console.error(\"Response body:\", pm.response.text());",
							"}",
							"",
							"",
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      ok: {",
							"        type: \"object\",",
							"        properties: {",
							"          data: {",
							"            type: \"object\",",
							"            properties: {",
							"              contact: {",
							"                type: \"object\",",
							"                properties: {",
							"                  id: { type: \"string\" },",
							"                  name: { type: \"string\" },",
							"                  avatar: { type: \"string\" },",
							"                  email: { type: \"string\" },",
							"                  notifications_url: { type: \"string\" },",
							"                  public_note: { type: \"string\" },",
							"                  private_note: { type: \"string\" },",
							"                  evm_public_address: { type: \"string\" },",
							"                  icp_principal: { type: \"string\" },",
							"                  seed_phrase: { type: \"string\" },",
							"                  from_placeholder_user_id: { type: \"string\" },",
							"                  redeem_code: { type: \"null\" },",
							"                  created_at: { type: \"integer\" },",
							"                  last_online_ms: { type: \"integer\" },",
							"                  external_id: { type: \"null\" },",
							"                  external_payload: { type: \"null\" },",
							"                  permission_previews: {",
							"                    type: \"array\",",
							"                    items: { type: \"string\" }",
							"                  },",
							"                  labels: {",
							"                    type: \"array\",",
							"                    items: { type: \"object\" }",
							"                  },",
							"                  group_previews: {",
							"                    type: \"array\",",
							"                    items: {",
							"                      type: \"object\",",
							"                      properties: {",
							"                        group_id: { type: \"string\" },",
							"                        invite_id: { type: \"string\" },",
							"                        is_admin: { type: \"boolean\" },",
							"                        group_name: { type: \"string\" },",
							"                        group_avatar: { type: \"string\" }",
							"                      },",
							"                      required: [\"group_id\", \"invite_id\", \"is_admin\", \"group_name\", \"group_avatar\"]",
							"                    }",
							"                  }",
							"                },",
							"                required: [\"id\", \"name\", \"email\", \"created_at\", \"last_online_ms\", \"permission_previews\", \"group_previews\"]",
							"              },",
							"              api_key: { type: \"string\" }",
							"            },",
							"            required: [\"contact\", \"api_key\"]",
							"          }",
							"        },",
							"        required: [\"data\"]",
							"      }",
							"    },",
							"    required: [\"ok\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"current_user_id\": \"{{user_id}}\",\n  \"new_user_id\": \"UserID_ocjx7-nigdl-juj3n-5m3cu-2c7g3-hyqrv-hupit-c76dw-dnc67-slomg-hqe\",\n  \"redeem_code\": \"{{redeem_code}}\",\n  \"note\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/redeem",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"contacts",
						"redeem"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/contacts/get/:contact_id | placeholder",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      ok: {",
							"        type: \"object\",",
							"        properties: {",
							"          data: {",
							"            type: \"object\",",
							"            properties: {",
							"              id: { type: \"string\" },",
							"              name: { type: \"string\" },",
							"              avatar: { type: \"string\" },",
							"              email: { type: \"string\" },",
							"              notifications_url: { type: \"string\" },",
							"              public_note: { type: \"string\" },",
							"              private_note: { type: \"string\" },",
							"              evm_public_address: { type: \"string\" },",
							"              icp_principal: { type: \"string\" },",
							"              seed_phrase: { type: \"string\" },",
							"              from_placeholder_user_id: { type: [\"string\", \"null\"] },",
							"              redeem_code: { type: [\"string\", \"null\"] },",
							"              created_at: { type: \"integer\" },",
							"              last_online_ms: { type: \"integer\" },",
							"              external_id: { type: [\"string\", \"null\"] },",
							"              external_payload: { type: [\"string\", \"null\"] },",
							"              permission_previews: {",
							"                type: \"array\",",
							"                items: { type: \"string\" }",
							"              },",
							"              labels: {",
							"                type: \"array\"",
							"              },",
							"              group_previews: {",
							"                type: \"array\",",
							"                items: {",
							"                  type: \"object\",",
							"                  properties: {",
							"                    group_id: { type: \"string\" },",
							"                    invite_id: { type: \"string\" },",
							"                    is_admin: { type: \"boolean\" },",
							"                    group_name: { type: \"string\" },",
							"                    group_avatar: { type: \"string\" }",
							"                  },",
							"                  required: [\"group_id\", \"invite_id\", \"is_admin\", \"group_name\", \"group_avatar\"]",
							"                }",
							"              }",
							"            },",
							"            required: [\"id\", \"name\", \"avatar\", \"email\", \"notifications_url\", \"public_note\", \"private_note\", \"evm_public_address\", \"icp_principal\", \"seed_phrase\", \"from_placeholder_user_id\", \"redeem_code\", \"created_at\", \"last_online_ms\", \"external_id\", \"external_payload\", \"permission_previews\", \"labels\", \"group_previews\"]",
							"          }",
							"        },",
							"        required: [\"data\"]",
							"      }",
							"    },",
							"    required: [\"ok\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/get/{{user_id}}",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"contacts",
						"get",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/contacts/delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"",
							"pm.test(\"Validate the schema of the 'data' object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.be.an('object');",
							"    pm.expect(responseData.ok.data).to.be.an('object');",
							"    pm.expect(responseData.ok.data).to.have.all.keys('id', 'deleted');",
							"    pm.expect(responseData.ok.data.id).to.be.a('string');",
							"    pm.expect(responseData.ok.data.deleted).to.be.a('boolean');",
							"});",
							"",
							"",
							"pm.test(\"Deleted field should be set to true\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist;",
							"    pm.expect(responseData.ok.data).to.exist;",
							"    pm.expect(responseData.ok.data.deleted).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{user_id}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/delete",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"contacts",
						"delete"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}v1/drive/{{org_id}}/contacts/delete",
							"host": [
								"{{ServerEndpoint}}v1"
							],
							"path": [
								"drive",
								"{{org_id}}",
								"contacts",
								"delete"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "110"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 19:51:21 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\",\n            \"deleted\": true\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/groups/list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Validate the schema of the response object\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object').that.has.property('ok');",
							"    pm.expect(responseData.ok).to.be.an('object').that.has.property('data');",
							"    pm.expect(responseData.ok.data).to.be.an('object').that.has.property('items').that.is.an('array');",
							"    pm.expect(responseData.ok.data).to.have.keys('items','page_size', 'total', 'direction', 'cursor');",
							"",
							"    responseData.ok.data.items.forEach(item => {",
							"        pm.expect(item).to.be.an('object').that.includes.keys('id', 'name', 'owner', 'avatar', 'public_note', 'private_note', 'created_at', 'last_modified_at', 'drive_id', 'host_url', 'external_id', 'external_payload', 'member_previews', 'permission_previews');",
							"        ",
							"        pm.expect(item.created_at).to.be.a('number');",
							"        pm.expect(item.last_modified_at).to.be.a('number');",
							"",
							"        item.member_previews.forEach(member => {",
							"            pm.expect(member).to.be.an('object').that.includes.keys('user_id', 'name', 'note', 'group_id', 'is_admin', 'invite_id', 'last_online_ms');",
							"            pm.expect(member.is_admin).to.be.a('boolean');",
							"            pm.expect(member.last_online_ms).to.be.a('number');",
							"        });",
							"",
							"        pm.expect(item.permission_previews).to.be.an('array');",
							"    });",
							"});",
							"",
							"pm.test(\"Response contains 'items' array with expected structure\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist;",
							"    pm.expect(responseData.ok.data).to.exist;",
							"    pm.expect(responseData.ok.data.items).to.be.an('array');",
							"",
							"    responseData.ok.data.items.forEach(function(item) {",
							"        pm.expect(item).to.be.an('object');",
							"        pm.expect(item).to.have.all.keys('id', 'name', 'owner', 'avatar', 'public_note', 'private_note', 'created_at', 'last_modified_at', 'drive_id', 'host_url', 'external_id', 'external_payload', 'member_previews', 'permission_previews');",
							"        ",
							"        pm.expect(item.member_previews).to.be.an('array');",
							"        item.member_previews.forEach(function(member) {",
							"            pm.expect(member).to.be.an('object');",
							"            pm.expect(member).to.have.all.keys('user_id', 'name', 'note', 'group_id', 'is_admin', 'invite_id', 'last_online_ms');",
							"        });",
							"    });",
							"});",
							"",
							"pm.test(\"Validate that created_at and last_modified_at are non-negative integers\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object').that.has.property('ok').that.has.property('data').that.has.property('items').that.is.an('array');",
							"",
							"    responseData.ok.data.items.forEach(item => {",
							"        pm.expect(item.created_at).to.be.a('number').and.to.be.at.least(0, \"created_at must be a non-negative integer\");",
							"        pm.expect(item.last_modified_at).to.be.a('number').and.to.be.at.least(0, \"last_modified_at must be a non-negative integer\");",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"filters\": \"\",\n  \"page_size\": 50,\n  \"direction\": \"ASC\",\n  \"cursor_up\": \"string\",\n  \"cursor_down\": \"string\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/groups/list",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"groups",
						"list"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"filters\": \"\",\n  \"page_size\": 50,\n  \"direction\": \"ASC\",\n  \"cursor_up\": \"string\",\n  \"cursor_down\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/groups/list",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"groups",
								"list"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "3100"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 19:52:30 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"items\": [\n                {\n                    \"id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                    \"name\": \"Group for All\",\n                    \"owner\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n                    \"avatar\": null,\n                    \"public_note\": null,\n                    \"private_note\": null,\n                    \"created_at\": 1753276590260,\n                    \"last_modified_at\": 1753276590260,\n                    \"drive_id\": \"DriveID_axyvc-hnmtt-e7ey4-zdctl-rw2tk-lbpu6-2b2af-yuxtp-cpqai-wnjcz-nae\",\n                    \"endpoint_url\": \"https://officex.otterpad.cc\",\n                    \"external_id\": null,\n                    \"external_payload\": null,\n                    \"member_previews\": [\n                        {\n                            \"user_id\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n                            \"name\": \"Owner\",\n                            \"note\": \"giftcard GiftcardSpawnOrgID_785fe3fa-0c71-4428-bdb5-b33c88606607 was redeemed to spawn drive with 3500000000000 cycles, owned by UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe, on timestamp_ms 1753276590260 2025-07-23T13:16:30.260Z\",\n                            \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                            \"is_admin\": true,\n                            \"invite_id\": \"GroupInviteID_76d008d7-9a46-4da9-9435-c45c24af11dc\",\n                            \"last_online_ms\": 1753276590260\n                        },\n                        {\n                            \"user_id\": \"UserID_yghsj-jf6tk-32lwm-asdd3-jisdj-bbnvf-xhagi-k2pdd-ikncd-6opry-sqe\",\n                            \"name\": \"John Doee\",\n                            \"note\": \"Auto-invited to default 'Group for All' upon contact creation.\",\n                            \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                            \"is_admin\": false,\n                            \"invite_id\": \"GroupInviteID_ca0ad758-3c49-401d-bb36-7f241e658436\",\n                            \"last_online_ms\": 0\n                        },\n                        {\n                            \"user_id\": \"UserID_oik5u-j2dre-qb6km-xljny-hdrew-eft3z-znkyx-curyp-bvcrz-lgz5g-iae\",\n                            \"name\": \"John Doe\",\n                            \"note\": \"Auto-invited to default 'Group for All' upon contact creation.\",\n                            \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                            \"is_admin\": false,\n                            \"invite_id\": \"GroupInviteID_adbb38bc-f241-428c-a18d-807e5fda46bf\",\n                            \"last_online_ms\": 0\n                        },\n                        {\n                            \"user_id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n                            \"name\": \"John Doe\",\n                            \"note\": \"Auto-invited to default 'Group for All' upon contact creation.\",\n                            \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                            \"is_admin\": false,\n                            \"invite_id\": \"GroupInviteID_930a7fa9-0d9a-4f65-bb10-03db6a572ee6\",\n                            \"last_online_ms\": 0\n                        },\n                        {\n                            \"user_id\": \"UserID_lhdoi-bokqa-sob6i-3mnjr-4i4zt-jpgcp-7vman-u2fzg-6sc4j-7wd5q-2ae\",\n                            \"name\": \"John Doe\",\n                            \"note\": \"Auto-invited to default 'Group for All' upon contact creation.\",\n                            \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                            \"is_admin\": false,\n                            \"invite_id\": \"GroupInviteID_212c5ab4-61cd-40e2-aa45-ab8ef0713d65\",\n                            \"last_online_ms\": 0\n                        }\n                    ],\n                    \"permission_previews\": [\n                        \"CREATE\",\n                        \"VIEW\",\n                        \"EDIT\",\n                        \"DELETE\",\n                        \"INVITE\"\n                    ]\n                },\n                {\n                    \"id\": \"GroupID_eab163dc-265f-4042-9674-5b6731e0f74e\",\n                    \"name\": \"Product Development\",\n                    \"owner\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n                    \"avatar\": \"\",\n                    \"public_note\": \"Core product development group\",\n                    \"private_note\": null,\n                    \"created_at\": 1753281867922,\n                    \"last_modified_at\": 1753281867922,\n                    \"drive_id\": \"DriveID_axyvc-hnmtt-e7ey4-zdctl-rw2tk-lbpu6-2b2af-yuxtp-cpqai-wnjcz-nae\",\n                    \"endpoint_url\": \"https://officex.otterpad.cc\",\n                    \"external_id\": \"\",\n                    \"external_payload\": \"{\\\"department\\\": \\\"engineering\\\", \\\"project\\\": \\\"alpha\\\"}\",\n                    \"member_previews\": [],\n                    \"permission_previews\": [\n                        \"CREATE\",\n                        \"VIEW\",\n                        \"EDIT\",\n                        \"DELETE\",\n                        \"INVITE\"\n                    ]\n                }\n            ],\n            \"page_size\": 50,\n            \"total\": 2,\n            \"direction\": \"ASC\",\n            \"cursor\": null\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/groups/create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Fixed response code check and updated member_previews validation",
							"var jsonData = pm.response.json();",
							"if (pm.response.code === 200 && jsonData.ok && jsonData.ok.data.id) {",
							"    var data = jsonData.ok.data;",
							"    var group_id = data.id;",
							"    if (group_id) {",
							"        pm.collectionVariables.set(\"group_id\", group_id);",
							"        console.log(\"Successfully set group_id to: \" + group_id);",
							"    }",
							"} else {",
							"    // Log an error if the request was not successful",
							"    console.error(\"Failed to retrieve group_id. Status code: \" + pm.response.code);",
							"    console.error(\"Response body:\", pm.response.text());",
							"}",
							"",
							"",
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      ok: {",
							"        type: \"object\",",
							"        properties: {",
							"          data: {",
							"            type: \"object\",",
							"            properties: {",
							"              id: { type: \"string\" },",
							"              name: { type: \"string\" },",
							"              owner: { type: \"string\" },",
							"              avatar: { type: [\"string\", \"null\"] },",
							"              public_note: { type: \"string\" },",
							"              created_at: { type: \"number\" },",
							"              last_modified_at: { type: \"number\" },",
							"              drive_id: { type: \"string\" },",
							"              host_url: { type: \"string\" },",
							"              labels: {",
							"                type: \"array\",",
							"                items: { type: \"string\" }",
							"              },",
							"              external_id: { type: \"string\" },",
							"              external_payload: { type: \"string\" },",
							"              admin_invites: {",
							"                type: \"array\",",
							"                items: { type: \"object\" }",
							"              },",
							"              member_invites: {",
							"                type: \"array\",",
							"                items: { type: \"object\" }",
							"              },",
							"              member_previews: {",
							"                type: \"array\",",
							"                items: {",
							"                  type: \"object\",",
							"                  properties: {",
							"                    user_id: { type: \"string\" },",
							"                    name: { type: \"string\" },",
							"                    note: { type: \"string\" },",
							"                    avatar: { type: [\"string\", \"null\"] },",
							"                    group_id: { type: \"string\" },",
							"                    is_admin: { type: \"boolean\" },",
							"                    invite_id: { type: \"string\" },",
							"                    last_online_ms: { type: \"number\" }",
							"                  },",
							"                  required: [\"user_id\", \"name\", \"is_admin\"]",
							"                }",
							"              },",
							"              permission_previews: {",
							"                type: \"array\",",
							"                items: { type: \"string\" }",
							"              }",
							"            },",
							"            required: [\"id\", \"name\", \"owner\", \"created_at\", \"last_modified_at\"]",
							"          }",
							"        },",
							"        required: [\"data\"]",
							"      }",
							"    },",
							"    required: [\"ok\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Product Design Team\",\n  \"public_note\": \"Core product development group\",\n  \"endpoint_url\": \"{{ServerEndpoint}}\",\n  \"external_id\": \"\",\n  \"external_payload\": \"{\\\"department\\\": \\\"engineering\\\", \\\"project\\\": \\\"alpha\\\"}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/groups/create",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"groups",
						"create"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Product Development\",\n  \"public_note\": \"Core product development group\",\n  \"endpoint_url\": \"https://officex.otterpad.cc\",\n  \"external_id\": \"\",\n  \"external_payload\": \"{\\\"department\\\": \\\"engineering\\\", \\\"project\\\": \\\"alpha\\\"}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/groups/create",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"groups",
								"create"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "1042"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 19:53:51 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"id\": \"GroupID_d1d78954-46fb-463c-bec8-c69eab5605ff\",\n            \"name\": \"Product Development\",\n            \"owner\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n            \"avatar\": \"\",\n            \"public_note\": \"Core product development group\",\n            \"created_at\": 1753300431047,\n            \"last_modified_at\": 1753300431047,\n            \"drive_id\": \"DriveID_axyvc-hnmtt-e7ey4-zdctl-rw2tk-lbpu6-2b2af-yuxtp-cpqai-wnjcz-nae\",\n            \"endpoint_url\": \"https://officex.otterpad.cc\",\n            \"labels\": [],\n            \"external_id\": \"\",\n            \"external_payload\": \"{\\\"department\\\": \\\"engineering\\\", \\\"project\\\": \\\"alpha\\\"}\",\n            \"admin_invites\": [],\n            \"member_invites\": [],\n            \"member_previews\": [\n                {\n                    \"user_id\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n                    \"name\": \"Owner\",\n                    \"note\": \"Added as ADMIN by UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n                    \"avatar\": null,\n                    \"group_id\": \"GroupID_d1d78954-46fb-463c-bec8-c69eab5605ff\",\n                    \"is_admin\": true,\n                    \"invite_id\": \"GroupInviteID_db0e2ec2-039a-4640-9b3d-7beccaddac2d\",\n                    \"last_online_ms\": 1753276590260\n                }\n            ],\n            \"permission_previews\": [\n                \"CREATE\",\n                \"VIEW\",\n                \"EDIT\",\n                \"DELETE\",\n                \"INVITE\"\n            ]\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/groups/update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      ok: {",
							"        type: \"object\",",
							"        properties: {",
							"          data: {",
							"            type: \"object\",",
							"            properties: {",
							"              id: { type: \"string\" },",
							"              name: { type: \"string\" },",
							"              owner: { type: \"string\" },",
							"              avatar: { type: \"string\" },",
							"              private_note: { type: \"string\" },",
							"              public_note: { type: \"string\" },",
							"              admin_invites: {",
							"                type: \"array\",",
							"                items: { type: \"string\" }",
							"              },",
							"              member_invites: {",
							"                type: \"array\",",
							"                items: { type: \"string\" }",
							"              },",
							"              created_at: { type: \"number\" },",
							"              last_modified_at: { type: \"number\" },",
							"              drive_id: { type: \"string\" },",
							"              host_url: { type: \"string\" },",
							"              labels: {",
							"                type: \"array\",",
							"                items: { type: \"string\" }",
							"              },",
							"              external_id: { type: \"string\" },",
							"              external_payload: { type: \"string\" },",
							"              member_previews: {",
							"                type: \"array\",",
							"                items: {",
							"                  type: \"object\",",
							"                  properties: {",
							"                    user_id: { type: \"string\" },",
							"                    name: { type: \"string\" },",
							"                    note: { type: \"string\" },",
							"                    avatar: { type: [\"string\", \"null\"] },",
							"                    group_id: { type: \"string\" },",
							"                    is_admin: { type: \"boolean\" },",
							"                    invite_id: { type: \"string\" },",
							"                    last_online_ms: { type: \"number\" }",
							"                  },",
							"                  required: [\"user_id\", \"name\", \"is_admin\"]",
							"                }",
							"              },",
							"              permission_previews: {",
							"                type: \"array\",",
							"                items: { type: \"string\" }",
							"              }",
							"            },",
							"            required: [\"id\", \"name\", \"owner\", \"admin_invites\", \"member_invites\", \"created_at\", \"last_modified_at\", \"drive_id\", \"host_url\", \"member_previews\"]",
							"          }",
							"        },",
							"        required: [\"data\"]",
							"      }",
							"    },",
							"    required: [\"ok\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{group_id}}\",\n  \"name\": \"Product & Design\",\n  \"private_note\": \"Updated group structure\",\n  \"external_id\": \"\",\n  \"external_payload\": \"{\\\"department\\\": \\\"engineering\\\", \\\"project\\\": \\\"alpha\\\", \\\"updated\\\": true}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/groups/update",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"groups",
						"update"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"GroupID_d1d78954-46fb-463c-bec8-c69eab5605ff\",\n  \"name\": \"Product & Design\",\n  \"private_note\": \"Updated group structure\",\n  \"external_id\": \"\",\n  \"external_payload\": \"{\\\"department\\\": \\\"engineering\\\", \\\"project\\\": \\\"alpha\\\", \\\"updated\\\": true}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/groups/update",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"groups",
								"update"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "1605"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 19:58:24 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"id\": \"GroupID_d1d78954-46fb-463c-bec8-c69eab5605ff\",\n            \"name\": \"Product & Design\",\n            \"owner\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n            \"avatar\": \"\",\n            \"private_note\": \"Updated group structure\",\n            \"public_note\": \"Core product development group\",\n            \"admin_invites\": [\n                \"GroupInviteID_db0e2ec2-039a-4640-9b3d-7beccaddac2d\"\n            ],\n            \"member_invites\": [\n                \"GroupInviteID_db0e2ec2-039a-4640-9b3d-7beccaddac2d\",\n                \"GroupInviteID_38ca8dd8-6987-404a-be18-79e662c63c6b\"\n            ],\n            \"created_at\": 1753300431047,\n            \"last_modified_at\": 1753300704822,\n            \"drive_id\": \"DriveID_axyvc-hnmtt-e7ey4-zdctl-rw2tk-lbpu6-2b2af-yuxtp-cpqai-wnjcz-nae\",\n            \"endpoint_url\": \"https://officex.otterpad.cc\",\n            \"labels\": [],\n            \"external_id\": \"\",\n            \"external_payload\": \"{\\\"department\\\": \\\"engineering\\\", \\\"project\\\": \\\"alpha\\\", \\\"updated\\\": true}\",\n            \"member_previews\": [\n                {\n                    \"user_id\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n                    \"name\": \"Owner\",\n                    \"note\": \"Added as ADMIN by UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n                    \"avatar\": null,\n                    \"group_id\": \"GroupID_d1d78954-46fb-463c-bec8-c69eab5605ff\",\n                    \"is_admin\": true,\n                    \"invite_id\": \"GroupInviteID_db0e2ec2-039a-4640-9b3d-7beccaddac2d\",\n                    \"last_online_ms\": 1753276590260\n                },\n                {\n                    \"user_id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\",\n                    \"name\": \"Unknown User (UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae)\",\n                    \"note\": \"\",\n                    \"group_id\": \"GroupID_d1d78954-46fb-463c-bec8-c69eab5605ff\",\n                    \"is_admin\": false,\n                    \"invite_id\": \"GroupInviteID_38ca8dd8-6987-404a-be18-79e662c63c6b\",\n                    \"last_online_ms\": 0\n                }\n            ],\n            \"permission_previews\": [\n                \"CREATE\",\n                \"VIEW\",\n                \"EDIT\",\n                \"DELETE\",\n                \"INVITE\"\n            ]\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/groups/get/:group_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      ok: {",
							"        type: \"object\",",
							"        properties: {",
							"          data: {",
							"            type: \"object\",",
							"            properties: {",
							"              id: { type: \"string\" },",
							"              name: { type: \"string\" },",
							"              owner: { type: \"string\" },",
							"              avatar: { type: \"string\" },",
							"              private_note: { type: [\"string\", \"null\"] },",
							"              public_note: { type: [\"string\", \"null\"] },",
							"              admin_invites: {",
							"                type: \"array\",",
							"                items: { type: \"string\" }",
							"              },",
							"              member_invites: {",
							"                type: \"array\",",
							"                items: { type: \"string\" }",
							"              },",
							"              created_at: { type: \"integer\" },",
							"              last_modified_at: { type: \"integer\" },",
							"              drive_id: { type: \"string\" },",
							"              host_url: { type: \"string\" },",
							"              labels: {",
							"                type: \"array\",",
							"                items: { type: \"string\" }",
							"              },",
							"              external_id: { type: [\"string\", \"null\"] },",
							"              external_payload: { type: [\"string\", \"null\"] },",
							"              member_previews: {",
							"                type: \"array\",",
							"                items: {",
							"                  type: \"object\",",
							"                  properties: {",
							"                    user_id: { type: \"string\" },",
							"                    name: { type: \"string\" },",
							"                    note: { type: \"string\" },",
							"                    group_id: { type: \"string\" },",
							"                    is_admin: { type: \"boolean\" },",
							"                    invite_id: { type: \"string\" },",
							"                    last_online_ms: { type: \"integer\" }",
							"                  },",
							"                  required: [\"user_id\", \"name\", \"group_id\", \"is_admin\", \"invite_id\"]",
							"                }",
							"              },",
							"              permission_previews: {",
							"                type: \"array\",",
							"                items: { type: \"string\" }",
							"              }",
							"            },",
							"            required: [\"id\", \"name\", \"owner\", \"admin_invites\", \"member_invites\", \"created_at\", \"last_modified_at\", \"drive_id\", \"host_url\", \"labels\", \"member_previews\", \"permission_previews\"]",
							"          }",
							"        },",
							"        required: [\"data\"]",
							"      }",
							"    },",
							"    required: [\"ok\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/groups/get/{{group_id}}",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"groups",
						"get",
						"{{group_id}}"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/groups/get/{{group_id}}",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"groups",
								"get",
								"{{group_id}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "2781"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 19:53:35 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n            \"name\": \"Group for All\",\n            \"owner\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n            \"avatar\": \"\",\n            \"private_note\": null,\n            \"public_note\": null,\n            \"admin_invites\": [\n                \"GroupInviteID_76d008d7-9a46-4da9-9435-c45c24af11dc\"\n            ],\n            \"member_invites\": [\n                \"GroupInviteID_76d008d7-9a46-4da9-9435-c45c24af11dc\",\n                \"GroupInviteID_ca0ad758-3c49-401d-bb36-7f241e658436\",\n                \"GroupInviteID_adbb38bc-f241-428c-a18d-807e5fda46bf\",\n                \"GroupInviteID_930a7fa9-0d9a-4f65-bb10-03db6a572ee6\",\n                \"GroupInviteID_212c5ab4-61cd-40e2-aa45-ab8ef0713d65\"\n            ],\n            \"created_at\": 1753276590260,\n            \"last_modified_at\": 1753276590260,\n            \"drive_id\": \"DriveID_axyvc-hnmtt-e7ey4-zdctl-rw2tk-lbpu6-2b2af-yuxtp-cpqai-wnjcz-nae\",\n            \"endpoint_url\": \"https://officex.otterpad.cc\",\n            \"labels\": [],\n            \"external_id\": null,\n            \"external_payload\": null,\n            \"member_previews\": [\n                {\n                    \"user_id\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n                    \"name\": \"Owner\",\n                    \"note\": \"giftcard GiftcardSpawnOrgID_785fe3fa-0c71-4428-bdb5-b33c88606607 was redeemed to spawn drive with 3500000000000 cycles, owned by UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe, on timestamp_ms 1753276590260 2025-07-23T13:16:30.260Z\",\n                    \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                    \"is_admin\": true,\n                    \"invite_id\": \"GroupInviteID_76d008d7-9a46-4da9-9435-c45c24af11dc\",\n                    \"last_online_ms\": 1753276590260\n                },\n                {\n                    \"user_id\": \"UserID_yghsj-jf6tk-32lwm-asdd3-jisdj-bbnvf-xhagi-k2pdd-ikncd-6opry-sqe\",\n                    \"name\": \"John Doee\",\n                    \"note\": \"Auto-invited to default 'Group for All' upon contact creation.\",\n                    \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                    \"is_admin\": false,\n                    \"invite_id\": \"GroupInviteID_ca0ad758-3c49-401d-bb36-7f241e658436\",\n                    \"last_online_ms\": 0\n                },\n                {\n                    \"user_id\": \"UserID_oik5u-j2dre-qb6km-xljny-hdrew-eft3z-znkyx-curyp-bvcrz-lgz5g-iae\",\n                    \"name\": \"John Doe\",\n                    \"note\": \"Auto-invited to default 'Group for All' upon contact creation.\",\n                    \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                    \"is_admin\": false,\n                    \"invite_id\": \"GroupInviteID_adbb38bc-f241-428c-a18d-807e5fda46bf\",\n                    \"last_online_ms\": 0\n                },\n                {\n                    \"user_id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n                    \"name\": \"John Doe\",\n                    \"note\": \"Auto-invited to default 'Group for All' upon contact creation.\",\n                    \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                    \"is_admin\": false,\n                    \"invite_id\": \"GroupInviteID_930a7fa9-0d9a-4f65-bb10-03db6a572ee6\",\n                    \"last_online_ms\": 0\n                },\n                {\n                    \"user_id\": \"UserID_lhdoi-bokqa-sob6i-3mnjr-4i4zt-jpgcp-7vman-u2fzg-6sc4j-7wd5q-2ae\",\n                    \"name\": \"John Doe\",\n                    \"note\": \"Auto-invited to default 'Group for All' upon contact creation.\",\n                    \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                    \"is_admin\": false,\n                    \"invite_id\": \"GroupInviteID_212c5ab4-61cd-40e2-aa45-ab8ef0713d65\",\n                    \"last_online_ms\": 0\n                }\n            ],\n            \"permission_previews\": [\n                \"CREATE\",\n                \"EDIT\",\n                \"DELETE\",\n                \"INVITE\",\n                \"VIEW\"\n            ]\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/groups/invites/list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      ok: {",
							"        type: \"object\",",
							"        properties: {",
							"          data: {",
							"            type: \"object\",",
							"            properties: {",
							"              items: {",
							"                type: \"array\",",
							"                items: {",
							"                  type: \"object\",",
							"                  properties: {",
							"                    id: { type: \"string\" },",
							"                    group_id: { type: \"string\" },",
							"                    inviter_id: { type: \"string\" },",
							"                    invitee_id: { type: \"string\" },",
							"                    role: { type: \"string\" },",
							"                    note: { type: \"string\" },",
							"                    active_from: { type: \"integer\" },",
							"                    expires_at: { type: \"integer\" },",
							"                    created_at: { type: \"integer\" },",
							"                    last_modified_at: { type: \"integer\" },",
							"                    from_placeholder_invitee: { type: [\"null\", \"boolean\"] },",
							"                    labels: { type: \"array\" },",
							"                    redeem_code: { type: [\"null\", \"string\"] },",
							"                    external_id: { type: [\"null\", \"string\"] },",
							"                    external_payload: { type: [\"null\", \"string\"] },",
							"                    group_name: { type: \"string\" },",
							"                    group_avatar: { type: \"string\" },",
							"                    invitee_name: { type: \"string\" },",
							"                    invitee_avatar: { type: [\"null\", \"string\"] },",
							"                    permission_previews: { type: \"array\" }",
							"                  },",
							"                  required: [\"id\", \"group_id\", \"inviter_id\", \"invitee_id\", \"role\", \"active_from\", \"expires_at\", \"created_at\", \"last_modified_at\"]",
							"                }",
							"              },",
							"              page_size: { type: \"integer\" },",
							"              total: { type: \"integer\" },",
							"              direction: { type: \"string\" },",
							"              cursor: { type: [\"null\", \"string\"] }",
							"            },",
							"            required: [\"items\", \"page_size\", \"total\", \"direction\", \"cursor\"]",
							"          }",
							"        },",
							"        required: [\"data\"]",
							"      }",
							"    },",
							"    required: [\"ok\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"group_id\": \"{{group_id}}\",\n  \"filters\": \"\",\n  \"page_size\": 50,\n  \"direction\": \"ASC\",\n  \"cursor_up\": \"string\",\n  \"cursor_down\": \"string\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/groups/invites/list",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"groups",
						"invites",
						"list"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"group_id\": \"GroupID_d1d78954-46fb-463c-bec8-c69eab5605ff\",\n  \"filters\": \"\",\n  \"page_size\": 50,\n  \"direction\": \"ASC\",\n  \"cursor_up\": \"string\",\n  \"cursor_down\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/groups/invites/list",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"groups",
								"invites",
								"list"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "1586"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 19:59:28 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"items\": [\n                {\n                    \"id\": \"GroupInviteID_db0e2ec2-039a-4640-9b3d-7beccaddac2d\",\n                    \"group_id\": \"GroupID_d1d78954-46fb-463c-bec8-c69eab5605ff\",\n                    \"inviter_id\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n                    \"invitee_id\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n                    \"role\": \"ADMIN\",\n                    \"note\": \"Added as ADMIN by UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n                    \"active_from\": 1753300431056,\n                    \"expires_at\": -1,\n                    \"created_at\": 1753300431056,\n                    \"last_modified_at\": 1753300431056,\n                    \"from_placeholder_invitee\": null,\n                    \"labels\": [],\n                    \"redeem_code\": null,\n                    \"external_id\": null,\n                    \"external_payload\": null,\n                    \"group_name\": \"Product & Design\",\n                    \"group_avatar\": \"\",\n                    \"invitee_name\": \"Owner\",\n                    \"invitee_avatar\": null,\n                    \"permission_previews\": [\n                        \"CREATE\",\n                        \"VIEW\",\n                        \"EDIT\",\n                        \"DELETE\",\n                        \"INVITE\"\n                    ]\n                },\n                {\n                    \"id\": \"GroupInviteID_38ca8dd8-6987-404a-be18-79e662c63c6b\",\n                    \"group_id\": \"GroupID_d1d78954-46fb-463c-bec8-c69eab5605ff\",\n                    \"inviter_id\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n                    \"invitee_id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\",\n                    \"role\": \"MEMBER\",\n                    \"note\": \"\",\n                    \"active_from\": 1753300543670,\n                    \"expires_at\": -1,\n                    \"created_at\": 1753300543934,\n                    \"last_modified_at\": 1753300543934,\n                    \"from_placeholder_invitee\": null,\n                    \"labels\": [],\n                    \"redeem_code\": null,\n                    \"external_id\": null,\n                    \"external_payload\": null,\n                    \"group_name\": \"Product & Design\",\n                    \"group_avatar\": \"\",\n                    \"invitee_name\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\",\n                    \"permission_previews\": [\n                        \"CREATE\",\n                        \"VIEW\",\n                        \"EDIT\",\n                        \"DELETE\",\n                        \"INVITE\"\n                    ]\n                }\n            ],\n            \"page_size\": 50,\n            \"total\": 2,\n            \"direction\": \"ASC\",\n            \"cursor\": null\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/groups/invites/create | known",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"// Set env vars",
							"var jsonData = pm.response.json();",
							"if (pm.response.code === 200 && jsonData.ok && jsonData.ok.data.id) {",
							"    var data = jsonData.ok.data;",
							"    var group_invite_id = data.id;",
							"    if (group_invite_id) {",
							"        pm.collectionVariables.set(\"group_invite_id\", group_invite_id);",
							"        console.log(\"Successfully set group_invite_id to: \" + group_invite_id);",
							"    }",
							"} else {",
							"    // Log an error if the request was not successful",
							"    console.error(\"Failed to retrieve group_invite_id. Status code: \" + pm.response.code);",
							"    console.error(\"Response body:\", pm.response.text());",
							"}",
							"",
							"",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response contains required fields in the data object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.ok.data).to.exist.and.to.be.an('object');",
							"    ",
							"    const requiredFields = ['id', 'group_id', 'inviter_id', 'invitee_id', 'role', 'note', 'active_from', 'expires_at', 'created_at', 'last_modified_at', 'labels', 'external_id', 'external_payload', 'group_name', 'group_avatar', 'invitee_name', 'permission_previews'];",
							"    ",
							"    requiredFields.forEach(function(field) {",
							"        pm.expect(responseData.ok.data).to.have.property(field);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"The 'id' and 'group_id' must be non-empty strings\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.ok.data).to.exist.and.to.be.an('object');",
							"",
							"    const { id, group_id } = responseData.ok.data;",
							"",
							"    pm.expect(id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"The 'id' should not be empty\");",
							"    pm.expect(group_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"The 'group_id' should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Expires_at is a signed integer indicating a future timestamp\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist;",
							"    pm.expect(responseData.ok.data).to.exist;",
							"    pm.expect(responseData.ok.data.expires_at).to.be.a('number');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"group_id\": \"{{group_id}}\",\n  \"invitee_id\": \"UserID_ttko6-fa7zz-btluu-e7wxr-nx7we-schz3-ygt3h-3kqad-3z767-wjogx-iqe\",\n  \"role\": \"MEMBER\",\n  \"note\": \"Invitation to join the project group\",\n  \"expires_at\": 1672531200000,\n  \"external_id\": \"ext-invite-001\",\n  \"external_payload\": \"{\\\"department\\\": \\\"engineering\\\", \\\"project\\\": \\\"alpha\\\"}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/groups/invites/create",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"groups",
						"invites",
						"create"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"group_id\": \"GroupID_d1d78954-46fb-463c-bec8-c69eab5605ff\",\n  \"invitee_id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\",\n  \"role\": \"MEMBER\",\n  \"note\": \"Invitation to join the project group\",\n  \"expires_at\": 1672531200000,\n  \"external_id\": \"ext-invite-001\",\n  \"external_payload\": \"{\\\"department\\\": \\\"engineering\\\", \\\"project\\\": \\\"alpha\\\"}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/groups/invites/create",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"groups",
								"invites",
								"create"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "810"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 20:00:09 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"id\": \"GroupInviteID_8ab242c5-9bbf-45a6-9d74-747ae671b9b3\",\n            \"group_id\": \"GroupID_d1d78954-46fb-463c-bec8-c69eab5605ff\",\n            \"inviter_id\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n            \"invitee_id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\",\n            \"role\": \"MEMBER\",\n            \"note\": \"Invitation to join the project group\",\n            \"active_from\": 0,\n            \"expires_at\": 1672531200000,\n            \"created_at\": 1753300809587,\n            \"last_modified_at\": 1753300809587,\n            \"labels\": [],\n            \"external_id\": \"ext-invite-001\",\n            \"external_payload\": \"{\\\"department\\\": \\\"engineering\\\", \\\"project\\\": \\\"alpha\\\"}\",\n            \"group_name\": \"Product & Design\",\n            \"group_avatar\": \"\",\n            \"invitee_name\": \"Unknown User (UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae)\",\n            \"permission_previews\": [\n                \"CREATE\",\n                \"VIEW\",\n                \"EDIT\",\n                \"DELETE\",\n                \"INVITE\"\n            ]\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/groups/invites/update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      ok: {",
							"        type: \"object\",",
							"        properties: {",
							"          data: {",
							"            type: \"object\",",
							"            properties: {",
							"              id: { type: \"string\" },",
							"              group_id: { type: \"string\" },",
							"              inviter_id: { type: \"string\" },",
							"              invitee_id: { type: \"string\" },",
							"              role: { type: \"string\" },",
							"              note: { type: \"string\" },",
							"              active_from: { type: \"integer\" },",
							"              expires_at: { type: \"integer\" },",
							"              created_at: { type: \"integer\" },",
							"              last_modified_at: { type: \"integer\" },",
							"              redeem_code: { type: [\"string\", \"null\"] },",
							"              from_placeholder_invitee: { type: [\"boolean\", \"null\"] },",
							"              labels: { type: \"array\" },",
							"              external_id: { type: \"string\" },",
							"              external_payload: { type: \"string\" },",
							"              group_name: { type: \"string\" },",
							"              group_avatar: { type: \"string\" },",
							"              invitee_name: { type: \"string\" },",
							"              permission_previews: { type: \"array\" }",
							"            },",
							"            required: [\"id\", \"group_id\", \"inviter_id\", \"invitee_id\", \"role\", \"active_from\", \"expires_at\", \"created_at\", \"last_modified_at\"]",
							"          }",
							"        },",
							"        required: [\"data\"]",
							"      }",
							"    },",
							"    required: [\"ok\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{group_invite_id}}\",\n  \"role\": \"ADMIN\",\n  \"note\": \"Invitation to join the project group updated as admin\",\n  \"expires_at\": 1672531200000,\n  \"external_id\": \"ext-invite-001\",\n  \"external_payload\": \"{\\\"department\\\": \\\"engineering\\\", \\\"project\\\": \\\"alpha\\\"}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/groups/invites/update",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"groups",
						"invites",
						"update"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"GroupInviteID_8ab242c5-9bbf-45a6-9d74-747ae671b9b3\",\n  \"role\": \"MEMBER\",\n  \"note\": \"Invitation to join the project group\",\n  \"expires_at\": 1672531200000,\n  \"external_id\": \"ext-invite-001\",\n  \"external_payload\": \"{\\\"department\\\": \\\"engineering\\\", \\\"project\\\": \\\"alpha\\\"}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/groups/invites/update",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"groups",
								"invites",
								"update"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "861"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 20:01:53 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"id\": \"GroupInviteID_8ab242c5-9bbf-45a6-9d74-747ae671b9b3\",\n            \"group_id\": \"GroupID_d1d78954-46fb-463c-bec8-c69eab5605ff\",\n            \"inviter_id\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n            \"invitee_id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\",\n            \"role\": \"MEMBER\",\n            \"note\": \"Invitation to join the project group\",\n            \"active_from\": 0,\n            \"expires_at\": 1672531200000,\n            \"created_at\": 1753300809587,\n            \"last_modified_at\": 1753300913663,\n            \"redeem_code\": null,\n            \"from_placeholder_invitee\": null,\n            \"labels\": [],\n            \"external_id\": \"ext-invite-001\",\n            \"external_payload\": \"{\\\"department\\\": \\\"engineering\\\", \\\"project\\\": \\\"alpha\\\"}\",\n            \"group_name\": \"Product & Design\",\n            \"group_avatar\": \"\",\n            \"invitee_name\": \"Unknown User (UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae)\",\n            \"permission_previews\": [\n                \"CREATE\",\n                \"VIEW\",\n                \"EDIT\",\n                \"DELETE\",\n                \"INVITE\"\n            ]\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "/drive/:org_id/groups/invites/get/:invite_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      ok: {",
							"        type: \"object\",",
							"        properties: {",
							"          data: {",
							"            type: \"object\",",
							"            properties: {",
							"              id: { type: \"string\" },",
							"              group_id: { type: \"string\" },",
							"              inviter_id: { type: \"string\" },",
							"              invitee_id: { type: \"string\" },",
							"              role: { type: \"string\" },",
							"              note: { type: \"string\" },",
							"              active_from: { type: \"integer\" },",
							"              expires_at: { type: \"integer\" },",
							"              created_at: { type: \"integer\" },",
							"              last_modified_at: { type: \"integer\" },",
							"              redeem_code: { type: [\"string\", \"null\"] },",
							"              from_placeholder_invitee: { type: [\"boolean\", \"null\"] },",
							"              labels: {",
							"                type: \"array\",",
							"                items: { type: \"string\" }",
							"              },",
							"              external_id: { type: \"string\" },",
							"              external_payload: { type: \"string\" },",
							"              group_name: { type: \"string\" },",
							"              group_avatar: { type: \"string\" },",
							"              invitee_name: { type: \"string\" },",
							"              permission_previews: {",
							"                type: \"array\",",
							"                items: { type: \"string\" }",
							"              }",
							"            },",
							"            required: [\"id\", \"group_id\", \"inviter_id\", \"invitee_id\", \"role\", \"active_from\", \"expires_at\", \"created_at\", \"last_modified_at\"]",
							"          }",
							"        },",
							"        required: [\"data\"]",
							"      }",
							"    },",
							"    required: [\"ok\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/groups/invites/get/{{group_invite_id}}",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"groups",
						"invites",
						"get",
						"{{group_invite_id}}"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/groups/invites/get/{{GroupInvite_ID}}",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"groups",
								"invites",
								"get",
								"{{GroupInvite_ID}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "861"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 20:01:11 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"id\": \"GroupInviteID_8ab242c5-9bbf-45a6-9d74-747ae671b9b3\",\n            \"group_id\": \"GroupID_d1d78954-46fb-463c-bec8-c69eab5605ff\",\n            \"inviter_id\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n            \"invitee_id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\",\n            \"role\": \"MEMBER\",\n            \"note\": \"Invitation to join the project group\",\n            \"active_from\": 0,\n            \"expires_at\": 1672531200000,\n            \"created_at\": 1753300809587,\n            \"last_modified_at\": 1753300809587,\n            \"redeem_code\": null,\n            \"from_placeholder_invitee\": null,\n            \"labels\": [],\n            \"external_id\": \"ext-invite-001\",\n            \"external_payload\": \"{\\\"department\\\": \\\"engineering\\\", \\\"project\\\": \\\"alpha\\\"}\",\n            \"group_name\": \"Product & Design\",\n            \"group_avatar\": \"\",\n            \"invitee_name\": \"Unknown User (UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae)\",\n            \"permission_previews\": [\n                \"CREATE\",\n                \"VIEW\",\n                \"EDIT\",\n                \"DELETE\",\n                \"INVITE\"\n            ]\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/groups/invites/delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      ok: {",
							"        type: \"object\",",
							"        properties: {",
							"          data: {",
							"            type: \"object\",",
							"            properties: {",
							"              id: {",
							"                type: \"string\"",
							"              },",
							"              deleted: {",
							"                type: \"boolean\"",
							"              }",
							"            },",
							"            required: [\"id\", \"deleted\"]",
							"          }",
							"        },",
							"        required: [\"data\"]",
							"      }",
							"    },",
							"    required: [\"ok\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{group_invite_id}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/groups/invites/delete",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"groups",
						"invites",
						"delete"
					]
				}
			},
			"response": [
				{
					"name": "response sample",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"GroupInviteID_74d530da-d544-4e82-ad01-9d93c90cda7f\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/groups/invites/delete",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"groups",
								"invites",
								"delete"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "90"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 20:06:12 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"id\": \"GroupInviteID_74d530da-d544-4e82-ad01-9d93c90cda7f\",\n            \"deleted\": true\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/groups/invites/create | placeholder",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"// Set env vars",
							"var jsonData = pm.response.json();",
							"if (pm.response.code === 200 && jsonData.ok && jsonData.ok.data.id) {",
							"    var data = jsonData.ok.data;",
							"    var group_invite_id = data.id;",
							"    if (group_invite_id) {",
							"        pm.collectionVariables.set(\"group_invite_id\", group_invite_id);",
							"        console.log(\"Successfully set group_invite_id to: \" + group_invite_id);",
							"    }",
							"    var redeem_code = data.redeem_code;",
							"    if (redeem_code) {",
							"        pm.collectionVariables.set(\"redeem_code\", redeem_code);",
							"        console.log(\"Successfully set redeem_code to: \" + redeem_code);",
							"    }",
							"} else {",
							"    // Log an error if the request was not successful",
							"    console.error(\"Failed to retrieve group_invite_id. Status code: \" + pm.response.code);",
							"    console.error(\"Response body:\", pm.response.text());",
							"}",
							"",
							"",
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      ok: {",
							"        type: \"object\",",
							"        properties: {",
							"          data: {",
							"            type: \"object\",",
							"            properties: {",
							"              id: { type: \"string\" },",
							"              group_id: { type: \"string\" },",
							"              inviter_id: { type: \"string\" },",
							"              invitee_id: { type: \"string\" },",
							"              role: { type: \"string\" },",
							"              note: { type: \"string\" },",
							"              active_from: { type: \"integer\" },",
							"              expires_at: { type: \"integer\" },",
							"              created_at: { type: \"integer\" },",
							"              last_modified_at: { type: \"integer\" },",
							"              redeem_code: { type: \"string\" },",
							"              labels: {",
							"                type: \"array\",",
							"                items: { type: \"string\" }",
							"              },",
							"              external_id: { type: \"string\" },",
							"              external_payload: { type: \"string\" },",
							"              group_name: { type: \"string\" },",
							"              group_avatar: { type: \"string\" },",
							"              invitee_name: { type: \"string\" },",
							"              permission_previews: {",
							"                type: \"array\",",
							"                items: { type: \"string\" }",
							"              }",
							"            },",
							"            required: [\"id\", \"group_id\", \"inviter_id\", \"invitee_id\", \"role\", \"active_from\", \"expires_at\", \"created_at\", \"last_modified_at\"]",
							"          }",
							"        },",
							"        required: [\"data\"]",
							"      }",
							"    },",
							"    required: [\"ok\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"group_id\": \"{{group_id}}\",\n  \"role\": \"MEMBER\",\n  \"note\": \"Invitation to join the project group\",\n  \"expires_at\": 1672531200000,\n  \"external_id\": \"ext-invite-001\",\n  \"external_payload\": \"{\\\"department\\\": \\\"engineering\\\", \\\"project\\\": \\\"alpha\\\"}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/groups/invites/create",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"groups",
						"invites",
						"create"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"group_id\": \"GroupID_d1d78954-46fb-463c-bec8-c69eab5605ff\",\n  \"invitee_id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\",\n  \"role\": \"MEMBER\",\n  \"note\": \"Invitation to join the project group\",\n  \"expires_at\": 1672531200000,\n  \"external_id\": \"ext-invite-001\",\n  \"external_payload\": \"{\\\"department\\\": \\\"engineering\\\", \\\"project\\\": \\\"alpha\\\"}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/groups/invites/create",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"groups",
								"invites",
								"create"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "810"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 20:00:09 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"id\": \"GroupInviteID_8ab242c5-9bbf-45a6-9d74-747ae671b9b3\",\n            \"group_id\": \"GroupID_d1d78954-46fb-463c-bec8-c69eab5605ff\",\n            \"inviter_id\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n            \"invitee_id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\",\n            \"role\": \"MEMBER\",\n            \"note\": \"Invitation to join the project group\",\n            \"active_from\": 0,\n            \"expires_at\": 1672531200000,\n            \"created_at\": 1753300809587,\n            \"last_modified_at\": 1753300809587,\n            \"labels\": [],\n            \"external_id\": \"ext-invite-001\",\n            \"external_payload\": \"{\\\"department\\\": \\\"engineering\\\", \\\"project\\\": \\\"alpha\\\"}\",\n            \"group_name\": \"Product & Design\",\n            \"group_avatar\": \"\",\n            \"invitee_name\": \"Unknown User (UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae)\",\n            \"permission_previews\": [\n                \"CREATE\",\n                \"VIEW\",\n                \"EDIT\",\n                \"DELETE\",\n                \"INVITE\"\n            ]\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/groups/invites/redeem",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"// Set env vars",
							"var jsonData = pm.response.json();",
							"if (pm.response.code === 200 && jsonData.ok && jsonData.ok.data.invite) {",
							"    var data = jsonData.ok.data;",
							"    var group_invite = data.invite;",
							"    if (group_invite && group_invite.id) {",
							"        pm.collectionVariables.set(\"group_invite_id\", group_invite.id);",
							"        console.log(\"Successfully set group_invite_id to: \" + group_invite.id);",
							"    }",
							"} else {",
							"    // Log an error if the request was not successful",
							"    console.error(\"Failed to retrieve group_invite.id. Status code: \" + pm.response.code);",
							"    console.error(\"Response body:\", pm.response.text());",
							"}",
							"",
							"",
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      ok: {",
							"        type: \"object\",",
							"        properties: {",
							"          data: {",
							"            type: \"object\",",
							"            properties: {",
							"              invite: {",
							"                type: \"object\",",
							"                properties: {",
							"                  id: { type: \"string\" },",
							"                  group_id: { type: \"string\" },",
							"                  inviter_id: { type: \"string\" },",
							"                  invitee_id: { type: \"string\" },",
							"                  role: { type: \"string\" },",
							"                  note: { type: \"string\" },",
							"                  active_from: { type: \"number\" },",
							"                  expires_at: { type: \"number\" },",
							"                  created_at: { type: \"number\" },",
							"                  last_modified_at: { type: \"number\" },",
							"                  redeem_code: { type: [\"string\", \"null\"] },",
							"                  from_placeholder_invitee: { type: \"string\" },",
							"                  labels: { type: \"array\" },",
							"                  external_id: { type: \"string\" },",
							"                  external_payload: { type: \"string\" }",
							"                },",
							"                required: [\"id\", \"group_id\", \"inviter_id\", \"invitee_id\", \"role\", \"note\", \"active_from\", \"expires_at\", \"created_at\", \"last_modified_at\"]",
							"              }",
							"            },",
							"            required: [\"invite\"]",
							"          }",
							"        },",
							"        required: [\"data\"]",
							"      }",
							"    },",
							"    required: [\"ok\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"invite_id\": \"{{group_invite_id}}\",\n  \"redeem_code\": \"{{redeem_code}}\",\n  \"note\": \"Redeemed by \\\"Anon\\\" on 7/23/2025, 11:07:42 PM\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/groups/invites/redeem",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"groups",
						"invites",
						"redeem"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"invite_id\": \"GroupInviteID_74d530da-d544-4e82-ad01-9d93c90cda7f\",\n  \"user_id\": \"UserID_oik5u-j2dre-qb6km-xljny-hdrew-eft3z-znkyx-curyp-bvcrz-lgz5g-iae\",\n  \"redeem_code\": \"REDEEM_1753301011629\",\n  \"note\": \"Redeemed by \\\"Anon\\\" on 7/23/2025, 11:07:42 PM\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/groups/invites/redeem",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"groups",
								"invites",
								"redeem"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "795"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 20:05:25 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"invite\": {\n        \"id\": \"GroupInviteID_74d530da-d544-4e82-ad01-9d93c90cda7f\",\n        \"group_id\": \"GroupID_d1d78954-46fb-463c-bec8-c69eab5605ff\",\n        \"inviter_id\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n        \"invitee_id\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n        \"role\": \"MEMBER\",\n        \"note\": \"Note from User: Redeemed by \\\"Anon\\\" on 7/23/2025, 11:07:42 PM, Prior Original Note: Invitation to join the project group\",\n        \"active_from\": 1753301011364,\n        \"expires_at\": 1672531200000,\n        \"created_at\": 1753301011629,\n        \"last_modified_at\": 1753301125380,\n        \"redeem_code\": null,\n        \"from_placeholder_invitee\": \"PlaceholderGroupInviteeID_2f385264-b1db-486f-89c8-c15390f4c126\",\n        \"labels\": [],\n        \"external_id\": \"ext-invite-001\",\n        \"external_payload\": \"{\\\"department\\\": \\\"engineering\\\", \\\"project\\\": \\\"alpha\\\"}\"\n    }\n}"
				}
			]
		},
		{
			"name": "/drive/:org_id/groups/invites/get/:invite_id | placeholder",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"// Set env vars",
							"var jsonData = pm.response.json();",
							"if (pm.response.code === 200 && jsonData.ok && jsonData.ok.data.group_id && jsonData.ok.data.invitee_id ) {",
							"    var data = jsonData.ok.data;",
							"    var group_id = data.group_id;",
							"    var invitee_id = data.invitee_id;",
							"    ",
							"    pm.collectionVariables.set(\"group_id\", group_id);",
							"    console.log(\"Successfully set group_id to: \" + group_id);",
							"",
							"    pm.collectionVariables.set(\"user_id\", invitee_id);",
							"    console.log(\"Successfully set user_id to: \" + invitee_id);",
							"    ",
							"} else {",
							"    // Log an error if the request was not successful",
							"    console.error(\"Failed to retrieve invitee_id, group_id. Status code: \" + pm.response.code);",
							"    console.error(\"Response body:\", pm.response.text());",
							"}",
							"",
							"",
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      ok: {",
							"        type: \"object\",",
							"        properties: {",
							"          data: {",
							"            type: \"object\",",
							"            properties: {",
							"              id: { type: \"string\" },",
							"              group_id: { type: \"string\" },",
							"              inviter_id: { type: \"string\" },",
							"              invitee_id: { type: \"string\" },",
							"              role: { type: \"string\" },",
							"              note: { type: \"string\" },",
							"              active_from: { type: \"number\" },",
							"              expires_at: { type: \"number\" },",
							"              created_at: { type: \"number\" },",
							"              last_modified_at: { type: \"number\" },",
							"              redeem_code: { type: [\"string\", \"null\"] },",
							"              from_placeholder_invitee: { type: [\"string\", \"null\"] },",
							"              labels: { type: \"array\" },",
							"              external_id: { type: \"string\" },",
							"              external_payload: { type: \"string\" },",
							"              group_name: { type: \"string\" },",
							"              group_avatar: { type: \"string\" },",
							"              invitee_name: { type: \"string\" },",
							"              invitee_avatar: { type: [\"string\", \"null\"] },",
							"              permission_previews: {",
							"                type: \"array\",",
							"                items: { type: \"string\" }",
							"              }",
							"            },",
							"            required: [\"id\", \"group_id\", \"inviter_id\", \"invitee_id\", \"role\", \"active_from\", \"expires_at\", \"created_at\", \"last_modified_at\", \"labels\", \"external_id\", \"group_name\", \"invitee_name\", \"permission_previews\"]",
							"          }",
							"        },",
							"        required: [\"data\"]",
							"      }",
							"    },",
							"    required: [\"ok\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/groups/invites/get/{{group_invite_id}}",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"groups",
						"invites",
						"get",
						"{{group_invite_id}}"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/groups/invites/get/{{GroupInvite_ID}}",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"groups",
								"invites",
								"get",
								"{{GroupInvite_ID}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "861"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 20:01:11 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"id\": \"GroupInviteID_8ab242c5-9bbf-45a6-9d74-747ae671b9b3\",\n            \"group_id\": \"GroupID_d1d78954-46fb-463c-bec8-c69eab5605ff\",\n            \"inviter_id\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n            \"invitee_id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\",\n            \"role\": \"MEMBER\",\n            \"note\": \"Invitation to join the project group\",\n            \"active_from\": 0,\n            \"expires_at\": 1672531200000,\n            \"created_at\": 1753300809587,\n            \"last_modified_at\": 1753300809587,\n            \"redeem_code\": null,\n            \"from_placeholder_invitee\": null,\n            \"labels\": [],\n            \"external_id\": \"ext-invite-001\",\n            \"external_payload\": \"{\\\"department\\\": \\\"engineering\\\", \\\"project\\\": \\\"alpha\\\"}\",\n            \"group_name\": \"Product & Design\",\n            \"group_avatar\": \"\",\n            \"invitee_name\": \"Unknown User (UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae)\",\n            \"permission_previews\": [\n                \"CREATE\",\n                \"VIEW\",\n                \"EDIT\",\n                \"DELETE\",\n                \"INVITE\"\n            ]\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/groups/validate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"",
							"pm.test(\"Validate the schema of the response object\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.ok.data).to.exist.and.to.be.an('object');",
							"    ",
							"    pm.expect(responseData.ok.data).to.include.keys('is_member', 'group_id', 'user_id');",
							"    pm.expect(responseData.ok.data.is_member).to.be.a('boolean');",
							"    pm.expect(responseData.ok.data.group_id).to.be.a('string');",
							"    pm.expect(responseData.ok.data.user_id).to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"The 'is_member' attribute must be a boolean value\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok.data.is_member).to.be.a('boolean');",
							"});",
							"",
							"",
							"pm.test(\"group_id and user_id must be non-empty strings\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist;",
							"    pm.expect(responseData.ok.data).to.exist;",
							"",
							"    const { group_id, user_id } = responseData.ok.data;",
							"",
							"    pm.expect(group_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"group_id should not be empty\");",
							"    pm.expect(user_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"user_id should not be empty\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"user_id\": \"{{user_id}}\",\n  \"group_id\": \"{{group_id}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/groups/validate",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"groups",
						"validate"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\",\n  \"group_id\": \"GroupID_d1d78954-46fb-463c-bec8-c69eab5605ff\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://officex.otterpad.cc/v1/drive/{{org_id}}/groups/validate",
							"protocol": "https",
							"host": [
								"officex",
								"otterpad",
								"cc"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"groups",
								"validate"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "191"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 19:55:54 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"ok\": {\n                \"data\": {\n                    \"is_member\": true,\n                    \"group_id\": \"GroupID_d1d78954-46fb-463c-bec8-c69eab5605ff\",\n                    \"user_id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\"\n                }\n            }\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/groups/delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has required fields: id and deleted\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist;",
							"    pm.expect(responseData.ok.data).to.exist;",
							"    ",
							"    pm.expect(responseData.ok.data).to.have.all.keys('id', 'deleted');",
							"});",
							"",
							"",
							"pm.test(\"The ID must be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('ok').that.is.an('object');",
							"    pm.expect(responseData.ok).to.have.property('data').that.is.an('object');",
							"    pm.expect(responseData.ok.data).to.have.property('id').that.is.a('string').and.to.have.lengthOf.at.least(1, \"ID should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Deleted field is a boolean type\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok.data.deleted).to.be.a('boolean');",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{group_id}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/groups/delete",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"groups",
						"delete"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"GroupID_eab163dc-265f-4042-9674-5b6731e0f74e\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://officex.otterpad.cc/v1/drive/{{org_id}}/groups/delete",
							"protocol": "https",
							"host": [
								"officex",
								"otterpad",
								"cc"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"groups",
								"delete"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "84"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 19:58:03 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"id\": \"GroupID_eab163dc-265f-4042-9674-5b6731e0f74e\",\n            \"deleted\": true\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/disks/create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Set env vars",
							"var jsonData = pm.response.json();",
							"if (pm.response.code === 200 && jsonData.ok && jsonData.ok.data.id) {",
							"    var data = jsonData.ok.data;",
							"    var disk_id = data.id;",
							"    if (disk_id) {",
							"        pm.collectionVariables.set(\"disk_id\", disk_id);",
							"        console.log(\"Successfully set disk_id to: \" + disk_id);",
							"    }",
							"    var root_folder = data.root_folder;",
							"    if (root_folder) {",
							"        pm.collectionVariables.set(\"root_folder\", root_folder);",
							"        console.log(\"Successfully set root_folder to: \" + root_folder);",
							"    }",
							"    var trash_folder = data.trash_folder;",
							"    if (trash_folder) {",
							"        pm.collectionVariables.set(\"trash_folder\", trash_folder);",
							"        console.log(\"Successfully set trash_folder to: \" + trash_folder);",
							"    }",
							"} else {",
							"    // Log an error if the request was not successful",
							"    console.error(\"Failed to retrieve disk_id. Status code: \" + pm.response.code);",
							"    console.error(\"Response body:\", pm.response.text());",
							"}",
							"",
							"",
							"",
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      ok: {",
							"        type: \"object\",",
							"        properties: {",
							"          data: {",
							"            type: \"object\",",
							"            properties: {",
							"              id: { type: \"string\" },",
							"              name: { type: \"string\" },",
							"              disk_type: { type: \"string\" },",
							"              private_note: { type: \"string\" },",
							"              public_note: { type: \"string\" },",
							"              auth_json: { type: \"string\" },",
							"              labels: {",
							"                type: \"array\",",
							"                items: { type: \"string\" }",
							"              },",
							"              created_at: { type: \"integer\" },",
							"              root_folder: { type: \"string\" },",
							"              trash_folder: { type: \"string\" },",
							"              external_id: { type: \"string\" },",
							"              external_payload: { type: \"string\" },",
							"              autoexpire_ms: { type: \"number\" },",
							"              permission_previews: {",
							"                type: \"array\",",
							"                items: { type: \"string\" }",
							"              }",
							"            },",
							"            required: [\"id\", \"name\", \"disk_type\", \"created_at\"]",
							"          }",
							"        },",
							"        required: [\"data\"]",
							"      }",
							"    },",
							"    required: [\"ok\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Project Cloud Storage\",\n  \"disk_type\": \"AWS_BUCKET\",\n  \"public_note\": \"Storage for group project files\",\n  \"private_note\": \"Contains sensitive project data\",\n  \"auth_json\": \"{\\\"access_key\\\": \\\"redacted\\\", \\\"secret_key\\\": \\\"redacted\\\", \\\"region\\\": \\\"us-east-1\\\", \\\"bucket\\\": \\\"ofx-bucket-friend-696\\\", \\\"endpoint\\\": \\\"redacted\\\"}\",\n  \"external_id\": \"ext-disk-001\",\n  \"external_payload\": \"{\\\"department\\\": \\\"engineering\\\", \\\"cost_center\\\": \\\"cc-12345\\\", \\\"project_id\\\": \\\"p-987654\\\"}\",\n  \"autoexpire_ms\": 10000\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/disks/create",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"disks",
						"create"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Project Cloud Storage\",\n  \"disk_type\": \"AwsBucket\",\n  \"public_note\": \"Storage for group project files\",\n  \"private_note\": \"Contains sensitive project data\",\n  \"auth_json\": \"{\\\"access_key\\\": \\\"{{vault:aws-access-key}}\\\", \\\"secret_key\\\": \\\"redacted\\\", \\\"region\\\": \\\"us-east-1\\\", \\\"bucket\\\": \\\"ofx-bucket-friend-696\\\"}\",\n  \"external_id\": \"ext-disk-001\",\n  \"external_payload\": \"{\\\"department\\\": \\\"engineering\\\", \\\"cost_center\\\": \\\"cc-12345\\\", \\\"project_id\\\": \\\"p-987654\\\"}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/disks/create",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"disks",
								"create"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "747"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 20:07:29 GMT"
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date",
							"domain": "",
							"path": ""
						}
					],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"id\": \"DiskID_a62a3c4f-f02f-4437-a67e-c9f6224c722b\",\n            \"name\": \"Project Cloud Storage\",\n            \"disk_type\": \"AwsBucket\",\n            \"private_note\": \"Contains sensitive project data\",\n            \"public_note\": \"Storage for group project files\",\n            \"auth_json\": \"{\\\"access_key\\\": \\\"{{vault:aws-access-key}}\\\", \\\"secret_key\\\": \\\"redacted\\\", \\\"region\\\": \\\"us-east-1\\\", \\\"bucket\\\": \\\"ofx-bucket-friend-696\\\"}\",\n            \"labels\": [],\n            \"created_at\": 1753301249223,\n            \"root_folder\": \"FolderID_b23fee3d-298f-4d10-9621-9495cbcd746c\",\n            \"trash_folder\": \"FolderID_97761fb8-7a63-4be4-88e5-0a6c97fbc6df\",\n            \"external_id\": \"ext-disk-001\",\n            \"external_payload\": \"{\\\"department\\\": \\\"engineering\\\", \\\"cost_center\\\": \\\"cc-12345\\\", \\\"project_id\\\": \\\"p-987654\\\"}\",\n            \"permission_previews\": [\n                \"CREATE\",\n                \"EDIT\",\n                \"DELETE\",\n                \"VIEW\",\n                \"INVITE\"\n            ]\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/disks/list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response contains required fields: items, page_size, total, and direction\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist;",
							"    pm.expect(responseData.ok.data).to.exist;",
							"    ",
							"    pm.expect(responseData.ok.data).to.include.keys('items', 'page_size', 'total', 'direction');",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Response structure is valid\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist;",
							"    pm.expect(responseData.ok.data).to.exist;",
							"    pm.expect(responseData.ok.data.items).to.be.an('array');",
							"",
							"    responseData.ok.data.items.forEach(item => {",
							"        pm.expect(item).to.be.an('object');",
							"        pm.expect(item.id).to.exist.and.to.be.a('string');",
							"        pm.expect(item.name).to.exist.and.to.be.a('string');",
							"        pm.expect(item.disk_type).to.exist.and.to.be.a('string');",
							"        pm.expect(item.created_at).to.exist.and.to.be.a('number');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"The permission_previews is an array and contains only strings\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.ok.data.items).to.be.an('array');",
							"    responseData.ok.data.items.forEach(item => {",
							"        pm.expect(item.permission_previews).to.be.an('array');",
							"        item.permission_previews.forEach(preview => {",
							"            pm.expect(preview).to.be.a('string');",
							"        });",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"filters\": \"\",\n  \"page_size\": 50,\n  \"direction\": \"ASC\",\n  \"cursor_up\": \"string\",\n  \"cursor_down\": \"string\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/disks/list",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"disks",
						"list"
					]
				}
			},
			"response": [
				{
					"name": "response sample",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"filters\": \"\",\n  \"page_size\": 50,\n  \"direction\": \"ASC\",\n  \"cursor_up\": \"string\",\n  \"cursor_down\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/disks/list",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"disks",
								"list"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "3027"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 20:06:30 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"items\": [\n                {\n                    \"id\": \"DiskID_0186f372-c039-4c88-bf53-e1084a83677d\",\n                    \"name\": \"Amazon\",\n                    \"disk_type\": \"AWS_BUCKET\",\n                    \"private_note\": null,\n                    \"public_note\": null,\n                    \"auth_json\": \"{\\n  \\\"endpoint\\\": \\\"https://s3.amazonaws.com/\\\",\\n  \\\"access_key\\\": \\\"{{vault:aws-access-key}}\\\",\\n  \\\"secret_key\\\": \\\"z1ShvR7fmSSU0sa4nZD8bSADAQgtaBjOIWExrrQE\\\",\\n  \\\"bucket\\\": \\\"ofx-bucket-friend-288\\\",\\n  \\\"region\\\": \\\"us-east-1\\\"\\n}\",\n                    \"created_at\": 1753287850576,\n                    \"root_folder\": \"FolderID_f9765f26-96b1-4359-aa40-73b84985d0ba\",\n                    \"trash_folder\": \"FolderID_fbb12f3c-7e46-461d-961c-24bfbdc8915f\",\n                    \"external_id\": null,\n                    \"external_payload\": null,\n                    \"endpoint\": null,\n                    \"labels\": [],\n                    \"permission_previews\": [\n                        \"CREATE\",\n                        \"EDIT\",\n                        \"DELETE\",\n                        \"VIEW\",\n                        \"INVITE\"\n                    ]\n                },\n                {\n                    \"id\": \"DiskID_85c347a1-ef33-442d-8200-5c729faf5da4\",\n                    \"name\": \"Updated Storage Name\",\n                    \"disk_type\": \"AwsBucket\",\n                    \"private_note\": \"Contains confidential project data\",\n                    \"public_note\": \"Primary storage for project Alpha\",\n                    \"auth_json\": \"{\\\"access_key\\\": \\\"{{vault:aws-access-key}}\\\", \\\"region\\\": \\\"us-east-1\\\", \\\"bucket\\\": \\\"project-alpha-files\\\"}\",\n                    \"created_at\": 1753288161344,\n                    \"root_folder\": \"FolderID_623468e1-b276-42c3-927a-1598faf1bb13\",\n                    \"trash_folder\": \"FolderID_feecaf6b-2f85-4d7f-8270-be293bad2e50\",\n                    \"external_id\": \"ext-disk-001-updated\",\n                    \"external_payload\": \"{\\\"department\\\": \\\"engineering\\\", \\\"cost_center\\\": \\\"cc-67890\\\", \\\"project_id\\\": \\\"p-123456\\\", \\\"updated\\\": true}\",\n                    \"endpoint\": null,\n                    \"labels\": [],\n                    \"permission_previews\": [\n                        \"CREATE\",\n                        \"EDIT\",\n                        \"DELETE\",\n                        \"VIEW\",\n                        \"INVITE\"\n                    ]\n                },\n                {\n                    \"id\": \"DiskID_c3b7c25c-ddc9-4234-9840-31f6aacef8a0\",\n                    \"name\": \"Project Cloud Storage\",\n                    \"disk_type\": \"AwsBucket\",\n                    \"private_note\": \"Contains sensitive project data\",\n                    \"public_note\": \"Storage for group project files\",\n                    \"auth_json\": \"{\\\"access_key\\\": \\\"{{vault:aws-access-key}}\\\", \\\"secret_key\\\": \\\"z1ShvR7fmSSU0sa4nZD8bSADAQgtaBjOIWExrrQE\\\", \\\"region\\\": \\\"us-east-1\\\", \\\"bucket\\\": \\\"ofx-bucket-friend-288\\\"}\",\n                    \"created_at\": 1753288361336,\n                    \"root_folder\": \"FolderID_ce172a12-4f49-47ab-bbb8-53537f39967c\",\n                    \"trash_folder\": \"FolderID_1d2f6747-2eb0-4bb4-8a4e-5c00b4e1b0ca\",\n                    \"external_id\": \"ext-disk-001\",\n                    \"external_payload\": \"{\\\"department\\\": \\\"engineering\\\", \\\"cost_center\\\": \\\"cc-12345\\\", \\\"project_id\\\": \\\"p-987654\\\"}\",\n                    \"endpoint\": null,\n                    \"labels\": [],\n                    \"permission_previews\": [\n                        \"CREATE\",\n                        \"EDIT\",\n                        \"DELETE\",\n                        \"VIEW\",\n                        \"INVITE\"\n                    ]\n                },\n                {\n                    \"id\": \"DiskID_fd321a1f-5d69-4454-8453-bc7ea91393d9\",\n                    \"name\": \"Project Cloud Storage\",\n                    \"disk_type\": \"AwsBucket\",\n                    \"private_note\": \"Contains sensitive project data\",\n                    \"public_note\": \"Storage for group project files\",\n                    \"auth_json\": \"{\\\"access_key\\\": \\\"{{vault:aws-access-key}}\\\", \\\"secret_key\\\": \\\"redacted\\\", \\\"region\\\": \\\"us-east-1\\\", \\\"bucket\\\": \\\"ofx-bucket-friend-696\\\"}\",\n                    \"created_at\": 1753288408943,\n                    \"root_folder\": \"FolderID_4a45e3fb-1cdf-499d-b73b-b10aac74e70c\",\n                    \"trash_folder\": \"FolderID_a1349311-d4e0-4488-bd30-51b95e0af4ea\",\n                    \"external_id\": \"ext-disk-001\",\n                    \"external_payload\": \"{\\\"department\\\": \\\"engineering\\\", \\\"cost_center\\\": \\\"cc-12345\\\", \\\"project_id\\\": \\\"p-987654\\\"}\",\n                    \"endpoint\": null,\n                    \"labels\": [],\n                    \"permission_previews\": [\n                        \"CREATE\",\n                        \"EDIT\",\n                        \"DELETE\",\n                        \"VIEW\",\n                        \"INVITE\"\n                    ]\n                }\n            ],\n            \"page_size\": 4,\n            \"total\": 4,\n            \"direction\": \"ASC\",\n            \"cursor\": null\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/disks/update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response contains required fields in the data object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist;",
							"    pm.expect(responseData.ok.data).to.exist;",
							"",
							"    const data = responseData.ok.data;",
							"    pm.expect(data).to.have.all.keys('id', 'name', 'disk_type', 'private_note', 'public_note', 'auth_json', 'created_at', 'root_folder', 'trash_folder', 'external_id', 'external_payload', 'billing_url', 'permission_previews', 'labels', 'autoexpire_ms');",
							"});",
							"",
							"",
							"pm.test(\"Created_at is a valid timestamp\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.be.an('object');",
							"    pm.expect(responseData.ok.data).to.be.an('object');",
							"    pm.expect(responseData.ok.data.created_at).to.be.a('number').and.to.be.above(0, \"Timestamp should be greater than zero\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Permission_previews is an array containing only strings\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.ok.data).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.ok.data.permission_previews).to.be.an('array');",
							"",
							"    responseData.ok.data.permission_previews.forEach(function(item) {",
							"        pm.expect(item).to.be.a('string');",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{disk_id}}\",\n  \"name\": \"Updated Storage Name\",\n  \"public_note\": \"Primary storage for project Alpha\",\n  \"private_note\": \"Contains confidential project data\",\n  \"auth_json\": \"{\\\"endpoint\\\": \\\"redacted\\\",\\\"access_key\\\": \\\"redacted\\\",\\\"secret_key\\\": \\\"redacted\\\", \\\"region\\\": \\\"us-east-1\\\", \\\"bucket\\\": \\\"project-alpha-files\\\"}\",\n  \"external_id\": \"ext-disk-001-updated\",\n  \"external_payload\": \"{\\\"department\\\": \\\"engineering\\\", \\\"cost_center\\\": \\\"cc-67890\\\", \\\"project_id\\\": \\\"p-123456\\\", \\\"updated\\\": true}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/disks/update",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"disks",
						"update"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"DiskID_a62a3c4f-f02f-4437-a67e-c9f6224c722b\",\n  \"name\": \"Updated Storage Name\",\n  \"public_note\": \"Primary storage for project Alpha\",\n  \"private_note\": \"Contains confidential project data\",\n  \"auth_json\": \"{\\\"access_key\\\": \\\"{{vault:aws-access-key}}\\\", \\\"region\\\": \\\"us-east-1\\\", \\\"bucket\\\": \\\"project-alpha-files\\\"}\",\n  \"external_id\": \"ext-disk-001-updated\",\n  \"external_payload\": \"{\\\"department\\\": \\\"engineering\\\", \\\"cost_center\\\": \\\"cc-67890\\\", \\\"project_id\\\": \\\"p-123456\\\", \\\"updated\\\": true}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/disks/update",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"disks",
								"update"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "762"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 20:08:22 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"id\": \"DiskID_a62a3c4f-f02f-4437-a67e-c9f6224c722b\",\n            \"name\": \"Updated Storage Name\",\n            \"disk_type\": \"AwsBucket\",\n            \"private_note\": \"Contains confidential project data\",\n            \"public_note\": \"Primary storage for project Alpha\",\n            \"auth_json\": \"{\\\"access_key\\\": \\\"{{vault:aws-access-key}}\\\", \\\"region\\\": \\\"us-east-1\\\", \\\"bucket\\\": \\\"project-alpha-files\\\"}\",\n            \"created_at\": 1753301249223,\n            \"root_folder\": \"FolderID_b23fee3d-298f-4d10-9621-9495cbcd746c\",\n            \"trash_folder\": \"FolderID_97761fb8-7a63-4be4-88e5-0a6c97fbc6df\",\n            \"external_id\": \"ext-disk-001-updated\",\n            \"external_payload\": \"{\\\"department\\\": \\\"engineering\\\", \\\"cost_center\\\": \\\"cc-67890\\\", \\\"project_id\\\": \\\"p-123456\\\", \\\"updated\\\": true}\",\n            \"endpoint\": null,\n            \"permission_previews\": [\n                \"CREATE\",\n                \"EDIT\",\n                \"DELETE\",\n                \"VIEW\",\n                \"INVITE\"\n            ],\n            \"labels\": []\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "/drive/:org_id/disks/get/:disk_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has required fields\", function () {",
							"    const responseData = pm.response.json().ok.data;",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.all.keys(",
							"        'id',",
							"        'name',",
							"        'disk_type',",
							"        'private_note',",
							"        'public_note',",
							"        'auth_json',",
							"        'created_at',",
							"        'root_folder',",
							"        'trash_folder',",
							"        'external_id',",
							"        'external_payload',",
							"        'billing_url',",
							"        'permission_previews',",
							"        'labels',",
							"        'autoexpire_ms'",
							"    );",
							"});",
							"",
							"",
							"pm.test(\"Created_at is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist;",
							"    pm.expect(responseData.ok.data).to.exist;",
							"    pm.expect(responseData.ok.data.created_at).to.be.a('number').and.to.be.at.least(0, \"Created_at should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Permission_previews should be an array of non-empty strings\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('ok').that.is.an('object');",
							"    pm.expect(responseData.ok).to.have.property('data').that.is.an('object');",
							"    pm.expect(responseData.ok.data).to.have.property('permission_previews').that.is.an('array');",
							"    ",
							"    responseData.ok.data.permission_previews.forEach(function(preview) {",
							"        pm.expect(preview).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Each element should be a non-empty string\");",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/disks/get/{{disk_id}}",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"disks",
						"get",
						"{{disk_id}}"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://officex.otterpad.cc/v1/drive/{{org_id}}/disks/get/DiskID_0186f372-c039-4c88-bf53-e1084a83677d",
							"protocol": "https",
							"host": [
								"officex",
								"otterpad",
								"cc"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"disks",
								"get",
								"DiskID_0186f372-c039-4c88-bf53-e1084a83677d"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "684"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 20:07:07 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"id\": \"DiskID_0186f372-c039-4c88-bf53-e1084a83677d\",\n            \"name\": \"Amazon\",\n            \"disk_type\": \"AWS_BUCKET\",\n            \"private_note\": null,\n            \"public_note\": null,\n            \"auth_json\": \"{\\n  \\\"endpoint\\\": \\\"https://s3.amazonaws.com/\\\",\\n  \\\"access_key\\\": \\\"{{vault:aws-access-key}}\\\",\\n  \\\"secret_key\\\": \\\"z1ShvR7fmSSU0sa4nZD8bSADAQgtaBjOIWExrrQE\\\",\\n  \\\"bucket\\\": \\\"ofx-bucket-friend-288\\\",\\n  \\\"region\\\": \\\"us-east-1\\\"\\n}\",\n            \"created_at\": 1753287850576,\n            \"root_folder\": \"FolderID_f9765f26-96b1-4359-aa40-73b84985d0ba\",\n            \"trash_folder\": \"FolderID_fbb12f3c-7e46-461d-961c-24bfbdc8915f\",\n            \"external_id\": null,\n            \"external_payload\": null,\n            \"endpoint\": null,\n            \"permission_previews\": [\n                \"CREATE\",\n                \"EDIT\",\n                \"DELETE\",\n                \"VIEW\",\n                \"INVITE\"\n            ],\n            \"labels\": []\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/disks/delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.ok.data).to.exist.and.to.be.an('object');",
							"    ",
							"    pm.expect(responseData.ok.data).to.have.property('id').that.is.a('string');",
							"    pm.expect(responseData.ok.data).to.have.property('deleted').that.is.a('boolean');",
							"});",
							"",
							"",
							"pm.test(\"Deleted field must be a boolean\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok.data).to.have.property('deleted').that.is.a('boolean');",
							"});",
							"",
							"",
							"pm.test(\"The id must be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist;",
							"    pm.expect(responseData.ok.data).to.exist;",
							"    pm.expect(responseData.ok.data.id).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "//Currently Working in Web3's Server\n{\n  \"id\": \"{{disk_id}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/disks/delete",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"disks",
						"delete"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/contacts/create | FRIEND",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Set env vars",
							"var jsonData = pm.response.json();",
							"if (pm.response.code === 200 && jsonData.ok && jsonData.ok.data.id) {",
							"    var data = jsonData.ok.data;",
							"    var contact_user_id = data.id;",
							"    if (contact_user_id) {",
							"        pm.collectionVariables.set(\"foreign_friend_user_id\", contact_user_id);",
							"        console.log(\"Successfully set foreign_friend_user_id to: \" + contact_user_id);",
							"    }",
							"} else {",
							"    // Log an error if the request was not successful",
							"    console.error(\"Failed to retrieve auth_token. Status code: \" + pm.response.code);",
							"    console.error(\"Response body:\", pm.response.text());",
							"}",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Foreign Friend\",\n  \"icp_principal\": \"shkgn-wm5v5-rcgvj-26lre-tmgnj-6uq4q-znwvg-smqz3-kfefq-7xin2-gae\",\n  \"public_note\": \"\",\n  \"id\": \"UserID_shkgn-wm5v5-rcgvj-26lre-tmgnj-6uq4q-znwvg-smqz3-kfefq-7xin2-gae\"\n  //\"private_note\": \"Primary contact for urgent issues\",\n  //\"external_id\": \"emp-1234\",\n  //\"external_payload\": \"{\\\"department\\\": \\\"product\\\", \\\"title\\\": \\\"Senior Project Manager\\\", \\\"location\\\": \\\"Remote\\\"}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/create",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"contacts",
						"create"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Doe\",\n  \"icp_principal\": \"veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n  \"public_note\": \"\",\n  \"is_placeholder\": true,\n  \"id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\"\n  //\"private_note\": \"Primary contact for urgent issues\",\n  //\"external_id\": \"emp-1234\",\n  //\"external_payload\": \"{\\\"department\\\": \\\"product\\\", \\\"title\\\": \\\"Senior Project Manager\\\", \\\"location\\\": \\\"Remote\\\"}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/create",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"contacts",
								"create"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "815"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 19:46:13 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"name\": \"John Doe\",\n            \"avatar\": \"\",\n            \"email\": \"\",\n            \"notifications_url\": \"\",\n            \"public_note\": \"\",\n            \"private_note\": \"\",\n            \"evm_public_address\": \"\",\n            \"icp_principal\": \"veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"seed_phrase\": \"\",\n            \"labels\": [],\n            \"from_placeholder_user_id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"redeem_code\": \"RedeemTokenID_773013f7-9d2f-4daf-8873-daa09cb6cf23\",\n            \"created_at\": 1753299973103,\n            \"last_online_ms\": 0,\n            \"permission_previews\": [\n                \"CREATE\",\n                \"VIEW\",\n                \"EDIT\",\n                \"DELETE\",\n                \"INVITE\"\n            ],\n            \"group_previews\": [\n                {\n                    \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                    \"invite_id\": \"GroupInviteID_930a7fa9-0d9a-4f65-bb10-03db6a572ee6\",\n                    \"is_admin\": false,\n                    \"group_name\": \"Group for All\",\n                    \"group_avatar\": \"\"\n                }\n            ]\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/api-keys/create | FRIEND",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Set env vars",
							"var jsonData = pm.response.json();",
							"if (pm.response.code === 200 && jsonData.ok && jsonData.ok.data.value) {",
							"    var data = jsonData.ok.data;",
							"    var api_key_value = data.value;",
							"    if (api_key_value) {",
							"        pm.collectionVariables.set(\"foreign_friend_api_key\", api_key_value);",
							"        console.log(\"Successfully set foreign_friend_api_key to: \" + api_key_value);",
							"    }",
							"} else {",
							"    // Log an error if the request was not successful",
							"    console.error(\"Failed to retrieve auth_token. Status code: \" + pm.response.code);",
							"    console.error(\"Response body:\", pm.response.text());",
							"}",
							"",
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      ok: {",
							"        type: \"object\",",
							"        properties: {",
							"          data: {",
							"            type: \"object\",",
							"            properties: {",
							"              id: { type: \"string\" },",
							"              value: { type: \"string\" },",
							"              user_id: { type: \"string\" },",
							"              name: { type: \"string\" },",
							"              created_at: { type: \"integer\" },",
							"              is_revoked: { type: \"boolean\" },",
							"              begins_at: { type: \"integer\" },",
							"              expires_at: { type: \"integer\" },",
							"              labels: {",
							"                type: \"array\",",
							"                items: { type: \"string\" }",
							"              }",
							"            },",
							"            required: [\"id\", \"value\", \"user_id\", \"name\", \"created_at\", \"is_revoked\", \"begins_at\", \"expires_at\", \"labels\"]",
							"          }",
							"        },",
							"        required: [\"data\"]",
							"      }",
							"    },",
							"    required: [\"ok\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    // id?: ApiKeyID;\n    /** Name for the API key */\n    \"name\": \"Player 2 ApiKey\",\n    /** ID of the user to create the API key for */\n    \"user_id\": \"{{foreign_friend_user_id}}\"\n    // begins_at?: number;\n    // /** Timestamp when the key expires, -1 for never expires */\n    // expires_at?: number;\n    // /** External identifier */\n    // external_id?: string;\n    // /** Additional data for external systems */\n    // external_payload?: string;\n    // private_note?: string;\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/api_keys/create",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"api_keys",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/contacts/helpers/generate-auto-login-link",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.ok.data).to.exist.and.to.be.an('object');",
							"    ",
							"    const requiredFields = ['user_id', 'auto_login_url', 'full_login_instructions'];",
							"    requiredFields.forEach(field => {",
							"        pm.expect(responseData.ok.data).to.have.property(field);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"User ID must be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok.data.user_id).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"User ID should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"The auto_login_url must be a valid URL format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist;",
							"    pm.expect(responseData.ok.data).to.exist;",
							"    pm.expect(responseData.ok.data.auto_login_url).to.exist;",
							"    pm.expect(responseData.ok.data.auto_login_url).to.match(/^https?:\\/\\/[^\\s/$.?#].[^\\s]*$/, \"auto_login_url is not a valid URL format\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": " {\n    \"user_id\": \"{{foreign_friend_user_id}}\",\n    \"profile_api_key\": \"{{foreign_friend_api_key}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/helpers/generate-auto-login-link",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"contacts",
						"helpers",
						"generate-auto-login-link"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/contacts/create | PERMIT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 403\", function () {",
							"    pm.expect(pm.response.code).to.equal(403);",
							"});",
							"",
							"",
							"pm.test(\"Response contains an error object with code and message fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.err).to.exist;",
							"    pm.expect(responseData.err).to.have.all.keys('code', 'message');",
							"    pm.expect(responseData.err.code).to.be.a('number');",
							"    pm.expect(responseData.err.message).to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Error code is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('err');",
							"    pm.expect(responseData.err.code).to.be.a('number').and.to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Error message should be a string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.err).to.exist;",
							"    pm.expect(responseData.err.message).to.be.a('string');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{foreign_friend_api_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Friend of Friend\",\n  \"icp_principal\": \"xru27-kwbey-mw2ne-ba67p-rsgj6-xt76d-6by4b-kbw4p-h3e57-wxx5h-tqe\",\n  \"public_note\": \"\",\n  \"id\": \"UserID_xru27-kwbey-mw2ne-ba67p-rsgj6-xt76d-6by4b-kbw4p-h3e57-wxx5h-tqe\"\n  //\"private_note\": \"Primary contact for urgent issues\",\n  //\"external_id\": \"emp-1234\",\n  //\"external_payload\": \"{\\\"department\\\": \\\"product\\\", \\\"title\\\": \\\"Senior Project Manager\\\", \\\"location\\\": \\\"Remote\\\"}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/create",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"contacts",
						"create"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Doe\",\n  \"icp_principal\": \"veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n  \"public_note\": \"\",\n  \"is_placeholder\": true,\n  \"id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\"\n  //\"private_note\": \"Primary contact for urgent issues\",\n  //\"external_id\": \"emp-1234\",\n  //\"external_payload\": \"{\\\"department\\\": \\\"product\\\", \\\"title\\\": \\\"Senior Project Manager\\\", \\\"location\\\": \\\"Remote\\\"}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/create",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"contacts",
								"create"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "815"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 19:46:13 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"name\": \"John Doe\",\n            \"avatar\": \"\",\n            \"email\": \"\",\n            \"notifications_url\": \"\",\n            \"public_note\": \"\",\n            \"private_note\": \"\",\n            \"evm_public_address\": \"\",\n            \"icp_principal\": \"veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"seed_phrase\": \"\",\n            \"labels\": [],\n            \"from_placeholder_user_id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"redeem_code\": \"RedeemTokenID_773013f7-9d2f-4daf-8873-daa09cb6cf23\",\n            \"created_at\": 1753299973103,\n            \"last_online_ms\": 0,\n            \"permission_previews\": [\n                \"CREATE\",\n                \"VIEW\",\n                \"EDIT\",\n                \"DELETE\",\n                \"INVITE\"\n            ],\n            \"group_previews\": [\n                {\n                    \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                    \"invite_id\": \"GroupInviteID_930a7fa9-0d9a-4f65-bb10-03db6a572ee6\",\n                    \"is_admin\": false,\n                    \"group_name\": \"Group for All\",\n                    \"group_avatar\": \"\"\n                }\n            ]\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/permissions/system/create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Set env vars",
							"var jsonData = pm.response.json();",
							"if (pm.response.code === 200 && jsonData.ok && jsonData.ok.data && jsonData.ok.data.permission) {",
							"",
							"    var data = jsonData.ok.data;",
							"    var permission = data.permission;",
							"    if (permission.id) {",
							"        pm.collectionVariables.set(\"system_permission_id\", permission.id);",
							"        console.log(\"Successfully set permission_id to: \" + permission.id);",
							"    }",
							"} else {",
							"    // Log an error if the request was not successful",
							"    console.error(\"Failed to set permission_id. Status code: \" + pm.response.code);",
							"    console.error(\"Response body:\", pm.response.text());",
							"}",
							"",
							"",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response contains required fields in the permission object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist;",
							"    pm.expect(responseData.ok.data).to.exist;",
							"    pm.expect(responseData.ok.data.permission).to.exist;",
							"",
							"    const permission = responseData.ok.data.permission;",
							"",
							"    pm.expect(permission).to.have.all.keys('id', 'resource_id', 'granted_to', 'granted_by', 'permission_types', 'begin_date_ms', 'expiry_date_ms', 'note', 'created_at', 'last_modified_at', 'from_placeholder_grantee', 'labels', 'redeem_code', 'resource_name', 'grantee_name', 'grantee_avatar', 'granter_name', 'permission_previews');",
							"});",
							"",
							"",
							"",
							"pm.test(\"The permission_types array must not be empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist;",
							"    pm.expect(responseData.ok.data).to.exist;",
							"    pm.expect(responseData.ok.data.permission).to.exist;",
							"    pm.expect(responseData.ok.data.permission.permission_types).to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"created_at and last_modified_at are non-negative integers\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist;",
							"    pm.expect(responseData.ok.data).to.exist;",
							"    pm.expect(responseData.ok.data.permission).to.exist;",
							"",
							"    const permission = responseData.ok.data.permission;",
							"    pm.expect(permission.created_at).to.be.a('number').and.to.be.at.least(0);",
							"    pm.expect(permission.last_modified_at).to.be.a('number').and.to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"resource_id\": \"TABLE_CONTACTS\",\n  \"granted_to\": \"{{foreign_friend_user_id}}\",\n  \"permission_types\": [\n    \"CREATE\",\n    \"VIEW\"\n  ],\n  \"begin_date_ms\": 1753290541568,\n  \"expiry_date_ms\": -1,\n  \"note\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/system/create",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"permissions",
						"system",
						"create"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"resource_id\": \"TABLE_CONTACTS\",\n  \"granted_to\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\",\n  \"permission_types\": [\n    \"CREATE\",\n    \"VIEW\"\n  ],\n  \"begin_date_ms\": 1753290541568,\n  \"expiry_date_ms\": -1,\n  \"note\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/system/create",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"permissions",
								"system",
								"create"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "733"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 20:17:17 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"permission\": {\n                \"id\": \"SystemPermissionID_187b04a2-68d8-4c39-a119-1ce786062960\",\n                \"resource_id\": \"TABLE_CONTACTS\",\n                \"granted_to\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\",\n                \"granted_by\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n                \"permission_types\": [\n                    \"CREATE\",\n                    \"VIEW\"\n                ],\n                \"begin_date_ms\": 1753290541568,\n                \"expiry_date_ms\": -1,\n                \"note\": \"\",\n                \"created_at\": 1753301837810,\n                \"last_modified_at\": 1753301837810,\n                \"from_placeholder_grantee\": null,\n                \"labels\": [],\n                \"redeem_code\": null,\n                \"resource_name\": \"TABLE_CONTACTS\",\n                \"grantee_name\": \"User: UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\",\n                \"granter_name\": \"Owner\",\n                \"permission_previews\": [\n                    \"CREATE\",\n                    \"VIEW\",\n                    \"EDIT\",\n                    \"DELETE\",\n                    \"INVITE\"\n                ]\n            }\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/permissions/system/list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      ok: {",
							"        type: \"object\",",
							"        properties: {",
							"          data: {",
							"            type: \"object\",",
							"            properties: {",
							"              items: {",
							"                type: \"array\",",
							"                items: {",
							"                  type: \"object\",",
							"                  properties: {",
							"                    id: { type: \"string\" },",
							"                    resource_id: { type: \"string\" },",
							"                    granted_to: { type: \"string\" },",
							"                    granted_by: { type: \"string\" },",
							"                    permission_types: { type: \"array\", items: { type: \"string\" }},",
							"                    begin_date_ms: { type: \"number\" },",
							"                    expiry_date_ms: { type: \"number\" },",
							"                    note: { type: \"string\" },",
							"                    created_at: { type: \"number\" },",
							"                    last_modified_at: { type: \"number\" },",
							"                    from_placeholder_grantee: { type: [\"null\", \"string\"] },",
							"                    labels: { type: \"array\", items: { type: \"string\" }},",
							"                    redeem_code: { type: [\"string\", \"null\"] },",
							"                    resource_name: { type: \"string\" },",
							"                    grantee_name: { type: \"string\" },",
							"                    grantee_avatar: { type: [\"null\", \"string\"] },",
							"                    granter_name: { type: \"string\" },",
							"                    permission_previews: { type: \"array\", items: { type: \"string\" }}",
							"                  },",
							"                  required: [\"id\", \"resource_id\", \"granted_to\", \"granted_by\", \"permission_types\", \"begin_date_ms\", \"expiry_date_ms\", \"created_at\", \"last_modified_at\"]",
							"                }",
							"              },",
							"              page_size: { type: \"number\" },",
							"              total: { type: \"number\" },",
							"              cursor: { type: [\"null\", \"string\"] }",
							"            },",
							"            required: [\"items\", \"page_size\", \"total\"]",
							"          }",
							"        },",
							"        required: [\"data\"]",
							"      }",
							"    },",
							"    required: [\"ok\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"filters\": {\n    \"resource_ids\": [],\n    \"grantee_ids\": [],\n    \"labels\": []\n  },\n  \"page_size\": 50,\n  \"direction\": \"ASC\",\n  \"cursor_up\": \"string\",\n  \"cursor_down\": \"string\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/system/list",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"permissions",
						"system",
						"list"
					]
				}
			},
			"response": [
				{
					"name": "drive/:org_id/drives/list",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"filters\": \"\",\n  \"page_size\": 50,\n  \"direction\": \"ASC\",\n  \"cursor_up\": \"string\",\n  \"cursor_down\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/drives/list",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"drives",
								"list"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "512"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 20:10:28 GMT"
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date",
							"domain": "",
							"path": ""
						}
					],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"items\": [\n                {\n                    \"id\": \"DriveID_axyvc-hnmtt-e7ey4-zdctl-rw2tk-lbpu6-2b2af-yuxtp-cpqai-wnjcz-nae\",\n                    \"name\": \"ok\",\n                    \"icp_principal\": \"axyvc-hnmtt-e7ey4-zdctl-rw2tk-lbpu6-2b2af-yuxtp-cpqai-wnjcz-nae\",\n                    \"public_note\": null,\n                    \"private_note\": null,\n                    \"endpoint_url\": \"https://officex.otterpad.cc\",\n                    \"last_indexed_ms\": null,\n                    \"created_at\": 1753276590260,\n                    \"external_id\": null,\n                    \"external_payload\": null,\n                    \"labels\": [],\n                    \"permission_previews\": [\n                        \"CREATE\",\n                        \"VIEW\",\n                        \"EDIT\",\n                        \"DELETE\",\n                        \"INVITE\"\n                    ]\n                }\n            ],\n            \"page_size\": 1,\n            \"total\": 1,\n            \"direction\": \"ASC\",\n            \"cursor\": null\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/permissions/system/check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response contains required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist;",
							"    pm.expect(responseData.ok.data).to.exist;",
							"",
							"    const data = responseData.ok.data;",
							"    pm.expect(data).to.have.all.keys('resource_id', 'grantee_id', 'permissions');",
							"});",
							"",
							"",
							"pm.test(\"Resource_id is in the expected format and is not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist;",
							"    pm.expect(responseData.ok.data).to.exist;",
							"    const resource_id = responseData.ok.data.resource_id;",
							"    pm.expect(resource_id).to.be.a('string').and.not.to.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Permissions is an array and contains at least one valid permission string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist;",
							"    pm.expect(responseData.ok.data).to.exist;",
							"    pm.expect(responseData.ok.data.permissions).to.be.an('array').that.is.not.empty;",
							"    responseData.ok.data.permissions.forEach(permission => {",
							"        pm.expect(permission).to.be.a('string').that.is.not.empty;",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"resource_id\": \"TABLE_CONTACTS\",\n  \"grantee_id\": \"{{foreign_friend_user_id}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/system/check",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"permissions",
						"system",
						"check"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"resource_id\": {\n    \"type\": \"Table\",\n    \"value\": \"CONTACTS\"\n  },\n  \"grantee_id\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/system/check",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"permissions",
								"system",
								"check"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "210"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 20:19:19 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"resource_id\": {\n                \"type\": \"Table\",\n                \"value\": \"CONTACTS\"\n            },\n            \"grantee_id\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n            \"permissions\": [\n                \"CREATE\",\n                \"EDIT\",\n                \"DELETE\",\n                \"VIEW\",\n                \"INVITE\"\n            ]\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/contacts/create | PERMIT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Set env vars",
							"var jsonData = pm.response.json();",
							"if (pm.response.code === 200 && jsonData.ok && jsonData.ok.data.id) {",
							"    var data = jsonData.ok.data;",
							"    var contact_user_id = data.id;",
							"    if (contact_user_id) {",
							"        pm.collectionVariables.set(\"user_id\", contact_user_id);",
							"        console.log(\"Successfully set user_id to: \" + contact_user_id);",
							"    }",
							"} else {",
							"    // Log an error if the request was not successful",
							"    console.error(\"Failed to retrieve auth_token. Status code: \" + pm.response.code);",
							"    console.error(\"Response body:\", pm.response.text());",
							"}",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{foreign_friend_api_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Friend of Friend\",\n  \"icp_principal\": \"xru27-kwbey-mw2ne-ba67p-rsgj6-xt76d-6by4b-kbw4p-h3e57-wxx5h-tqe\",\n  \"public_note\": \"\",\n  \"id\": \"UserID_xru27-kwbey-mw2ne-ba67p-rsgj6-xt76d-6by4b-kbw4p-h3e57-wxx5h-tqe\"\n  //\"private_note\": \"Primary contact for urgent issues\",\n  //\"external_id\": \"emp-1234\",\n  //\"external_payload\": \"{\\\"department\\\": \\\"product\\\", \\\"title\\\": \\\"Senior Project Manager\\\", \\\"location\\\": \\\"Remote\\\"}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/create",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"contacts",
						"create"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Doe\",\n  \"icp_principal\": \"veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n  \"public_note\": \"\",\n  \"is_placeholder\": true,\n  \"id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\"\n  //\"private_note\": \"Primary contact for urgent issues\",\n  //\"external_id\": \"emp-1234\",\n  //\"external_payload\": \"{\\\"department\\\": \\\"product\\\", \\\"title\\\": \\\"Senior Project Manager\\\", \\\"location\\\": \\\"Remote\\\"}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/create",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"contacts",
								"create"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "815"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 19:46:13 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"name\": \"John Doe\",\n            \"avatar\": \"\",\n            \"email\": \"\",\n            \"notifications_url\": \"\",\n            \"public_note\": \"\",\n            \"private_note\": \"\",\n            \"evm_public_address\": \"\",\n            \"icp_principal\": \"veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"seed_phrase\": \"\",\n            \"labels\": [],\n            \"from_placeholder_user_id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"redeem_code\": \"RedeemTokenID_773013f7-9d2f-4daf-8873-daa09cb6cf23\",\n            \"created_at\": 1753299973103,\n            \"last_online_ms\": 0,\n            \"permission_previews\": [\n                \"CREATE\",\n                \"VIEW\",\n                \"EDIT\",\n                \"DELETE\",\n                \"INVITE\"\n            ],\n            \"group_previews\": [\n                {\n                    \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                    \"invite_id\": \"GroupInviteID_930a7fa9-0d9a-4f65-bb10-03db6a572ee6\",\n                    \"is_admin\": false,\n                    \"group_name\": \"Group for All\",\n                    \"group_avatar\": \"\"\n                }\n            ]\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/permissions/system/update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      ok: {",
							"        type: \"object\",",
							"        properties: {",
							"          data: {",
							"            type: \"object\",",
							"            properties: {",
							"              id: { type: \"string\" },",
							"              resource_id: { type: \"string\" },",
							"              granted_to: { type: \"string\" },",
							"              granted_by: { type: \"string\" },",
							"              permission_types: {",
							"                type: \"array\",",
							"                items: { type: \"string\" }",
							"              },",
							"              begin_date_ms: { type: \"integer\" },",
							"              expiry_date_ms: { type: \"integer\" },",
							"              note: { type: \"string\" },",
							"              created_at: { type: \"integer\" },",
							"              last_modified_at: { type: \"integer\" },",
							"              from_placeholder_grantee: { type: [\"null\", \"string\"] },",
							"              labels: {",
							"                type: \"array\",",
							"                items: { type: \"string\" }",
							"              },",
							"              redeem_code: { type: [\"null\", \"string\"] },",
							"              resource_name: { type: \"string\" },",
							"              grantee_name: { type: \"string\" },",
							"              grantee_avatar: { type: \"string\" },",
							"              granter_name: { type: \"string\" },",
							"              permission_previews: {",
							"                type: \"array\",",
							"                items: { type: \"string\" }",
							"              }",
							"            },",
							"            required: [\"id\", \"resource_id\", \"granted_to\", \"granted_by\", \"permission_types\", \"begin_date_ms\", \"expiry_date_ms\", \"created_at\", \"last_modified_at\", \"resource_name\", \"grantee_name\", \"granter_name\"]",
							"          }",
							"        },",
							"        required: [\"data\"]",
							"      }",
							"    },",
							"    required: [\"ok\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{system_permission_id}}\",\n  \"permission_types\": [\n    \"CREATE\",\n    \"VIEW\",\n    \"EDIT\"\n  ],\n  \"begin_date_ms\": 1753290541568,\n  \"expiry_date_ms\": 0,\n  \"note\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/system/update",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"permissions",
						"system",
						"update"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"SystemPermissionID_187b04a2-68d8-4c39-a119-1ce786062960\",\n  \"permission_types\": [\n    \"CREATE\",\n    \"VIEW\",\n    \"EDIT\"\n  ],\n  \"begin_date_ms\": 1753290541568,\n  \"expiry_date_ms\": -1,\n  \"note\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/system/update",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"permissions",
								"system",
								"update"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "725"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 20:18:17 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"id\": \"SystemPermissionID_187b04a2-68d8-4c39-a119-1ce786062960\",\n            \"resource_id\": \"TABLE_CONTACTS\",\n            \"granted_to\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\",\n            \"granted_by\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n            \"permission_types\": [\n                \"CREATE\",\n                \"EDIT\",\n                \"VIEW\"\n            ],\n            \"begin_date_ms\": 1753290541568,\n            \"expiry_date_ms\": -1,\n            \"note\": \"\",\n            \"created_at\": 1753301837810,\n            \"last_modified_at\": 1753301897931,\n            \"from_placeholder_grantee\": null,\n            \"labels\": [],\n            \"redeem_code\": null,\n            \"resource_name\": \"TABLE_CONTACTS\",\n            \"grantee_name\": \"User: UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\",\n            \"granter_name\": \"Owner\",\n            \"permission_previews\": [\n                \"CREATE\",\n                \"VIEW\",\n                \"EDIT\",\n                \"DELETE\",\n                \"INVITE\"\n            ]\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/permissions/system/get/:SystemPermissionID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response contains required fields in 'ok.data'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.ok.data).to.exist.and.to.be.an('object');",
							"    ",
							"    const data = responseData.ok.data;",
							"    pm.expect(data).to.have.all.keys('id', 'resource_id', 'granted_to', 'granted_by', 'permission_types', 'begin_date_ms', 'expiry_date_ms', 'note', 'created_at', 'last_modified_at', 'from_placeholder_grantee', 'labels', 'redeem_code', 'resource_name', 'grantee_name', 'grantee_avatar', 'granter_name', 'permission_previews');",
							"    ",
							"    pm.expect(data.permission_types).to.be.an('array');",
							"    pm.expect(data.labels).to.be.an('array');",
							"    pm.expect(data.permission_previews).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Validate that 'permission_types' is an array and contains valid strings\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok.data.permission_types).to.be.an('array');",
							"    ",
							"    responseData.ok.data.permission_types.forEach(function(type) {",
							"        pm.expect(type).to.be.a('string').and.to.have.lengthOf.above(0, \"Each permission type should be a non-empty string\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Begin date and expiry date are non-negative integers\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok.data.begin_date_ms).to.be.a('number').and.to.be.at.least(0);",
							"    pm.expect(responseData.ok.data.expiry_date_ms).to.be.a('number').and.to.be.at.least(0);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/system/get/{{system_permission_id}}",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"permissions",
						"system",
						"get",
						"{{system_permission_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/permissions/system/check",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"resource_id\": \"TABLE_CONTACTS\",\n  \"grantee_id\": \"{{foreign_friend_user_id}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/system/check",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"permissions",
						"system",
						"check"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"resource_id\": {\n    \"type\": \"Table\",\n    \"value\": \"CONTACTS\"\n  },\n  \"grantee_id\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/system/check",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"permissions",
								"system",
								"check"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "210"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 20:19:19 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"resource_id\": {\n                \"type\": \"Table\",\n                \"value\": \"CONTACTS\"\n            },\n            \"grantee_id\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n            \"permissions\": [\n                \"CREATE\",\n                \"EDIT\",\n                \"DELETE\",\n                \"VIEW\",\n                \"INVITE\"\n            ]\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/permissions/system/create | placeholder",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Set env vars",
							"var jsonData = pm.response.json();",
							"if (pm.response.code === 200 && jsonData.ok && jsonData.ok.data && jsonData.ok.data.permission) {",
							"",
							"    var data = jsonData.ok.data;",
							"    var permission = data.permission;",
							"    if (permission.id) {",
							"        pm.collectionVariables.set(\"system_permission_id\", permission.id);",
							"        console.log(\"Successfully set permission_id to: \" + permission.id);",
							"    }",
							"    if (permission.redeem_code) {",
							"        pm.collectionVariables.set(\"redeem_code\", permission.redeem_code);",
							"        console.log(\"Successfully set redeem_code to: \" + permission.redeem_code);",
							"    }",
							"} else {",
							"    // Log an error if the request was not successful",
							"    console.error(\"Failed to set permission_id. Status code: \" + pm.response.code);",
							"    console.error(\"Response body:\", pm.response.text());",
							"}",
							"",
							"",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"",
							"pm.test(\"Response contains required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist;",
							"    pm.expect(responseData.ok.data).to.exist;",
							"    pm.expect(responseData.ok.data.permission).to.exist;",
							"    ",
							"    const permission = responseData.ok.data.permission;",
							"    pm.expect(permission).to.have.all.keys(",
							"        'id', ",
							"        'resource_id', ",
							"        'granted_to', ",
							"        'granted_by', ",
							"        'permission_types', ",
							"        'begin_date_ms', ",
							"        'expiry_date_ms', ",
							"        'note', ",
							"        'created_at', ",
							"        'last_modified_at', ",
							"        'from_placeholder_grantee', ",
							"        'labels', ",
							"        'redeem_code', ",
							"        'resource_name', ",
							"        'grantee_name', ",
							"        'granter_name', ",
							"        'permission_previews',",
							"        \"grantee_avatar\"",
							"    );",
							"});",
							"",
							"",
							"pm.test(\"Permission types should be an array with at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.ok.data.permission.permission_types).to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Begin date and expiry date must be non-negative integers\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.ok).to.exist;",
							"    pm.expect(responseData.ok.data).to.exist;",
							"    pm.expect(responseData.ok.data.permission).to.exist;",
							"    ",
							"    const beginDate = responseData.ok.data.permission.begin_date_ms;",
							"    const expiryDate = responseData.ok.data.permission.expiry_date_ms;",
							"    ",
							"    pm.expect(beginDate).to.be.a('number');",
							"    pm.expect(expiryDate).to.be.a('number');",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"resource_id\": \"TABLE_CONTACTS\",\n  \"permission_types\": [\n    \"CREATE\",\n    \"VIEW\"\n  ],\n  \"begin_date_ms\": 1753290541568,\n  \"expiry_date_ms\": -1,\n  \"note\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/system/create",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"permissions",
						"system",
						"create"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"resource_id\": \"TABLE_CONTACTS\",\n  \"granted_to\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\",\n  \"permission_types\": [\n    \"CREATE\",\n    \"VIEW\"\n  ],\n  \"begin_date_ms\": 1753290541568,\n  \"expiry_date_ms\": -1,\n  \"note\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/system/create",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"permissions",
								"system",
								"create"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "733"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 20:17:17 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"permission\": {\n                \"id\": \"SystemPermissionID_187b04a2-68d8-4c39-a119-1ce786062960\",\n                \"resource_id\": \"TABLE_CONTACTS\",\n                \"granted_to\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\",\n                \"granted_by\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n                \"permission_types\": [\n                    \"CREATE\",\n                    \"VIEW\"\n                ],\n                \"begin_date_ms\": 1753290541568,\n                \"expiry_date_ms\": -1,\n                \"note\": \"\",\n                \"created_at\": 1753301837810,\n                \"last_modified_at\": 1753301837810,\n                \"from_placeholder_grantee\": null,\n                \"labels\": [],\n                \"redeem_code\": null,\n                \"resource_name\": \"TABLE_CONTACTS\",\n                \"grantee_name\": \"User: UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\",\n                \"granter_name\": \"Owner\",\n                \"permission_previews\": [\n                    \"CREATE\",\n                    \"VIEW\",\n                    \"EDIT\",\n                    \"DELETE\",\n                    \"INVITE\"\n                ]\n            }\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/permissions/system/redeem",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json().ok.data;",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.all.keys(",
							"        'id',",
							"        'resource_id',",
							"        'granted_to',",
							"        'granted_by',",
							"        'permission_types',",
							"        'begin_date_ms',",
							"        'expiry_date_ms',",
							"        'note',",
							"        'created_at',",
							"        'last_modified_at',",
							"        'from_placeholder_grantee',",
							"        'labels',",
							"        'redeem_code',",
							"        'resource_name',",
							"        'grantee_name',",
							"        'grantee_avatar',",
							"        'granter_name',",
							"        'permission_previews'",
							"    );",
							"});",
							"",
							"",
							"pm.test(\"Permission types is an array and contains valid values\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.ok.data).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.ok.data.permission_types).to.exist.and.to.be.an('array');",
							"",
							"    responseData.ok.data.permission_types.forEach(function(permissionType) {",
							"        pm.expect(permissionType).to.be.a('string').that.is.not.empty;",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Begin date and expiry date must be non-negative integers\", function () {",
							"    const responseData = pm.response.json();",
							"    const beginDate = responseData.ok.data.begin_date_ms;",
							"    const expiryDate = responseData.ok.data.expiry_date_ms;",
							"",
							"    pm.expect(beginDate).to.be.a('number');",
							"    pm.expect(expiryDate).to.be.a('number');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "//Currently Working in Web3's Server\n{\n  \"permission_id\": \"{{system_permission_id}}\",\n  \"user_id\": \"UserID_dfyb3-s744h-ld6eq-dgrdk-behew-vcdto-kqacs-htufx-u7a4j-clpdf-5qe\",\n  \"redeem_code\": \"{{redeem_code}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/system/redeem",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"permissions",
						"system",
						"redeem"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/permissions/system/get/:SystemPermissionID",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/system/get/{{system_permission_id}}",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"permissions",
						"system",
						"get",
						"{{system_permission_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/permissions/system/check",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"resource_id\": \"TABLE_CONTACTS\",\n  \"grantee_id\": \"UserID_dfyb3-s744h-ld6eq-dgrdk-behew-vcdto-kqacs-htufx-u7a4j-clpdf-5qe\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/system/check",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"permissions",
						"system",
						"check"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"resource_id\": {\n    \"type\": \"Table\",\n    \"value\": \"CONTACTS\"\n  },\n  \"grantee_id\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/system/check",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"permissions",
								"system",
								"check"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "210"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 20:19:19 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"resource_id\": {\n                \"type\": \"Table\",\n                \"value\": \"CONTACTS\"\n            },\n            \"grantee_id\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n            \"permissions\": [\n                \"CREATE\",\n                \"EDIT\",\n                \"DELETE\",\n                \"VIEW\",\n                \"INVITE\"\n            ]\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/permissions/system/delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response contains required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('ok').that.is.an('object');",
							"    pm.expect(responseData.ok).to.have.property('data').that.is.an('object');",
							"});",
							"",
							"",
							"pm.test(\"Deleted ID is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist;",
							"    pm.expect(responseData.ok.data).to.exist;",
							"    pm.expect(responseData.ok.data.deleted_id).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Deleted ID should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response schema matches the expected structure\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('ok').that.is.an('object');",
							"    pm.expect(responseData.ok).to.have.property('data').that.is.an('object');",
							"    pm.expect(responseData.ok.data).to.have.property('deleted_id').that.is.a('string');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"permission_id\": \"{{system_permission_id}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/system/delete",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"permissions",
						"system",
						"delete"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"permission_id\": \"SystemPermissionID_7af681d6-d82d-496e-ab94-8cb9c150bb13\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/system/delete",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"permissions",
								"system",
								"delete"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "88"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 20:22:19 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"deleted_id\": \"SystemPermissionID_7af681d6-d82d-496e-ab94-8cb9c150bb13\"\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/disks/create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Set env vars",
							"var jsonData = pm.response.json();",
							"if (pm.response.code === 200 && jsonData.ok && jsonData.ok.data.id) {",
							"    var data = jsonData.ok.data;",
							"    var disk_id = data.id;",
							"    if (disk_id) {",
							"        pm.collectionVariables.set(\"disk_id\", disk_id);",
							"        console.log(\"Successfully set disk_id to: \" + disk_id);",
							"    }",
							"    var root_folder = data.root_folder;",
							"    if (root_folder) {",
							"        pm.collectionVariables.set(\"root_folder\", root_folder);",
							"        console.log(\"Successfully set root_folder to: \" + root_folder);",
							"    }",
							"    var trash_folder = data.trash_folder;",
							"    if (trash_folder) {",
							"        pm.collectionVariables.set(\"trash_folder\", trash_folder);",
							"        console.log(\"Successfully set trash_folder to: \" + trash_folder);",
							"    }",
							"} else {",
							"    // Log an error if the request was not successful",
							"    console.error(\"Failed to retrieve disk_id. Status code: \" + pm.response.code);",
							"    console.error(\"Response body:\", pm.response.text());",
							"}",
							"",
							"",
							"",
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      ok: {",
							"        type: \"object\",",
							"        properties: {",
							"          data: {",
							"            type: \"object\",",
							"            properties: {",
							"              id: { type: \"string\" },",
							"              name: { type: \"string\" },",
							"              disk_type: { type: \"string\" },",
							"              private_note: { type: \"string\" },",
							"              public_note: { type: \"string\" },",
							"              auth_json: { type: \"string\" },",
							"              labels: {",
							"                type: \"array\",",
							"                items: { type: \"string\" }",
							"              },",
							"              created_at: { type: \"integer\" },",
							"              root_folder: { type: \"string\" },",
							"              trash_folder: { type: \"string\" },",
							"              external_id: { type: \"string\" },",
							"              external_payload: { type: \"string\" },",
							"              permission_previews: {",
							"                type: \"array\",",
							"                items: { type: \"string\" }",
							"              }",
							"            },",
							"            required: [\"id\", \"name\", \"disk_type\", \"created_at\"]",
							"          }",
							"        },",
							"        required: [\"data\"]",
							"      }",
							"    },",
							"    required: [\"ok\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Project Cloud Storage\",\n  \"disk_type\": \"AWS_BUCKET\",\n  \"public_note\": \"Storage for group project files\",\n  \"private_note\": \"Contains sensitive project data\",\n  \"auth_json\": \"{\\\"access_key\\\": \\\"redacted\\\", \\\"secret_key\\\": \\\"redacted\\\", \\\"region\\\": \\\"us-east-1\\\", \\\"bucket\\\": \\\"ofx-bucket-friend-696\\\", \\\"endpoint\\\": \\\"redacted\\\"}\",\n  \"external_id\": \"ext-disk-001\",\n  \"external_payload\": \"{\\\"department\\\": \\\"engineering\\\", \\\"cost_center\\\": \\\"cc-12345\\\", \\\"project_id\\\": \\\"p-987654\\\"}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/disks/create",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"disks",
						"create"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Project Cloud Storage\",\n  \"disk_type\": \"AwsBucket\",\n  \"public_note\": \"Storage for group project files\",\n  \"private_note\": \"Contains sensitive project data\",\n  \"auth_json\": \"{\\\"access_key\\\": \\\"{{vault:aws-access-key}}\\\", \\\"secret_key\\\": \\\"redacted\\\", \\\"region\\\": \\\"us-east-1\\\", \\\"bucket\\\": \\\"ofx-bucket-friend-696\\\"}\",\n  \"external_id\": \"ext-disk-001\",\n  \"external_payload\": \"{\\\"department\\\": \\\"engineering\\\", \\\"cost_center\\\": \\\"cc-12345\\\", \\\"project_id\\\": \\\"p-987654\\\"}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/disks/create",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"disks",
								"create"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "747"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 20:07:29 GMT"
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date",
							"domain": "",
							"path": ""
						}
					],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"id\": \"DiskID_a62a3c4f-f02f-4437-a67e-c9f6224c722b\",\n            \"name\": \"Project Cloud Storage\",\n            \"disk_type\": \"AwsBucket\",\n            \"private_note\": \"Contains sensitive project data\",\n            \"public_note\": \"Storage for group project files\",\n            \"auth_json\": \"{\\\"access_key\\\": \\\"{{vault:aws-access-key}}\\\", \\\"secret_key\\\": \\\"redacted\\\", \\\"region\\\": \\\"us-east-1\\\", \\\"bucket\\\": \\\"ofx-bucket-friend-696\\\"}\",\n            \"labels\": [],\n            \"created_at\": 1753301249223,\n            \"root_folder\": \"FolderID_b23fee3d-298f-4d10-9621-9495cbcd746c\",\n            \"trash_folder\": \"FolderID_97761fb8-7a63-4be4-88e5-0a6c97fbc6df\",\n            \"external_id\": \"ext-disk-001\",\n            \"external_payload\": \"{\\\"department\\\": \\\"engineering\\\", \\\"cost_center\\\": \\\"cc-12345\\\", \\\"project_id\\\": \\\"p-987654\\\"}\",\n            \"permission_previews\": [\n                \"CREATE\",\n                \"EDIT\",\n                \"DELETE\",\n                \"VIEW\",\n                \"INVITE\"\n            ]\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/directory/list | BASICS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the schema of the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.all.keys('folders', 'files', 'total_files', 'total_folders', 'cursor', 'breadcrumbs', 'permission_previews');",
							"",
							"    pm.expect(responseData.folders).to.be.an('array');",
							"    pm.expect(responseData.files).to.be.an('array');",
							"    pm.expect(responseData.breadcrumbs).to.be.an('array');",
							"    pm.expect(responseData.permission_previews).to.be.an('array');",
							"",
							"    responseData.breadcrumbs.forEach(breadcrumb => {",
							"        pm.expect(breadcrumb).to.be.an('object');",
							"        pm.expect(breadcrumb).to.have.all.keys('resource_id', 'resource_name', 'visibility_preview');",
							"        pm.expect(breadcrumb.visibility_preview).to.be.an('array');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Breadcrumbs array contains required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.breadcrumbs).to.be.an('array');",
							"",
							"    responseData.breadcrumbs.forEach(breadcrumb => {",
							"        pm.expect(breadcrumb).to.be.an('object');",
							"        pm.expect(breadcrumb).to.have.all.keys('resource_id', 'resource_name', 'visibility_preview');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Permission previews is an array and contains strings\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.have.property('permission_previews').that.is.an('array');",
							"    responseData.permission_previews.forEach(function(item) {",
							"        pm.expect(item).to.be.a('string');",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"folder_id\": \"{{root_folder}}\",\n  \"path\": \"\",\n  \"filters\": \"\",\n  \"page_size\": 50,\n  \"direction\": \"ASC\"\n//   \"cursor\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/directory/list",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"directory",
						"list"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/directory/action | create file",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Set env vars",
							"var jsonData = pm.response.json();",
							"const file = jsonData[0]",
							"if (pm.response.code === 200 && file.success && file.response.result.file.id) {",
							"",
							"    var file_id = file.response.result.file.id;",
							"    if (file_id) {",
							"        pm.collectionVariables.set(\"file_id\", file_id);",
							"        console.log(\"Successfully set file_id to: \" + file_id);",
							"    }",
							"} else {",
							"    // Log an error if the request was not successful",
							"    console.error(\"Failed to set file_id. Status code: \" + pm.response.code);",
							"    console.error(\"Response body:\", pm.response.text());",
							"}",
							"",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the schema of the success object\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"",
							"    responseData.forEach(item => {",
							"        pm.expect(item).to.have.property('success').that.is.a('boolean');",
							"        pm.expect(item).to.have.property('request').that.is.an('object');",
							"        pm.expect(item.request).to.have.property('action').that.is.a('string');",
							"        pm.expect(item.request).to.have.property('payload').that.is.an('object');",
							"        pm.expect(item.request.payload).to.have.property('name').that.is.a('string');",
							"        pm.expect(item.request.payload).to.have.property('parent_folder_uuid').that.is.a('string');",
							"        pm.expect(item.request.payload).to.have.property('extension').that.is.a('string');",
							"        pm.expect(item.request.payload).to.have.property('labels').that.is.an('array');",
							"        pm.expect(item.request.payload).to.have.property('file_size').that.is.a('number');",
							"        pm.expect(item.request.payload).to.have.property('disk_id').that.is.a('string');",
							"        pm.expect(item.request.payload).to.have.property('disk_type').that.is.a('string');",
							"        ",
							"        pm.expect(item).to.have.property('response').that.is.an('object');",
							"        pm.expect(item.response).to.have.property('result').that.is.an('object');",
							"        ",
							"        pm.expect(item.response.result).to.have.property('file').that.is.an('object');",
							"        pm.expect(item.response.result.file).to.have.property('id').that.is.a('string');",
							"        pm.expect(item.response.result.file).to.have.property('name').that.is.a('string');",
							"        pm.expect(item.response.result.file).to.have.property('parent_folder_uuid').that.is.a('string');",
							"        pm.expect(item.response.result.file).to.have.property('version_id').that.is.a('string');",
							"        pm.expect(item.response.result.file).to.have.property('file_version').that.is.a('number');",
							"        pm.expect(item.response.result.file).to.have.property('extension').that.is.a('string');",
							"        pm.expect(item.response.result.file).to.have.property('full_directory_path').that.is.a('string');",
							"        pm.expect(item.response.result.file).to.have.property('labels').that.is.an('array');",
							"        pm.expect(item.response.result.file).to.have.property('created_by').that.is.a('string');",
							"        pm.expect(item.response.result.file).to.have.property('created_at').that.is.a('number');",
							"        pm.expect(item.response.result.file).to.have.property('disk_id').that.is.a('string');",
							"        pm.expect(item.response.result.file).to.have.property('disk_type').that.is.a('string');",
							"        pm.expect(item.response.result.file).to.have.property('file_size').that.is.a('number');",
							"        pm.expect(item.response.result.file).to.have.property('raw_url').that.is.a('string');",
							"        pm.expect(item.response.result.file).to.have.property('last_updated_date_ms').that.is.a('number');",
							"        pm.expect(item.response.result.file).to.have.property('last_updated_by').that.is.a('string');",
							"        pm.expect(item.response.result.file).to.have.property('deleted').that.is.a('boolean');",
							"        pm.expect(item.response.result.file).to.have.property('drive_id').that.is.a('string');",
							"        pm.expect(item.response.result.file).to.have.property('expires_at').that.is.a('number');",
							"        pm.expect(item.response.result.file).to.have.property('has_sovereign_permissions').that.is.a('boolean');",
							"        pm.expect(item.response.result.file).to.have.property('upload_status').that.is.a('string');",
							"        pm.expect(item.response.result.file).to.have.property('clipped_directory_path').that.is.a('string');",
							"        pm.expect(item.response.result.file).to.have.property('permission_previews').that.is.an('array');",
							"        ",
							"        pm.expect(item.response.result).to.have.property('upload').that.is.an('object');",
							"        pm.expect(item.response.result.upload).to.have.property('url').that.is.a('string');",
							"        pm.expect(item.response.result.upload).to.have.property('fields').that.is.an('object');",
							"        ",
							"        pm.expect(item.response.result.upload.fields).to.have.property('key').that.is.a('string');",
							"        pm.expect(item.response.result.upload.fields).to.have.property('acl').that.is.a('string');",
							"        pm.expect(item.response.result.upload.fields).to.have.property('Content-Disposition').that.is.a('string');",
							"        pm.expect(item.response.result.upload.fields).to.have.property('x-amz-algorithm').that.is.a('string');",
							"        pm.expect(item.response.result.upload.fields).to.have.property('x-amz-credential').that.is.a('string');",
							"        pm.expect(item.response.result.upload.fields).to.have.property('x-amz-date').that.is.a('string');",
							"        pm.expect(item.response.result.upload.fields).to.have.property('policy').that.is.a('string');",
							"        pm.expect(item.response.result.upload.fields).to.have.property('x-amz-signature').that.is.a('string');",
							"        ",
							"        pm.expect(item.response.result).to.have.property('notes').that.is.a('string');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Validate the presence of required fields in the request object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.forEach(item => {",
							"        pm.expect(item).to.have.property('success').that.is.a('boolean');",
							"        pm.expect(item).to.have.property('request').that.is.an('object');",
							"        pm.expect(item.request).to.have.property('action').that.is.a('string');",
							"        pm.expect(item.request).to.have.property('payload').that.is.an('object');",
							"        ",
							"        const payload = item.request.payload;",
							"        pm.expect(payload).to.have.property('name').that.is.a('string');",
							"        pm.expect(payload).to.have.property('parent_folder_uuid').that.is.a('string');",
							"        pm.expect(payload).to.have.property('extension').that.is.a('string');",
							"        pm.expect(payload).to.have.property('labels').that.is.an('array');",
							"        pm.expect(payload).to.have.property('file_size').that.is.a('number');",
							"        pm.expect(payload).to.have.property('disk_id').that.is.a('string');",
							"        pm.expect(payload).to.have.property('disk_type').that.is.a('string');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"File object contains valid data types for each field\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"",
							"    responseData.forEach(item => {",
							"        const file = item.response.result.file;",
							"        ",
							"        pm.expect(file).to.be.an('object');",
							"        pm.expect(file.id).to.be.a('string');",
							"        pm.expect(file.name).to.be.a('string');",
							"        pm.expect(file.parent_folder_uuid).to.be.a('string');",
							"        pm.expect(file.version_id).to.be.a('string');",
							"        pm.expect(file.file_version).to.be.a('number');",
							"        pm.expect(file.extension).to.be.a('string');",
							"        pm.expect(file.full_directory_path).to.be.a('string');",
							"        pm.expect(file.labels).to.be.an('array');",
							"        pm.expect(file.created_by).to.be.a('string');",
							"        pm.expect(file.created_at).to.be.a('number');",
							"        pm.expect(file.disk_id).to.be.a('string');",
							"        pm.expect(file.disk_type).to.be.a('string');",
							"        pm.expect(file.file_size).to.be.a('number');",
							"        pm.expect(file.raw_url).to.be.a('string');",
							"        pm.expect(file.last_updated_date_ms).to.be.a('number');",
							"        pm.expect(file.last_updated_by).to.be.a('string');",
							"        pm.expect(file.deleted).to.be.a('boolean');",
							"        pm.expect(file.drive_id).to.be.a('string');",
							"        pm.expect(file.expires_at).to.be.a('number');",
							"        pm.expect(file.has_sovereign_permissions).to.be.a('boolean');",
							"        pm.expect(file.upload_status).to.be.a('string');",
							"        pm.expect(file.clipped_directory_path).to.be.a('string');",
							"        pm.expect(file.permission_previews).to.be.an('array');",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"actions\": [\n    {\n      \"action\": \"CREATE_FILE\",\n      \"payload\": {\n            // id?: FileID;\n            \"name\": \"Proposal\",\n            \"parent_folder_uuid\": \"{{root_folder}}\",\n            \"extension\": \"pdf\",\n            \"labels\": [],\n            \"file_size\": 124434,\n            \"disk_id\": \"{{disk_id}}\",\n            \"disk_type\": \"AWS_BUCKET\"\n            // expires_at?: number;\n            // file_conflict_resolution?: FileConflictResolutionEnum;\n            // has_sovereign_permissions?: boolean;\n            // shortcut_to?: FileID;\n            // external_id?: ExternalID;\n            // external_payload?: ExternalPayload;\n            // raw_url?: string;\n            // notes?: string;\n        }\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{FactoryEndpoint}}/v1/drive/{{org_id}}/directory/action",
					"host": [
						"{{FactoryEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"directory",
						"action"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/directory/action | create folder",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Set env vars",
							"var jsonData = pm.response.json();",
							"const folder = jsonData[0]",
							"if (pm.response.code === 200 && folder.success && folder.response.result.folder.id) {",
							"",
							"    var folder_id = folder.response.result.folder.id;",
							"    if (folder_id) {",
							"        pm.collectionVariables.set(\"folder_id\", folder_id);",
							"        console.log(\"Successfully set folder_id to: \" + folder_id);",
							"    }",
							"} else {",
							"    // Log an error if the request was not successful",
							"    console.error(\"Failed to set folder_id. Status code: \" + pm.response.code);",
							"    console.error(\"Response body:\", pm.response.text());",
							"}",
							"",
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"array\",",
							"    items: {",
							"      type: \"object\",",
							"      properties: {",
							"        success: { type: \"boolean\" },",
							"        response: {",
							"          type: \"object\",",
							"          properties: {",
							"            result: {",
							"              type: \"object\",",
							"              properties: {",
							"                folder: {",
							"                  type: \"object\",",
							"                  properties: {",
							"                    id: { type: \"string\" }",
							"                  },",
							"                  required: [\"id\"]",
							"                }",
							"              },",
							"              required: [\"folder\"]",
							"            }",
							"          },",
							"          required: [\"result\"]",
							"        }",
							"      },",
							"      required: [\"success\", \"response\"]",
							"    }",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"actions\": [\n    {\n      \"action\": \"CREATE_FOLDER\",\n      \"payload\": {\n            // id?: FolderID;\n            \"name\": \"Investigation\",\n            \"labels\": [],\n            \"disk_id\": \"{{disk_id}}\",\n            \"disk_type\": \"AWS_BUCKET\",\n            \"parent_folder_uuid\": \"{{root_folder}}\"\n            // expires_at?: number;\n            // file_conflict_resolution?: FileConflictResolutionEnum;\n            // has_sovereign_permissions?: boolean;\n            // shortcut_to?: FolderID;\n            // external_id?: ExternalID;\n            // external_payload?: ExternalPayload;\n            // notes?: string;\n      }\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{FactoryEndpoint}}/v1/drive/{{org_id}}/directory/action",
					"host": [
						"{{FactoryEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"directory",
						"action"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/directory/action | edit file",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response is an array with exactly one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.has.lengthOf(1);",
							"});",
							"",
							"",
							"pm.test(\"Validate the schema of the response object\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"",
							"    responseData.forEach(item => {",
							"        pm.expect(item).to.have.all.keys('success', 'request', 'response');",
							"        pm.expect(item.success).to.be.a('boolean');",
							"",
							"        pm.expect(item.request).to.have.all.keys('action', 'payload');",
							"        pm.expect(item.request.action).to.be.a('string');",
							"",
							"        pm.expect(item.request.payload).to.have.all.keys('id', 'name');",
							"        pm.expect(item.request.payload.id).to.be.a('string');",
							"        pm.expect(item.request.payload.name).to.be.a('string');",
							"",
							"        pm.expect(item.response).to.have.all.keys('result');",
							"        ",
							"        pm.expect(item.response.result.file).to.have.all.keys('id', 'name', 'parent_folder_uuid', 'version_id', 'extension', ",
							"            'full_directory_path', 'created_by', 'created_at', 'disk_id', 'disk_type', 'file_size', 'raw_url', 'deleted', ",
							"            'drive_id', 'upload_status', 'expires_at', 'restore_trash_prior_folder_uuid', 'has_sovereign_permissions', ",
							"            'shortcut_to', 'notes', 'external_id', 'external_payload', 'file_version', 'labels', ",
							"            'last_updated_date_ms', 'last_updated_by', 'clipped_directory_path', 'permission_previews');",
							"",
							"        pm.expect(item.response.result.file.id).to.be.a('string');",
							"        pm.expect(item.response.result.file.name).to.be.a('string');",
							"        pm.expect(item.response.result.file.parent_folder_uuid).to.be.a('string');",
							"        pm.expect(item.response.result.file.version_id).to.be.a('string');",
							"        pm.expect(item.response.result.file.extension).to.be.a('string');",
							"        pm.expect(item.response.result.file.full_directory_path).to.be.a('string');",
							"        pm.expect(item.response.result.file.created_by).to.be.a('string');",
							"        pm.expect(item.response.result.file.created_at).to.be.a('number');",
							"        pm.expect(item.response.result.file.disk_id).to.be.a('string');",
							"        pm.expect(item.response.result.file.disk_type).to.be.a('string');",
							"        pm.expect(item.response.result.file.file_size).to.be.a('number');",
							"        pm.expect(item.response.result.file.raw_url).to.be.a('string');",
							"        pm.expect(item.response.result.file.deleted).to.be.a('boolean');",
							"        pm.expect(item.response.result.file.drive_id).to.be.a('string');",
							"        pm.expect(item.response.result.file.upload_status).to.be.a('string');",
							"        pm.expect(item.response.result.file.expires_at).to.be.a('number');",
							"        pm.expect(item.response.result.file.restore_trash_prior_folder_uuid).to.satisfy(value => value === null || typeof value === 'string');",
							"        pm.expect(item.response.result.file.has_sovereign_permissions).to.be.a('boolean');",
							"        pm.expect(item.response.result.file.shortcut_to).to.satisfy(value => value === null || typeof value === 'string');",
							"        pm.expect(item.response.result.file.notes).to.satisfy(value => value === null || typeof value === 'string');",
							"        pm.expect(item.response.result.file.external_id).to.satisfy(value => value === null || typeof value === 'string');",
							"        pm.expect(item.response.result.file.external_payload).to.satisfy(value => value === null || typeof value === 'string');",
							"        pm.expect(item.response.result.file.file_version).to.be.a('number');",
							"        pm.expect(item.response.result.file.labels).to.be.an('array');",
							"        pm.expect(item.response.result.file.last_updated_date_ms).to.be.a('number');",
							"        pm.expect(item.response.result.file.last_updated_by).to.be.a('string');",
							"        pm.expect(item.response.result.file.clipped_directory_path).to.be.a('string');",
							"        pm.expect(item.response.result.file.permission_previews).to.be.an('array');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Success field should be true\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    responseData.forEach(item => {",
							"        pm.expect(item.success).to.be.true;",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"actions\": [\n    {\n      \"action\": \"UPDATE_FILE\",\n      \"payload\": {\n            \"id\": \"{{file_id}}\",\n            \"name\": \"Revised Proposal\"\n            // labels?: LabelValue[];\n            // upload_status?: UploadStatus;\n            // raw_url?: string;\n            // expires_at?: number;\n            // external_id?: ExternalID;\n            // external_payload?: ExternalPayload;\n            // notes?: string;\n            // shortcut_to?: FileID;\n        }\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{FactoryEndpoint}}/v1/drive/{{org_id}}/directory/action",
					"host": [
						"{{FactoryEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"directory",
						"action"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/directory/action | edit folder",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the structure of the response object\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.forEach(item => {",
							"        pm.expect(item).to.be.an('object').that.includes.all.keys('success', 'request', 'response');",
							"        ",
							"        pm.expect(item.success).to.be.a('boolean');",
							"",
							"        pm.expect(item.request).to.be.an('object').that.includes.all.keys('action', 'payload');",
							"        pm.expect(item.request.action).to.be.a('string');",
							"        ",
							"        pm.expect(item.request.payload).to.be.an('object').that.includes.all.keys('id', 'name');",
							"        pm.expect(item.request.payload.id).to.be.a('string');",
							"        pm.expect(item.request.payload.name).to.be.a('string');",
							"",
							"        pm.expect(item.response).to.be.an('object').that.includes.all.keys('result');",
							"        pm.expect(item.response.result.folder).to.be.an('object').that.includes.all.keys('id', 'name', 'parent_folder_uuid', 'full_directory_path', 'created_by', 'created_at', 'disk_id', 'disk_type', 'deleted', 'expires_at', 'drive_id', 'restore_trash_prior_folder_uuid', 'has_sovereign_permissions', 'shortcut_to', 'notes', 'external_id', 'external_payload', 'subfolder_uuids', 'file_uuids', 'labels', 'last_updated_date_ms', 'last_updated_by', 'clipped_directory_path', 'permission_previews');",
							"        ",
							"        pm.expect(item.response.result.folder.id).to.be.a('string');",
							"        pm.expect(item.response.result.folder.name).to.be.a('string');",
							"        pm.expect(item.response.result.folder.parent_folder_uuid).to.be.a('string');",
							"        pm.expect(item.response.result.folder.full_directory_path).to.be.a('string');",
							"        pm.expect(item.response.result.folder.created_by).to.be.a('string');",
							"        pm.expect(item.response.result.folder.created_at).to.be.a('number');",
							"        pm.expect(item.response.result.folder.disk_id).to.be.a('string');",
							"        pm.expect(item.response.result.folder.disk_type).to.be.a('string');",
							"        pm.expect(item.response.result.folder.deleted).to.be.a('boolean');",
							"        pm.expect(item.response.result.folder.expires_at).to.be.a('number');",
							"        pm.expect(item.response.result.folder.drive_id).to.be.a('string');",
							"        pm.expect(item.response.result.folder.restore_trash_prior_folder_uuid).to.satisfy(value => value === null || typeof value === 'string');",
							"        pm.expect(item.response.result.folder.has_sovereign_permissions).to.be.a('boolean');",
							"        pm.expect(item.response.result.folder.shortcut_to).to.satisfy(value => value === null || typeof value === 'string');",
							"        pm.expect(item.response.result.folder.notes).to.satisfy(value => value === null || typeof value === 'string');",
							"        pm.expect(item.response.result.folder.external_id).to.satisfy(value => value === null || typeof value === 'string');",
							"        pm.expect(item.response.result.folder.external_payload).to.satisfy(value => value === null || typeof value === 'string');",
							"        pm.expect(item.response.result.folder.subfolder_uuids).to.be.a('string');",
							"        pm.expect(item.response.result.folder.file_uuids).to.be.a('string');",
							"        pm.expect(item.response.result.folder.labels).to.be.an('array');",
							"        pm.expect(item.response.result.folder.last_updated_date_ms).to.be.a('number');",
							"        pm.expect(item.response.result.folder.last_updated_by).to.be.a('string');",
							"        pm.expect(item.response.result.folder.clipped_directory_path).to.be.a('string');",
							"        pm.expect(item.response.result.folder.permission_previews).to.be.an('array');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Success should be true\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    pm.expect(responseData[0].success).to.be.true;",
							"});",
							"",
							"",
							"pm.test(\"Request contains expected fields: action and payload\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    responseData.forEach(item => {",
							"        pm.expect(item.request).to.exist;",
							"        pm.expect(item.request).to.have.all.keys('action', 'payload');",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"actions\": [\n    {\n      \"action\": \"UPDATE_FOLDER\",\n      \"payload\": {\n            \"id\": \"{{folder_id}}\",\n            \"name\": \"Revised Investigation\"\n            // labels?: LabelValue[];\n            // expires_at?: number;\n            // external_id?: ExternalID;\n            // external_payload?: ExternalPayload;\n            // notes?: string;\n            // shortcut_to?: FolderID;\n        }\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{FactoryEndpoint}}/v1/drive/{{org_id}}/directory/action",
					"host": [
						"{{FactoryEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"directory",
						"action"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/directory/action | view file",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response contains required fields: success, request, and response\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    responseData.forEach(item => {",
							"        pm.expect(item).to.have.all.keys('success', 'request', 'response');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Validate the schema of the response object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.forEach(item => {",
							"        pm.expect(item).to.be.an('object').that.has.all.keys('success', 'request', 'response');",
							"        pm.expect(item.success).to.be.a('boolean');",
							"        ",
							"        pm.expect(item.request).to.be.an('object').that.has.all.keys('action', 'payload');",
							"        pm.expect(item.request.action).to.be.a('string');",
							"        pm.expect(item.request.payload).to.be.an('object').that.has.all.keys('id', 'share_track_hash');",
							"        pm.expect(item.request.payload.id).to.be.a('string');",
							"        pm.expect(item.request.payload.share_track_hash).to.be.a('string');",
							"        ",
							"        pm.expect(item.response).to.be.an('object').that.has.all.keys('result');",
							"        pm.expect(item.response.result).to.be.an('object').that.has.all.keys('file', 'breadcrumbs');",
							"        ",
							"        pm.expect(item.response.result.file).to.be.an('object').that.has.all.keys('id', 'name', 'parent_folder_uuid', 'version_id', 'extension', 'full_directory_path', 'created_by', 'created_at', 'disk_id', 'disk_type', 'file_size', 'raw_url', 'deleted', 'drive_id', 'upload_status', 'expires_at', 'restore_trash_prior_folder_uuid', 'has_sovereign_permissions', 'shortcut_to', 'notes', 'external_id', 'external_payload', 'file_version', 'labels', 'last_updated_date_ms', 'last_updated_by', 'clipped_directory_path', 'permission_previews');",
							"        ",
							"        pm.expect(item.response.result.file.id).to.be.a('string');",
							"        pm.expect(item.response.result.file.name).to.be.a('string');",
							"        pm.expect(item.response.result.file.parent_folder_uuid).to.be.a('string');",
							"        pm.expect(item.response.result.file.version_id).to.be.a('string');",
							"        pm.expect(item.response.result.file.extension).to.be.a('string');",
							"        pm.expect(item.response.result.file.full_directory_path).to.be.a('string');",
							"        pm.expect(item.response.result.file.created_by).to.be.a('string');",
							"        pm.expect(item.response.result.file.created_at).to.be.a('number');",
							"        pm.expect(item.response.result.file.disk_id).to.be.a('string');",
							"        pm.expect(item.response.result.file.disk_type).to.be.a('string');",
							"        pm.expect(item.response.result.file.file_size).to.be.a('number');",
							"        pm.expect(item.response.result.file.raw_url).to.be.a('string');",
							"        pm.expect(item.response.result.file.deleted).to.be.a('boolean');",
							"        pm.expect(item.response.result.file.drive_id).to.be.a('string');",
							"        pm.expect(item.response.result.file.upload_status).to.be.a('string');",
							"        pm.expect(item.response.result.file.expires_at).to.be.a('number');",
							"        pm.expect(item.response.result.file.restore_trash_prior_folder_uuid).to.satisfy(value => value === null || typeof value === 'string');",
							"        pm.expect(item.response.result.file.has_sovereign_permissions).to.be.a('boolean');",
							"        pm.expect(item.response.result.file.shortcut_to).to.satisfy(value => value === null || typeof value === 'string');",
							"        pm.expect(item.response.result.file.notes).to.satisfy(value => value === null || typeof value === 'string');",
							"        pm.expect(item.response.result.file.external_id).to.satisfy(value => value === null || typeof value === 'string');",
							"        pm.expect(item.response.result.file.external_payload).to.satisfy(value => value === null || typeof value === 'string');",
							"        pm.expect(item.response.result.file.file_version).to.be.a('number');",
							"        pm.expect(item.response.result.file.labels).to.be.an('array');",
							"        pm.expect(item.response.result.file.last_updated_date_ms).to.be.a('number');",
							"        pm.expect(item.response.result.file.last_updated_by).to.be.a('string');",
							"        pm.expect(item.response.result.file.clipped_directory_path).to.be.a('string');",
							"        pm.expect(item.response.result.file.permission_previews).to.be.an('array');",
							"        ",
							"        item.response.result.breadcrumbs.forEach(breadcrumb => {",
							"            pm.expect(breadcrumb).to.be.an('object').that.has.all.keys('resource_id', 'resource_name', 'visibility_preview');",
							"            pm.expect(breadcrumb.resource_id).to.be.a('string');",
							"            pm.expect(breadcrumb.resource_name).to.be.a('string');",
							"            pm.expect(breadcrumb.visibility_preview).to.be.an('array');",
							"        });",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"The success field should be a boolean value\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    responseData.forEach(item => {",
							"        pm.expect(item.success).to.be.a('boolean');",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"actions\": [\n    {\n      \"action\": \"GET_FILE\",\n      \"payload\": {\n        \"id\": \"{{file_id}}\",\n        \"share_track_hash\": \"track123\"\n      }\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{FactoryEndpoint}}/v1/drive/{{org_id}}/directory/action",
					"host": [
						"{{FactoryEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"directory",
						"action"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/directory/action | view folder",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response schema matches the expected structure\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"",
							"    responseData.forEach(item => {",
							"        pm.expect(item).to.be.an('object').that.includes.all.keys('success', 'request', 'response');",
							"        ",
							"        pm.expect(item.request).to.be.an('object').that.includes.all.keys('action', 'payload');",
							"        pm.expect(item.request.payload).to.be.an('object').that.includes.all.keys('id', 'share_track_hash');",
							"",
							"        pm.expect(item.response).to.be.an('object').that.includes.all.keys('result');",
							"        pm.expect(item.response.result).to.be.an('object').that.includes.all.keys('folder', 'breadcrumbs');",
							"",
							"        pm.expect(item.response.result.folder).to.be.an('object').that.includes.all.keys(",
							"            'id', 'name', 'parent_folder_uuid', 'full_directory_path', 'created_by', ",
							"            'created_at', 'disk_id', 'disk_type', 'deleted', 'expires_at', ",
							"            'drive_id', 'restore_trash_prior_folder_uuid', 'has_sovereign_permissions', ",
							"            'shortcut_to', 'notes', 'external_id', 'external_payload', ",
							"            'subfolder_uuids', 'file_uuids', 'labels', 'last_updated_date_ms', ",
							"            'last_updated_by', 'clipped_directory_path', 'permission_previews'",
							"        );",
							"",
							"        pm.expect(item.response.result.breadcrumbs).to.be.an('array').that.is.not.empty;",
							"        item.response.result.breadcrumbs.forEach(breadcrumb => {",
							"            pm.expect(breadcrumb).to.be.an('object').that.includes.all.keys('resource_id', 'resource_name', 'visibility_preview');",
							"        });",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Success should be true\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    responseData.forEach(item => {",
							"        pm.expect(item.success).to.be.true;",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"The folder object contains the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.forEach(item => {",
							"        pm.expect(item).to.have.nested.property('response.result.folder.id').that.is.a('string').and.is.not.empty;",
							"        pm.expect(item).to.have.nested.property('response.result.folder.name').that.is.a('string').and.is.not.empty;",
							"        pm.expect(item).to.have.nested.property('response.result.folder.parent_folder_uuid').that.is.a('string').and.is.not.empty;",
							"        pm.expect(item).to.have.nested.property('response.result.folder.created_by').that.is.a('string').and.is.not.empty;",
							"        pm.expect(item).to.have.nested.property('response.result.folder.created_at').that.is.a('number');",
							"        pm.expect(item).to.have.nested.property('response.result.folder.has_sovereign_permissions').that.is.a('boolean');",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"actions\": [\n    {\n      \"action\": \"GET_FOLDER\",\n      \"payload\": {\n        \"id\": \"{{folder_id}}\",\n        \"share_track_hash\": \"track123\"\n      }\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{FactoryEndpoint}}/v1/drive/{{org_id}}/directory/action",
					"host": [
						"{{FactoryEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"directory",
						"action"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/directory/action | batch operation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"actions\": [\n    {\n      \"action\": \"CREATE_FOLDER\",\n      \"payload\": {\n            \"name\": \"Cool Subfolder\",\n            \"labels\": [],\n            \"disk_id\": \"{{disk_id}}\",\n            \"disk_type\": \"AWS_BUCKET\",\n            \"parent_folder_uuid\": \"{{folder_id}}\"\n      }\n    },\n    {\n      \"action\": \"CREATE_FILE\",\n      \"payload\": {\n            \"name\": \"Cool Subfile\",\n            \"parent_folder_uuid\": \"{{folder_id}}\",\n            \"extension\": \"pdf\",\n            \"labels\": [],\n            \"file_size\": 124434,\n            \"disk_id\": \"{{disk_id}}\",\n            \"disk_type\": \"AWS_BUCKET\"\n        }\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{FactoryEndpoint}}/v1/drive/{{org_id}}/directory/action",
					"host": [
						"{{FactoryEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"directory",
						"action"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/organization/search",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response contains required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist;",
							"    pm.expect(responseData.ok.data).to.exist;",
							"    pm.expect(responseData.ok.data.items).to.exist;",
							"    pm.expect(responseData.ok.data.page_size).to.exist;",
							"    pm.expect(responseData.ok.data.total).to.exist;",
							"    pm.expect(responseData.ok.data.direction).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Response should contain ok and data properties\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('ok').that.is.an('object').that.has.property('data').that.is.an('object');",
							"});",
							"",
							"pm.test(\"Items array should contain objects with required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    const items = responseData.ok.data.items;",
							"",
							"    pm.expect(items).to.be.an('array');",
							"",
							"    items.forEach(item => {",
							"        pm.expect(item).to.be.an('object');",
							"        pm.expect(item).to.have.all.keys('resource_id', 'title', 'preview', 'score', 'category', 'metadata', 'created_at', 'updated_at');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Validate score, created_at, and updated_at are non-negative integers\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist;",
							"    pm.expect(responseData.ok.data).to.exist;",
							"    pm.expect(responseData.ok.data.items).to.be.an('array');",
							"",
							"    responseData.ok.data.items.forEach(item => {",
							"        pm.expect(item.score).to.be.a('number');",
							"        pm.expect(item.created_at).to.be.a('number');",
							"        pm.expect(item.updated_at).to.be.a('number');",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"query\": \"cool\"\n//   \"categories\": [\n//     \"FILES\"\n//   ],\n//   \"page_size\": 50,\n//   \"cursor_up\": \"string\",\n//   \"cursor_down\": \"string\",\n//   \"sort_by\": \"CREATED_AT\",\n//   \"direction\": \"ASC\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/organization/search",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"organization",
						"search"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{vault:bearer-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"string\",\n  \"categories\": [\n    \"FILES\"\n  ],\n  \"page_size\": 50,\n  \"cursor_up\": \"string\",\n  \"cursor_down\": \"string\",\n  \"sort_by\": \"CREATED_AT\",\n  \"direction\": \"ASC\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/organization/search",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"organization",
								"search"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "access-control-allow-origin",
							"value": "*"
						},
						{
							"key": "content-type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "content-length",
							"value": "487"
						},
						{
							"key": "Date",
							"value": "Thu, 24 Jul 2025 10:33:29 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=72"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"items\": [\n                {\n                    \"title\": \"Coming Soon - string\",\n                    \"preview\": \"Search will be available in next 10 days\",\n                    \"score\": 0.9,\n                    \"resource_id\": \"FileID_mock_file_1\",\n                    \"category\": \"FILES\",\n                    \"created_at\": 1753353159096,\n                    \"updated_at\": 1753353199096\n                },\n                {\n                    \"title\": \"Coming Soon - string\",\n                    \"preview\": \"Search will be available in next 10 days\",\n                    \"score\": 0.8,\n                    \"resource_id\": \"FolderID_mock_folder_1\",\n                    \"category\": \"FOLDERS\",\n                    \"created_at\": 1753353149096,\n                    \"updated_at\": 1753353204096\n                }\n            ],\n            \"page_size\": 2,\n            \"total\": 2,\n            \"direction\": \"ASC\"\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/directory/list | sanity check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the schema of the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.all.keys('folders', 'files', 'total_files', 'total_folders', 'cursor', 'breadcrumbs', 'permission_previews');",
							"",
							"    pm.expect(responseData.folders).to.be.an('array');",
							"    pm.expect(responseData.files).to.be.an('array');",
							"    pm.expect(responseData.breadcrumbs).to.be.an('array');",
							"    pm.expect(responseData.permission_previews).to.be.an('array');",
							"",
							"    responseData.breadcrumbs.forEach(breadcrumb => {",
							"        pm.expect(breadcrumb).to.be.an('object');",
							"        pm.expect(breadcrumb).to.have.all.keys('resource_id', 'resource_name', 'visibility_preview');",
							"        pm.expect(breadcrumb.visibility_preview).to.be.an('array');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Breadcrumbs array contains required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.breadcrumbs).to.be.an('array');",
							"",
							"    responseData.breadcrumbs.forEach(breadcrumb => {",
							"        pm.expect(breadcrumb).to.be.an('object');",
							"        pm.expect(breadcrumb).to.have.all.keys('resource_id', 'resource_name', 'visibility_preview');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Permission previews is an array and contains strings\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.have.property('permission_previews').that.is.an('array');",
							"    responseData.permission_previews.forEach(function(item) {",
							"        pm.expect(item).to.be.a('string');",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"folder_id\": \"{{folder_id}}\",\n  \"path\": \"\",\n  \"filters\": \"\",\n  \"page_size\": 50,\n  \"direction\": \"ASC\"\n//   \"cursor\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/directory/list",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"directory",
						"list"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/directory/action | create folder alt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Set env vars",
							"var jsonData = pm.response.json();",
							"const folder = jsonData[0]",
							"if (pm.response.code === 200 && folder.success && folder.response.result.folder.id) {",
							"",
							"    var folder_id = folder.response.result.folder.id;",
							"    if (folder_id) {",
							"        pm.collectionVariables.set(\"alt_folder_id\", folder_id);",
							"        console.log(\"Successfully set alt_folder_id to: \" + folder_id);",
							"    }",
							"} else {",
							"    // Log an error if the request was not successful",
							"    console.error(\"Failed to set alt_folder_id. Status code: \" + pm.response.code);",
							"    console.error(\"Response body:\", pm.response.text());",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"actions\": [\n    {\n      \"action\": \"CREATE_FOLDER\",\n      \"payload\": {\n            // id?: FolderID;\n            \"name\": \"Alt Folder\",\n            \"labels\": [],\n            \"disk_id\": \"{{disk_id}}\",\n            \"disk_type\": \"AWS_BUCKET\",\n            \"parent_folder_uuid\": \"{{root_folder}}\"\n            // expires_at?: number;\n            // file_conflict_resolution?: FileConflictResolutionEnum;\n            // has_sovereign_permissions?: boolean;\n            // shortcut_to?: FolderID;\n            // external_id?: ExternalID;\n            // external_payload?: ExternalPayload;\n            // notes?: string;\n      }\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{FactoryEndpoint}}/v1/drive/{{org_id}}/directory/action",
					"host": [
						"{{FactoryEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"directory",
						"action"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/directory/action | copy file",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response schema is valid\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"",
							"    responseData.forEach(item => {",
							"        pm.expect(item).to.have.all.keys('success', 'request', 'response');",
							"        pm.expect(item.success).to.be.a('boolean');",
							"",
							"        pm.expect(item.request).to.have.all.keys('action', 'payload');",
							"        pm.expect(item.request.action).to.be.a('string');",
							"        pm.expect(item.request.payload).to.have.all.keys('id', 'destination_folder_id');",
							"        pm.expect(item.request.payload.id).to.be.a('string');",
							"        pm.expect(item.request.payload.destination_folder_id).to.be.a('string');",
							"",
							"        pm.expect(item.response).to.have.all.keys('result');",
							"        pm.expect(item.response.result).to.have.all.keys('id', 'name', 'parent_folder_id', 'version_id', 'extension', ",
							"            'full_directory_path', 'created_by', 'created_at', 'disk_id', 'disk_type', ",
							"            'file_size', 'raw_url', 'last_updated_date_ms', 'last_updated_by', 'deleted', ",
							"            'drive_id', 'upload_status', 'expires_at', 'restore_trash_prior_folder_uuid', ",
							"            'has_sovereign_permissions', 'shortcut_to', 'notes', 'external_id', 'external_payload', ",
							"            'clipped_directory_path', 'permission_previews');",
							"",
							"        pm.expect(item.response.result.id).to.be.a('string');",
							"        pm.expect(item.response.result.name).to.be.a('string');",
							"        pm.expect(item.response.result.parent_folder_id).to.be.a('string');",
							"        pm.expect(item.response.result.version_id).to.be.a('string');",
							"        pm.expect(item.response.result.extension).to.be.a('string');",
							"        pm.expect(item.response.result.full_directory_path).to.be.a('string');",
							"        pm.expect(item.response.result.created_by).to.be.a('string');",
							"        pm.expect(item.response.result.created_at).to.be.a('number');",
							"        pm.expect(item.response.result.disk_id).to.be.a('string');",
							"        pm.expect(item.response.result.disk_type).to.be.a('string');",
							"        pm.expect(item.response.result.file_size).to.be.a('number');",
							"        pm.expect(item.response.result.raw_url).to.be.a('string');",
							"        pm.expect(item.response.result.last_updated_date_ms).to.be.a('number');",
							"        pm.expect(item.response.result.last_updated_by).to.be.a('string');",
							"        pm.expect(item.response.result.deleted).to.be.a('number');",
							"        pm.expect(item.response.result.drive_id).to.be.a('string');",
							"        pm.expect(item.response.result.upload_status).to.be.a('string');",
							"        pm.expect(item.response.result.expires_at).to.be.a('number');",
							"        pm.expect(item.response.result.restore_trash_prior_folder_uuid).to.satisfy(function (val) {",
							"            return val === null || typeof val === 'string';",
							"        });",
							"        pm.expect(item.response.result.has_sovereign_permissions).to.be.a('number');",
							"        pm.expect(item.response.result.shortcut_to).to.satisfy(function (val) {",
							"            return val === null || typeof val === 'string';",
							"        });",
							"        pm.expect(item.response.result.notes).to.satisfy(function (val) {",
							"            return val === null || typeof val === 'string';",
							"        });",
							"        pm.expect(item.response.result.external_id).to.satisfy(function (val) {",
							"            return val === null || typeof val === 'string';",
							"        });",
							"        pm.expect(item.response.result.external_payload).to.satisfy(function (val) {",
							"            return val === null || typeof val === 'string';",
							"        });",
							"        pm.expect(item.response.result.clipped_directory_path).to.be.a('string');",
							"        pm.expect(item.response.result.permission_previews).to.be.an('array');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Success field is true\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    responseData.forEach(item => {",
							"        pm.expect(item.success).to.be.true;",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"The request object contains the expected fields - action and payload\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    responseData.forEach(item => {",
							"        pm.expect(item).to.have.property('request');",
							"        pm.expect(item.request).to.have.all.keys('action', 'payload');",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"actions\": [\n    {\n      \"action\": \"COPY_FILE\",\n      \"payload\": {\n            \"id\": \"{{file_id}}\",\n            \"destination_folder_id\": \"{{alt_folder_id}}\"\n            // /** Path to the destination folder */\n            // destination_folder_path?: string;\n            // /** How to handle file name conflicts */\n            // file_conflict_resolution?: FileConflictResolutionEnum;\n        }\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{FactoryEndpoint}}/v1/drive/{{org_id}}/directory/action",
					"host": [
						"{{FactoryEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"directory",
						"action"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/directory/action | copy folder",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test 1: Response status code is 200",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"// Test 2: Response time is less than 200ms",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"// Test 3: Response is an array with exactly one element",
							"pm.test(\"Response is an array with exactly one element\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array').that.has.lengthOf(1);",
							"});",
							"",
							"// Test 4: Validate the structure of the response object",
							"pm.test(\"Validate the structure of the response object\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"",
							"    responseData.forEach(item => {",
							"        pm.expect(item).to.be.an('object').that.includes.keys('success', 'request', 'response');",
							"",
							"        // Test for 'success' field",
							"        pm.expect(item.success).to.be.a('boolean');",
							"",
							"        // Test for 'request' field",
							"        pm.expect(item.request).to.be.an('object').that.includes.keys('action', 'payload');",
							"        pm.expect(item.request.action).to.be.a('string');",
							"        ",
							"        // Test for 'request.payload' field",
							"        pm.expect(item.request.payload).to.be.an('object').that.includes.keys('id', 'destination_folder_id');",
							"        pm.expect(item.request.payload.id).to.be.a('string');",
							"        pm.expect(item.request.payload.destination_folder_id).to.be.a('string');",
							"",
							"        // Test for 'response' field",
							"        pm.expect(item.response).to.be.an('object').that.includes.keys('result');",
							"        ",
							"        // Test for 'response.result' field",
							"        const result = item.response.result;",
							"        pm.expect(result).to.be.an('object');",
							"",
							"        // Main fields",
							"        pm.expect(result.id).to.be.a('string');",
							"        pm.expect(result.name).to.be.a('string');",
							"        pm.expect(result.parent_folder_id).to.be.a('string');",
							"        pm.expect(result.full_directory_path).to.be.a('string');",
							"        pm.expect(result.created_by).to.be.a('string');",
							"        pm.expect(result.created_at).to.be.a('number');",
							"        ",
							"        // Fields with varied types (stringified array vs. array)",
							"        const subfolders = result.subfolder_uuids;",
							"        if (typeof subfolders === 'string') {",
							"            try {",
							"                pm.expect(JSON.parse(subfolders)).to.be.an('array');",
							"            } catch (e) {",
							"                pm.expect.fail('subfolder_uuids field is not a valid JSON string array.');",
							"            }",
							"        } else {",
							"            pm.expect(subfolders).to.be.an('array');",
							"        }",
							"",
							"        const files = result.file_uuids;",
							"        if (typeof files === 'string') {",
							"            try {",
							"                pm.expect(JSON.parse(files)).to.be.an('array');",
							"            } catch (e) {",
							"                pm.expect.fail('file_uuids field is not a valid JSON string array.');",
							"            }",
							"        } else {",
							"            pm.expect(files).to.be.an('array');",
							"        }",
							"",
							"        // Other fields",
							"        pm.expect(result.last_updated_date_ms).to.be.a('number');",
							"        pm.expect(result.last_updated_by).to.be.a('string');",
							"        pm.expect(result.disk_id).to.be.a('string');",
							"        pm.expect(result.disk_type).to.be.a('string');",
							"        pm.expect(result.deleted).to.be.a('number');",
							"        pm.expect(result.expires_at).to.be.a('number');",
							"        pm.expect(result.drive_id).to.be.a('string');",
							"        pm.expect(result.restore_trash_prior_folder_uuid).to.satisfy(value => value === null || typeof value === 'string');",
							"        pm.expect(result.has_sovereign_permissions).to.satisfy(value => value === null || typeof value === 'number');",
							"        pm.expect(result.shortcut_to).to.satisfy(value => value === null || typeof value === 'string');",
							"        pm.expect(result.notes).to.satisfy(value => value === null || typeof value === 'string');",
							"        pm.expect(result.external_id).to.satisfy(value => value === null || typeof value === 'string');",
							"        pm.expect(result.external_payload).to.satisfy(value => value === null || typeof value === 'string');",
							"        pm.expect(result.clipped_directory_path).to.be.a('string');",
							"        pm.expect(result.permission_previews).to.be.an('array');",
							"        pm.expect(result.permission_previews).to.satisfy(arr => arr.every(item => typeof item === 'string'));",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"actions\": [\n    {\n        \"action\": \"COPY_FOLDER\",\n        \"payload\": {\n            \"id\": \"{{folder_id}}\",\n            \"destination_folder_id\": \"{{alt_folder_id}}\"\n            // destination_folder_path?: string;\n            // file_conflict_resolution?: FileConflictResolutionEnum;\n        }\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{FactoryEndpoint}}/v1/drive/{{org_id}}/directory/action",
					"host": [
						"{{FactoryEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"directory",
						"action"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/directory/list | sanity check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the schema of the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.all.keys('folders', 'files', 'total_files', 'total_folders', 'cursor', 'breadcrumbs', 'permission_previews');",
							"",
							"    pm.expect(responseData.folders).to.be.an('array');",
							"    pm.expect(responseData.files).to.be.an('array');",
							"    pm.expect(responseData.breadcrumbs).to.be.an('array');",
							"    pm.expect(responseData.permission_previews).to.be.an('array');",
							"",
							"    responseData.breadcrumbs.forEach(breadcrumb => {",
							"        pm.expect(breadcrumb).to.be.an('object');",
							"        pm.expect(breadcrumb).to.have.all.keys('resource_id', 'resource_name', 'visibility_preview');",
							"        pm.expect(breadcrumb.visibility_preview).to.be.an('array');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Breadcrumbs array contains required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.breadcrumbs).to.be.an('array');",
							"",
							"    responseData.breadcrumbs.forEach(breadcrumb => {",
							"        pm.expect(breadcrumb).to.be.an('object');",
							"        pm.expect(breadcrumb).to.have.all.keys('resource_id', 'resource_name', 'visibility_preview');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Permission previews is an array and contains strings\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.have.property('permission_previews').that.is.an('array');",
							"    responseData.permission_previews.forEach(function(item) {",
							"        pm.expect(item).to.be.a('string');",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"folder_id\": \"{{alt_folder_id}}\",\n  \"path\": \"\",\n  \"filters\": \"\",\n  \"page_size\": 50,\n  \"direction\": \"ASC\"\n//   \"cursor\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/directory/list",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"directory",
						"list"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/directory/action | move folder",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response is an array with exactly one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.has.lengthOf(1);",
							"});",
							"",
							"",
							"pm.test(\"Validate the structure of the response object\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"",
							"    responseData.forEach(item => {",
							"        pm.expect(item).to.be.an('object').that.includes.all.keys('success', 'request', 'response');",
							"        pm.expect(item.success).to.be.a('boolean');",
							"",
							"        pm.expect(item.request).to.be.an('object').that.includes.all.keys('action', 'payload');",
							"        pm.expect(item.request.payload).to.be.an('object').that.includes.all.keys('id', 'destination_folder_id');",
							"",
							"        pm.expect(item.response).to.be.an('object').that.includes.all.keys('result');",
							"        pm.expect(item.response.result).to.be.an('object').that.includes.all.keys('id', 'name', 'parent_folder_id', 'full_directory_path', 'created_by', 'created_at', 'subfolder_uuids', 'file_uuids', 'last_updated_date_ms', 'last_updated_by', 'disk_id', 'disk_type', 'deleted', 'expires_at', 'drive_id', 'restore_trash_prior_folder_uuid', 'has_sovereign_permissions', 'shortcut_to', 'notes', 'external_id', 'external_payload', 'clipped_directory_path', 'permission_previews');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Ensure that the 'id', 'name', and 'parent_folder_id' fields are non-empty strings in the result object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.forEach(item => {",
							"        pm.expect(item).to.have.property('response');",
							"        pm.expect(item.response).to.have.property('result');",
							"        ",
							"        const result = item.response.result;",
							"        ",
							"        pm.expect(result).to.have.property('id').that.is.a('string').and.to.not.be.empty;",
							"        pm.expect(result).to.have.property('name').that.is.a('string').and.to.not.be.empty;",
							"        pm.expect(result).to.have.property('parent_folder_id').that.is.a('string').and.to.not.be.empty;",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"actions\": [\n    {\n      \"action\": \"MOVE_FOLDER\",\n      \"payload\": {\n            \"id\": \"{{folder_id}}\",\n            \"destination_folder_id\": \"{{alt_folder_id}}\"\n            //   destination_folder_path?: string;\n            //   file_conflict_resolution?: FileConflictResolutionEnum;\n        }\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{FactoryEndpoint}}/v1/drive/{{org_id}}/directory/action",
					"host": [
						"{{FactoryEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"directory",
						"action"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/directory/action | move file",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Response is an array with exactly one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.has.lengthOf(1);",
							"});",
							"",
							"pm.test(\"Validate the structure of the response object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    responseData.forEach(item => {",
							"        pm.expect(item).to.have.property('success').that.is.a('boolean');",
							"        pm.expect(item).to.have.property('request').that.is.an('object');",
							"        pm.expect(item.request).to.have.property('action').that.is.a('string');",
							"        pm.expect(item.request).to.have.property('payload').that.is.an('object');",
							"        pm.expect(item.request.payload).to.have.property('id').that.is.a('string');",
							"        pm.expect(item.request.payload).to.have.property('destination_folder_id').that.is.a('string');",
							"        pm.expect(item).to.have.property('response').that.is.an('object');",
							"        pm.expect(item.response).to.have.property('result').that.is.an('object');",
							"        ",
							"        const result = item.response.result;",
							"        pm.expect(result).to.have.property('id').that.is.a('string');",
							"        pm.expect(result).to.have.property('name').that.is.a('string');",
							"        pm.expect(result).to.have.property('parent_folder_id').that.is.a('string');",
							"        pm.expect(result).to.have.property('version_id').that.is.a('string');",
							"        pm.expect(result).to.have.property('extension').that.is.a('string');",
							"        pm.expect(result).to.have.property('full_directory_path').that.is.a('string');",
							"        pm.expect(result).to.have.property('created_by').that.is.a('string');",
							"        pm.expect(result).to.have.property('created_at').that.is.a('number');",
							"        pm.expect(result).to.have.property('disk_id').that.is.a('string');",
							"        pm.expect(result).to.have.property('disk_type').that.is.a('string');",
							"        pm.expect(result).to.have.property('file_size').that.is.a('number');",
							"        pm.expect(result).to.have.property('raw_url').that.is.a('string');",
							"        pm.expect(result).to.have.property('last_updated_date_ms').that.is.a('number');",
							"        pm.expect(result).to.have.property('last_updated_by').that.is.a('string');",
							"        pm.expect(result).to.have.property('deleted').that.is.a('number');",
							"        pm.expect(result).to.have.property('drive_id').that.is.a('string');",
							"        pm.expect(result).to.have.property('upload_status').that.is.a('string');",
							"        pm.expect(result).to.have.property('expires_at').that.is.a('number');",
							"        pm.expect(result).to.have.property('restore_trash_prior_folder_uuid').that.is.a('string');",
							"        pm.expect(result).to.have.property('has_sovereign_permissions').that.is.a('number');",
							"        pm.expect(result).to.have.property('shortcut_to').that.is.null;",
							"        pm.expect(result).to.have.property('notes').that.is.a('string');",
							"        pm.expect(result).to.have.property('external_id').that.is.a('string');",
							"        pm.expect(result).to.have.property('external_payload').that.is.a('string');",
							"        pm.expect(result).to.have.property('clipped_directory_path').that.is.a('string');",
							"        pm.expect(result).to.have.property('permission_previews').that.is.an('array');",
							"    });",
							"});",
							"",
							"pm.test(\"Success must be a boolean value\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    responseData.forEach(item => {",
							"        pm.expect(item.success).to.be.a('boolean');",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"actions\": [\n    {\n      \"action\": \"MOVE_FILE\",\n      \"payload\": {\n            \"id\": \"{{file_id}}\",\n            \"destination_folder_id\": \"{{alt_folder_id}}\"\n            // destination_folder_path?: string;\n            // file_conflict_resolution?: FileConflictResolutionEnum;\n        }\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{FactoryEndpoint}}/v1/drive/{{org_id}}/directory/action",
					"host": [
						"{{FactoryEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"directory",
						"action"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/directory/list | sanity check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"folder_id\": \"{{alt_folder_id}}\",\n  \"path\": \"\",\n  \"filters\": \"\",\n  \"page_size\": 50,\n  \"direction\": \"ASC\"\n//   \"cursor\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/directory/list",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"directory",
						"list"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/directory/action | delete file",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the structure of the response schema\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"",
							"    responseData.forEach(item => {",
							"        pm.expect(item).to.be.an('object').that.includes.all.keys('success', 'request', 'response');",
							"        pm.expect(item.success).to.be.a('boolean');",
							"",
							"        pm.expect(item.request).to.be.an('object').that.includes.all.keys('action', 'payload');",
							"        pm.expect(item.request.action).to.be.a('string');",
							"",
							"        pm.expect(item.request.payload).to.be.an('object').that.includes.all.keys('id', 'permanent');",
							"        pm.expect(item.request.payload.id).to.be.a('string');",
							"        pm.expect(item.request.payload.permanent).to.be.a('boolean');",
							"",
							"        pm.expect(item.response).to.be.an('object').that.includes.all.keys('result');",
							"        ",
							"        pm.expect(item.response.result).to.be.an('object').that.includes.all.keys('file_id', 'path_to_trash');",
							"        pm.expect(item.response.result.file_id).to.be.a('string');",
							"        pm.expect(item.response.result.path_to_trash).to.be.a('string');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Success field is true\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    responseData.forEach(item => {",
							"        pm.expect(item.success).to.be.true;",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Payload contains required fields 'id' and 'permanent'\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.forEach(item => {",
							"        pm.expect(item).to.have.property('request').that.has.property('payload');",
							"        pm.expect(item.request.payload).to.have.all.keys('id', 'permanent');",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"actions\": [\n    {\n      \"action\": \"DELETE_FILE\",\n      \"payload\": {\n            \"id\": \"{{file_id}}\",\n            \"permanent\": false\n        }\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{FactoryEndpoint}}/v1/drive/{{org_id}}/directory/action",
					"host": [
						"{{FactoryEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"directory",
						"action"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/directory/action | delete folder",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has required fields: success, request, and response\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    responseData.forEach(item => {",
							"        pm.expect(item).to.have.all.keys('success', 'request', 'response');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the schema of the response object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"",
							"    responseData.forEach(item => {",
							"        pm.expect(item).to.be.an('object').that.includes.all.keys('success', 'request', 'response');",
							"        ",
							"        pm.expect(item.success).to.be.a('boolean');",
							"",
							"        pm.expect(item.request).to.be.an('object').that.includes.all.keys('action', 'payload');",
							"        pm.expect(item.request.action).to.be.a('string');",
							"        pm.expect(item.request.payload).to.be.an('object').that.includes.all.keys('id', 'permanent');",
							"        pm.expect(item.request.payload.id).to.be.a('string');",
							"        pm.expect(item.request.payload.permanent).to.be.a('boolean');",
							"",
							"        pm.expect(item.response).to.be.an('object').that.includes.all.keys('result');",
							"        pm.expect(item.response.result).to.be.an('object').that.includes.all.keys('folder_id', 'path_to_trash', 'deleted_files', 'deleted_folders');",
							"        ",
							"        pm.expect(item.response.result.folder_id).to.be.a('string');",
							"        pm.expect(item.response.result.path_to_trash).to.be.a('string');",
							"        pm.expect(item.response.result.deleted_files).to.be.an('array');",
							"        pm.expect(item.response.result.deleted_folders).to.be.an('array');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Request action is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    responseData.forEach(item => {",
							"        pm.expect(item.request.action).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Request action should not be empty\");",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"actions\": [\n    {\n      \"action\": \"DELETE_FOLDER\",\n      \"payload\":  {\n            \"id\": \"{{folder_id}}\",\n            \"permanent\": false\n        }\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{FactoryEndpoint}}/v1/drive/{{org_id}}/directory/action",
					"host": [
						"{{FactoryEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"directory",
						"action"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/directory/action | restore trash",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response contains required fields: success, request, and response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    responseData.forEach(item => {",
							"        pm.expect(item).to.have.all.keys('success', 'request', 'response');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Validate the structure of the response schema\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.forEach(item => {",
							"        pm.expect(item).to.be.an('object').that.includes.keys('success', 'request', 'response');",
							"        pm.expect(item.success).to.be.a('boolean');",
							"        ",
							"        pm.expect(item.request).to.be.an('object').that.includes.keys('action', 'payload');",
							"        pm.expect(item.request.action).to.be.a('string');",
							"        pm.expect(item.request.payload).to.be.an('object').that.includes.keys('id');",
							"        pm.expect(item.request.payload.id).to.be.a('string');",
							"",
							"        pm.expect(item.response).to.be.an('object').that.includes.keys('result');",
							"        pm.expect(item.response.result).to.be.an('object').that.includes.keys('restored_folders', 'restored_files');",
							"        ",
							"        pm.expect(item.response.result.restored_folders).to.be.an('array');",
							"        pm.expect(item.response.result.restored_files).to.be.an('array');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Restored files is an array and contains valid strings or is empty\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty; // Check if it's an array and not empty",
							"    responseData.forEach(item => {",
							"        pm.expect(item.response.result.restored_files).to.be.an('array'); // Check if restored_files is an array",
							"        item.response.result.restored_files.forEach(file => {",
							"            pm.expect(file).to.be.a('string'); // Check if each item in restored_files is a string",
							"        });",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"actions\": [\n    {\n      \"action\": \"RESTORE_TRASH\",\n      \"payload\": {\n            \"id\": \"{{file_id}}\"\n            // file_conflict_resolution?: FileConflictResolutionEnum;\n            // restore_to_folder_path?: string;\n        }\n    },\n    {\n      \"action\": \"RESTORE_TRASH\",\n      \"payload\": {\n            \"id\": \"{{folder_id}}\"\n            // file_conflict_resolution?: FileConflictResolutionEnum;\n            // restore_to_folder_path?: string;\n        }\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{FactoryEndpoint}}/v1/drive/{{org_id}}/directory/action",
					"host": [
						"{{FactoryEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"directory",
						"action"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/directory/action | permanent delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"",
							"pm.test(\"Success field should be true\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    responseData.forEach(item => {",
							"        pm.expect(item.success).to.be.true;",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response schema contains required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"",
							"    responseData.forEach(item => {",
							"        pm.expect(item).to.have.property('request').that.is.an('object');",
							"        pm.expect(item.request).to.have.property('action').that.is.a('string');",
							"        ",
							"        pm.expect(item).to.have.property('request').that.is.an('object');",
							"        pm.expect(item.request.payload).to.have.property('id').that.is.a('string');",
							"        pm.expect(item.request.payload).to.have.property('permanent').that.is.a('boolean');",
							"        ",
							"        pm.expect(item).to.have.property('response').that.is.an('object');",
							"        pm.expect(item.response).to.have.property('result').that.is.an('object');",
							"        pm.expect(item.response.result).to.have.property('path_to_trash').that.is.a('string');",
							"    });",
							"});",
							"",
							"",
							"// Test 5: Validate the presence and non-empty status of either 'file_id' or 'folder_id'",
							"pm.test(\"Either file_id or folder_id must be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.forEach(item => {",
							"        const result = item.response.result;",
							"        ",
							"        // Check if either file_id or folder_id exists and is a non-empty string",
							"        const hasFileId = result.hasOwnProperty('file_id') && typeof result.file_id === 'string' && result.file_id.length > 0;",
							"        const hasFolderId = result.hasOwnProperty('folder_id') && typeof result.folder_id === 'string' && result.folder_id.length > 0;",
							"        ",
							"        pm.expect(hasFileId || hasFolderId).to.be.true;",
							"        ",
							"        // Optional: Provide more specific failure messages",
							"        if (!hasFileId && !hasFolderId) {",
							"            throw new Error(\"Neither 'file_id' nor 'folder_id' was found in the response result.\");",
							"        }",
							"        ",
							"        if (hasFileId && !hasFolderId) {",
							"            pm.expect(result.file_id).to.have.lengthOf.at.least(1, \"file_id should not be empty\");",
							"        }",
							"        ",
							"        if (hasFolderId && !hasFileId) {",
							"            pm.expect(result.folder_id).to.have.lengthOf.at.least(1, \"folder_id should not be empty\");",
							"        }",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"actions\": [\n    {\n      \"action\": \"DELETE_FILE\",\n      \"payload\": {\n            \"id\": \"{{file_id}}\",\n            \"permanent\": true\n        }\n    },\n    {\n      \"action\": \"DELETE_FOLDER\",\n      \"payload\": {\n            \"id\": \"{{folder_id}}\",\n            \"permanent\": true\n        }\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{FactoryEndpoint}}/v1/drive/{{org_id}}/directory/action",
					"host": [
						"{{FactoryEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"directory",
						"action"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/directory/action | delete folder alt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response contains required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    responseData.forEach(item => {",
							"        pm.expect(item).to.have.all.keys('success', 'request', 'response');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Validate the schema of the response\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"",
							"    responseData.forEach(item => {",
							"        pm.expect(item).to.be.an('object').that.includes.keys('success', 'request', 'response');",
							"        ",
							"        pm.expect(item.success).to.be.a('boolean');",
							"",
							"        pm.expect(item.request).to.be.an('object').that.includes.keys('action', 'payload');",
							"        pm.expect(item.request.action).to.be.a('string');",
							"",
							"        pm.expect(item.request.payload).to.be.an('object').that.includes.keys('id', 'permanent');",
							"        pm.expect(item.request.payload.id).to.be.a('string');",
							"        pm.expect(item.request.payload.permanent).to.be.a('boolean');",
							"",
							"        pm.expect(item.response).to.be.an('object').that.includes.keys('result');",
							"        ",
							"        pm.expect(item.response.result).to.be.an('object').that.includes.keys('folder_id', 'path_to_trash', 'deleted_files', 'deleted_folders');",
							"        pm.expect(item.response.result.folder_id).to.be.a('string');",
							"        pm.expect(item.response.result.path_to_trash).to.be.a('string');",
							"        pm.expect(item.response.result.deleted_files).to.be.an('array');",
							"        pm.expect(item.response.result.deleted_folders).to.be.an('array');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Deleted files and deleted folders must be arrays\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.forEach(item => {",
							"        pm.expect(item.response.result.deleted_files).to.be.an('array');",
							"        pm.expect(item.response.result.deleted_folders).to.be.an('array');",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"actions\": [\n    {\n      \"action\": \"DELETE_FOLDER\",\n      \"payload\":  {\n            \"id\": \"{{alt_folder_id}}\",\n            \"permanent\": false\n        }\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{FactoryEndpoint}}/v1/drive/{{org_id}}/directory/action",
					"host": [
						"{{FactoryEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"directory",
						"action"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/directory/list | TRASH",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"folder_id\": \"{{trash_folder}}\",\n  \"path\": \"\",\n  \"filters\": \"\",\n  \"page_size\": 50,\n  \"direction\": \"ASC\"\n//   \"cursor\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/directory/list",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"directory",
						"list"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/contacts/create | FRIEND",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Set env vars",
							"var jsonData = pm.response.json();",
							"if (pm.response.code === 200 && jsonData.ok && jsonData.ok.data.id) {",
							"    var data = jsonData.ok.data;",
							"    var contact_user_id = data.id;",
							"    if (contact_user_id) {",
							"        pm.collectionVariables.set(\"foreign_friend_user_id\", contact_user_id);",
							"        console.log(\"Successfully set foreign_friend_user_id to: \" + contact_user_id);",
							"    }",
							"} else {",
							"    // Log an error if the request was not successful",
							"    console.error(\"Failed to retrieve auth_token. Status code: \" + pm.response.code);",
							"    console.error(\"Response body:\", pm.response.text());",
							"}",
							"",
							"",
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      ok: {",
							"        type: \"object\",",
							"        properties: {",
							"          data: {",
							"            type: \"object\",",
							"            properties: {",
							"              id: { type: \"string\" },",
							"              name: { type: \"string\" },",
							"              avatar: { type: \"string\" },",
							"              email: { type: \"string\" },",
							"              notifications_url: { type: \"string\" },",
							"              public_note: { type: \"string\" },",
							"              private_note: { type: \"string\" },",
							"              evm_public_address: { type: \"string\" },",
							"              icp_principal: { type: \"string\" },",
							"              seed_phrase: { type: \"string\" },",
							"              labels: { type: \"array\" },",
							"              created_at: { type: \"integer\" },",
							"              last_online_ms: { type: \"integer\" },",
							"              permission_previews: { type: \"array\" },",
							"              group_previews: {",
							"                type: \"array\",",
							"                items: {",
							"                  type: \"object\",",
							"                  properties: {",
							"                    group_id: { type: \"string\" },",
							"                    invite_id: { type: \"string\" },",
							"                    is_admin: { type: \"boolean\" },",
							"                    group_name: { type: \"string\" },",
							"                    group_avatar: { type: \"string\" }",
							"                  },",
							"                  required: [\"group_id\", \"invite_id\", \"is_admin\", \"group_name\", \"group_avatar\"]",
							"                }",
							"              }",
							"            },",
							"            required: [\"id\", \"name\", \"avatar\", \"email\", \"notifications_url\", \"public_note\", \"private_note\", \"evm_public_address\", \"icp_principal\", \"seed_phrase\", \"labels\", \"created_at\", \"last_online_ms\", \"permission_previews\", \"group_previews\"]",
							"          }",
							"        },",
							"        required: [\"data\"]",
							"      }",
							"    },",
							"    required: [\"ok\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Foreign Friend\",\n  \"icp_principal\": \"24sdy-im4pw-ebc2x-jhpou-bz6uq-lcqo7-oscul-xnygb-d36gq-p6tq4-5ae\",\n  \"public_note\": \"\",\n  \"id\": \"UserID_24sdy-im4pw-ebc2x-jhpou-bz6uq-lcqo7-oscul-xnygb-d36gq-p6tq4-5ae\"\n  //\"private_note\": \"Primary contact for urgent issues\",\n  //\"external_id\": \"emp-1234\",\n  //\"external_payload\": \"{\\\"department\\\": \\\"product\\\", \\\"title\\\": \\\"Senior Project Manager\\\", \\\"location\\\": \\\"Remote\\\"}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/create",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"contacts",
						"create"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Doe\",\n  \"icp_principal\": \"veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n  \"public_note\": \"\",\n  \"is_placeholder\": true,\n  \"id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\"\n  //\"private_note\": \"Primary contact for urgent issues\",\n  //\"external_id\": \"emp-1234\",\n  //\"external_payload\": \"{\\\"department\\\": \\\"product\\\", \\\"title\\\": \\\"Senior Project Manager\\\", \\\"location\\\": \\\"Remote\\\"}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/create",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"contacts",
								"create"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "815"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 19:46:13 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"name\": \"John Doe\",\n            \"avatar\": \"\",\n            \"email\": \"\",\n            \"notifications_url\": \"\",\n            \"public_note\": \"\",\n            \"private_note\": \"\",\n            \"evm_public_address\": \"\",\n            \"icp_principal\": \"veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"seed_phrase\": \"\",\n            \"labels\": [],\n            \"from_placeholder_user_id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"redeem_code\": \"RedeemTokenID_773013f7-9d2f-4daf-8873-daa09cb6cf23\",\n            \"created_at\": 1753299973103,\n            \"last_online_ms\": 0,\n            \"permission_previews\": [\n                \"CREATE\",\n                \"VIEW\",\n                \"EDIT\",\n                \"DELETE\",\n                \"INVITE\"\n            ],\n            \"group_previews\": [\n                {\n                    \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                    \"invite_id\": \"GroupInviteID_930a7fa9-0d9a-4f65-bb10-03db6a572ee6\",\n                    \"is_admin\": false,\n                    \"group_name\": \"Group for All\",\n                    \"group_avatar\": \"\"\n                }\n            ]\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/api-keys/create | FRIEND",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Set env vars",
							"var jsonData = pm.response.json();",
							"if (pm.response.code === 200 && jsonData.ok && jsonData.ok.data.value) {",
							"    var data = jsonData.ok.data;",
							"    var api_key_value = data.value;",
							"    if (api_key_value) {",
							"        pm.collectionVariables.set(\"foreign_friend_api_key\", api_key_value);",
							"        console.log(\"Successfully set foreign_friend_api_key to: \" + api_key_value);",
							"    }",
							"} else {",
							"    // Log an error if the request was not successful",
							"    console.error(\"Failed to retrieve auth_token. Status code: \" + pm.response.code);",
							"    console.error(\"Response body:\", pm.response.text());",
							"}",
							"",
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      ok: {",
							"        type: \"object\",",
							"        properties: {",
							"          data: {",
							"            type: \"object\",",
							"            properties: {",
							"              id: { type: \"string\" },",
							"              value: { type: \"string\" },",
							"              user_id: { type: \"string\" },",
							"              name: { type: \"string\" },",
							"              created_at: { type: \"integer\" },",
							"              is_revoked: { type: \"boolean\" },",
							"              begins_at: { type: \"integer\" },",
							"              expires_at: { type: \"integer\" },",
							"              labels: {",
							"                type: \"array\",",
							"                items: { type: \"string\" }",
							"              }",
							"            },",
							"            required: [\"id\", \"value\", \"user_id\", \"name\", \"created_at\", \"is_revoked\", \"begins_at\", \"expires_at\", \"labels\"]",
							"          }",
							"        },",
							"        required: [\"data\"]",
							"      }",
							"    },",
							"    required: [\"ok\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    // id?: ApiKeyID;\n    /** Name for the API key */\n    \"name\": \"Player 2 ApiKey\",\n    /** ID of the user to create the API key for */\n    \"user_id\": \"{{foreign_friend_user_id}}\"\n    // begins_at?: number;\n    // /** Timestamp when the key expires, -1 for never expires */\n    // expires_at?: number;\n    // /** External identifier */\n    // external_id?: string;\n    // /** Additional data for external systems */\n    // external_payload?: string;\n    // private_note?: string;\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/api_keys/create",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"api_keys",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/directory/action | batch create file folder",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Set env vars",
							"var jsonData = pm.response.json();",
							"const file = jsonData[0]",
							"if (pm.response.code === 200 && file.success && file.response.result.file.id) {",
							"",
							"    var file_id = file.response.result.file.id;",
							"    if (file_id) {",
							"        pm.collectionVariables.set(\"file_id\", file_id);",
							"        console.log(\"Successfully set file_id to: \" + file_id);",
							"    }",
							"} else {",
							"    // Log an error if the request was not successful",
							"    console.error(\"Failed to set file_id. Status code: \" + pm.response.code);",
							"    console.error(\"Response body:\", pm.response.text());",
							"}",
							"",
							"const folder = jsonData[1]",
							"if (pm.response.code === 200 && folder.success && folder.response.result.folder.id) {",
							"",
							"    var folder_id = folder.response.result.folder.id;",
							"    if (folder_id) {",
							"        pm.collectionVariables.set(\"folder_id\", folder_id);",
							"        console.log(\"Successfully set folder_id to: \" + folder_id);",
							"    }",
							"} else {",
							"    // Log an error if the request was not successful",
							"    console.error(\"Failed to set folder_id. Status code: \" + pm.response.code);",
							"    console.error(\"Response body:\", pm.response.text());",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"actions\": [\n    {\n      \"action\": \"CREATE_FILE\",\n      \"payload\": {\n            \"name\": \"Shareable File\",\n            \"parent_folder_uuid\": \"{{root_folder}}\",\n            \"extension\": \"pdf\",\n            \"labels\": [],\n            \"file_size\": 124434,\n            \"disk_id\": \"{{disk_id}}\",\n            \"disk_type\": \"AWS_BUCKET\"\n        }\n    },\n    {\n      \"action\": \"CREATE_FOLDER\",\n      \"payload\": {\n            \"name\": \"Shareable Folder\",\n            \"labels\": [],\n            \"disk_id\": \"{{disk_id}}\",\n            \"disk_type\": \"AWS_BUCKET\",\n            \"parent_folder_uuid\": \"{{root_folder}}\"\n      }\n    }\n    \n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{FactoryEndpoint}}/v1/drive/{{org_id}}/directory/action",
					"host": [
						"{{FactoryEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"directory",
						"action"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/permissions/directory/create | permit file",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Set env vars",
							"var jsonData = pm.response.json();",
							"if (pm.response.code === 200 && jsonData.ok && jsonData.ok.data.permission) {",
							"    var data = jsonData.ok.data;",
							"    var permission = data.permission;",
							"    if (permission && permission.id) {",
							"        pm.collectionVariables.set(\"directory_permit_id\", permission.id);",
							"        console.log(\"Successfully set directory_permit_id to: \" + permission.id);",
							"    }",
							"} else {",
							"    // Log an error if the request was not successful",
							"    console.error(\"Failed to retrieve directory_permit_id. Status code: \" + pm.response.code);",
							"    console.error(\"Response body:\", pm.response.text());",
							"}",
							"",
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      ok: {",
							"        type: \"object\",",
							"        properties: {",
							"          data: {",
							"            type: \"object\",",
							"            properties: {",
							"              permission: {",
							"                type: \"object\",",
							"                properties: {",
							"                  id: { type: \"string\" },",
							"                  resource_id: { type: \"string\" },",
							"                  resource_path: { type: \"string\" },",
							"                  granted_to: { type: \"string\" },",
							"                  granted_by: { type: \"string\" },",
							"                  permission_types: {",
							"                    type: \"array\",",
							"                    items: { type: \"string\" }",
							"                  },",
							"                  begin_date_ms: { type: \"integer\" },",
							"                  expiry_date_ms: { type: \"integer\" },",
							"                  inheritable: { type: \"boolean\" },",
							"                  note: { type: \"string\" },",
							"                  created_at: { type: \"integer\" },",
							"                  last_modified_at: { type: \"integer\" },",
							"                  from_placeholder_grantee: { type: [\"null\", \"string\"] },",
							"                  labels: {",
							"                    type: \"array\",",
							"                    items: { type: \"string\" }",
							"                  },",
							"                  redeem_code: { type: [\"null\", \"string\"] },",
							"                  resource_name: { type: \"string\" },",
							"                  grantee_name: { type: \"string\" },",
							"                  grantee_avatar: { type: \"string\" },",
							"                  granter_name: { type: \"string\" },",
							"                  permission_previews: {",
							"                    type: \"array\",",
							"                    items: { type: \"string\" }",
							"                  }",
							"                },",
							"                required: [\"id\", \"resource_id\", \"granted_to\", \"granted_by\", \"permission_types\", \"begin_date_ms\", \"expiry_date_ms\", \"inheritable\", \"created_at\", \"last_modified_at\"]",
							"              }",
							"            },",
							"            required: [\"permission\"]",
							"          }",
							"        },",
							"        required: [\"data\"]",
							"      }",
							"    },",
							"    required: [\"ok\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n//   id?: DirectoryPermissionID;\n  \"resource_id\": \"{{file_id}}\",\n  \"granted_to\": \"{{foreign_friend_user_id}}\",\n  \"permission_types\": [\n    \"VIEW\",\n    \"EDIT\",\n    \"DELETE\",\n    \"UPLOAD\",\n    \"INVITE\"\n  ],\n  \"inheritable\": false\n//   begin_date_ms?: number;\n//   expiry_date_ms?: number;\n//   note?: string;\n//   metadata?: PermissionMetadata;\n//   external_id?: string;\n//   external_payload?: string;\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/directory/create",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"permissions",
						"directory",
						"create"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"resource_id\": \"FolderID_f9765f26-96b1-4359-aa40-73b84985d0ba\",\n  \"permission_types\": [\n    \"VIEW\",\n    \"EDIT\",\n    \"DELETE\",\n    \"UPLOAD\",\n    \"INVITE\"\n  ],\n  \"begin_date_ms\": 1753297637513,\n  \"expiry_date_ms\": -1,\n  \"inheritable\": true,\n  \"note\": \"\",\n  \"external_id\": \"\",\n  \"external_payload\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/directory/create",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"permissions",
								"directory",
								"create"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "843"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 20:27:31 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"permission\": {\n                \"id\": \"DirectoryPermissionID_5d444a40-bbbe-40d1-83ca-48d011c8caab\",\n                \"resource_id\": \"FolderID_f9765f26-96b1-4359-aa40-73b84985d0ba\",\n                \"resource_path\": \"DiskID_0186f372-c039-4c88-bf53-e1084a83677d::\",\n                \"granted_to\": \"PlaceholderPermissionGranteeID_cb1dcfdf-2f4d-40f1-a3e6-9fa0d9d13449\",\n                \"granted_by\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n                \"permission_types\": [\n                    \"DELETE\",\n                    \"EDIT\",\n                    \"INVITE\",\n                    \"UPLOAD\",\n                    \"VIEW\"\n                ],\n                \"begin_date_ms\": 1753297637513,\n                \"expiry_date_ms\": -1,\n                \"inheritable\": true,\n                \"note\": \"\",\n                \"created_at\": 1753302451644,\n                \"last_modified_at\": 1753302451644,\n                \"from_placeholder_grantee\": null,\n                \"labels\": [],\n                \"redeem_code\": \"RedeemTokenID_e1eeb742-0c46-4012-b698-ee435d8776ba\",\n                \"resource_name\": \"\",\n                \"grantee_name\": \"Awaiting Anon\",\n                \"granter_name\": \"Owner\",\n                \"permission_previews\": [\n                    \"CREATE\",\n                    \"VIEW\",\n                    \"EDIT\",\n                    \"DELETE\",\n                    \"INVITE\"\n                ]\n            }\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/permissions/directory/create | permit folder",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Set env vars",
							"var jsonData = pm.response.json();",
							"if (pm.response.code === 200 && jsonData.ok && jsonData.ok.data.permission) {",
							"    var data = jsonData.ok.data;",
							"    var permission = data.permission;",
							"    if (permission && permission.id) {",
							"        pm.collectionVariables.set(\"directory_permit_id\", permission.id);",
							"        console.log(\"Successfully set directory_permit_id to: \" + permission.id);",
							"    }",
							"} else {",
							"    // Log an error if the request was not successful",
							"    console.error(\"Failed to retrieve directory_permit_id. Status code: \" + pm.response.code);",
							"    console.error(\"Response body:\", pm.response.text());",
							"}",
							"",
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      ok: {",
							"        type: \"object\",",
							"        properties: {",
							"          data: {",
							"            type: \"object\",",
							"            properties: {",
							"              permission: {",
							"                type: \"object\",",
							"                properties: {",
							"                  id: { type: \"string\" },",
							"                  resource_id: { type: \"string\" },",
							"                  resource_path: { type: \"string\" },",
							"                  granted_to: { type: \"string\" },",
							"                  granted_by: { type: \"string\" },",
							"                  permission_types: {",
							"                    type: \"array\",",
							"                    items: { type: \"string\" }",
							"                  },",
							"                  begin_date_ms: { type: \"integer\" },",
							"                  expiry_date_ms: { type: \"integer\" },",
							"                  inheritable: { type: \"boolean\" },",
							"                  note: { type: \"string\" },",
							"                  created_at: { type: \"integer\" },",
							"                  last_modified_at: { type: \"integer\" },",
							"                  from_placeholder_grantee: { type: [\"null\", \"string\"] },",
							"                  labels: {",
							"                    type: \"array\",",
							"                    items: { type: \"string\" }",
							"                  },",
							"                  redeem_code: { type: [\"null\", \"string\"] },",
							"                  resource_name: { type: \"string\" },",
							"                  grantee_name: { type: \"string\" },",
							"                  grantee_avatar: { type: \"string\" },",
							"                  granter_name: { type: \"string\" },",
							"                  permission_previews: {",
							"                    type: \"array\",",
							"                    items: { type: \"string\" }",
							"                  }",
							"                },",
							"                required: [\"id\", \"resource_id\", \"resource_path\", \"granted_to\", \"granted_by\", \"permission_types\", \"begin_date_ms\", \"expiry_date_ms\", \"inheritable\", \"created_at\", \"last_modified_at\"]",
							"              }",
							"            },",
							"            required: [\"permission\"]",
							"          }",
							"        },",
							"        required: [\"data\"]",
							"      }",
							"    },",
							"    required: [\"ok\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n//   id?: DirectoryPermissionID;\n  \"resource_id\": \"{{folder_id}}\",\n  \"granted_to\": \"{{foreign_friend_user_id}}\",\n  \"permission_types\": [\n    \"VIEW\",\n    \"EDIT\",\n    \"DELETE\",\n    \"UPLOAD\",\n    \"INVITE\"\n  ],\n  \"inheritable\": false\n//   begin_date_ms?: number;\n//   expiry_date_ms?: number;\n//   note?: string;\n//   metadata?: PermissionMetadata;\n//   external_id?: string;\n//   external_payload?: string;\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/directory/create",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"permissions",
						"directory",
						"create"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"resource_id\": \"FolderID_f9765f26-96b1-4359-aa40-73b84985d0ba\",\n  \"permission_types\": [\n    \"VIEW\",\n    \"EDIT\",\n    \"DELETE\",\n    \"UPLOAD\",\n    \"INVITE\"\n  ],\n  \"begin_date_ms\": 1753297637513,\n  \"expiry_date_ms\": -1,\n  \"inheritable\": true,\n  \"note\": \"\",\n  \"external_id\": \"\",\n  \"external_payload\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/directory/create",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"permissions",
								"directory",
								"create"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "843"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 20:27:31 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"permission\": {\n                \"id\": \"DirectoryPermissionID_5d444a40-bbbe-40d1-83ca-48d011c8caab\",\n                \"resource_id\": \"FolderID_f9765f26-96b1-4359-aa40-73b84985d0ba\",\n                \"resource_path\": \"DiskID_0186f372-c039-4c88-bf53-e1084a83677d::\",\n                \"granted_to\": \"PlaceholderPermissionGranteeID_cb1dcfdf-2f4d-40f1-a3e6-9fa0d9d13449\",\n                \"granted_by\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n                \"permission_types\": [\n                    \"DELETE\",\n                    \"EDIT\",\n                    \"INVITE\",\n                    \"UPLOAD\",\n                    \"VIEW\"\n                ],\n                \"begin_date_ms\": 1753297637513,\n                \"expiry_date_ms\": -1,\n                \"inheritable\": true,\n                \"note\": \"\",\n                \"created_at\": 1753302451644,\n                \"last_modified_at\": 1753302451644,\n                \"from_placeholder_grantee\": null,\n                \"labels\": [],\n                \"redeem_code\": \"RedeemTokenID_e1eeb742-0c46-4012-b698-ee435d8776ba\",\n                \"resource_name\": \"\",\n                \"grantee_name\": \"Awaiting Anon\",\n                \"granter_name\": \"Owner\",\n                \"permission_previews\": [\n                    \"CREATE\",\n                    \"VIEW\",\n                    \"EDIT\",\n                    \"DELETE\",\n                    \"INVITE\"\n                ]\n            }\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/directory/list | permitted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the schema of the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.all.keys('folders', 'files', 'total_files', 'total_folders', 'cursor', 'breadcrumbs', 'permission_previews');",
							"",
							"    pm.expect(responseData.folders).to.be.an('array');",
							"    pm.expect(responseData.files).to.be.an('array');",
							"    pm.expect(responseData.breadcrumbs).to.be.an('array');",
							"    pm.expect(responseData.permission_previews).to.be.an('array');",
							"",
							"    responseData.breadcrumbs.forEach(breadcrumb => {",
							"        pm.expect(breadcrumb).to.be.an('object');",
							"        pm.expect(breadcrumb).to.have.all.keys('resource_id', 'resource_name', 'visibility_preview');",
							"        pm.expect(breadcrumb.visibility_preview).to.be.an('array');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Breadcrumbs array contains required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.breadcrumbs).to.be.an('array');",
							"",
							"    responseData.breadcrumbs.forEach(breadcrumb => {",
							"        pm.expect(breadcrumb).to.be.an('object');",
							"        pm.expect(breadcrumb).to.have.all.keys('resource_id', 'resource_name', 'visibility_preview');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Permission previews is an array and contains strings\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.have.property('permission_previews').that.is.an('array');",
							"    responseData.permission_previews.forEach(function(item) {",
							"        pm.expect(item).to.be.a('string');",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{foreign_friend_api_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"folder_id\": \"{{folder_id}}\",\n  \"path\": \"\",\n  \"filters\": \"\",\n  \"page_size\": 50,\n  \"direction\": \"ASC\"\n//   \"cursor\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/directory/list",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"directory",
						"list"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/directory/action | permitted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the structure of the response object\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.forEach(item => {",
							"        pm.expect(item).to.be.an('object').that.includes.all.keys('success', 'request', 'response');",
							"        ",
							"        pm.expect(item.success).to.be.a('boolean');",
							"",
							"        pm.expect(item.request).to.be.an('object').that.includes.all.keys('action', 'payload');",
							"        pm.expect(item.request.action).to.be.a('string');",
							"        ",
							"        pm.expect(item.request.payload).to.be.an('object').that.includes.all.keys('id', 'name');",
							"        pm.expect(item.request.payload.id).to.be.a('string');",
							"        pm.expect(item.request.payload.name).to.be.a('string');",
							"",
							"        pm.expect(item.response).to.be.an('object').that.includes.all.keys('result');",
							"        pm.expect(item.response.result).to.be.an('object').that.includes.all.keys('folder');",
							"        ",
							"        pm.expect(item.response.result.folder).to.be.an('object').that.includes.all.keys('id', 'name', 'parent_folder_uuid', 'full_directory_path', 'created_by', 'created_at', 'disk_id', 'disk_type', 'deleted', 'expires_at', 'drive_id', 'restore_trash_prior_folder_uuid', 'has_sovereign_permissions', 'shortcut_to', 'notes', 'external_id', 'external_payload', 'subfolder_uuids', 'file_uuids', 'labels', 'last_updated_date_ms', 'last_updated_by', 'clipped_directory_path', 'permission_previews');",
							"        ",
							"        pm.expect(item.response.result.folder.id).to.be.a('string');",
							"        pm.expect(item.response.result.folder.name).to.be.a('string');",
							"        pm.expect(item.response.result.folder.parent_folder_uuid).to.be.a('string');",
							"        pm.expect(item.response.result.folder.full_directory_path).to.be.a('string');",
							"        pm.expect(item.response.result.folder.created_by).to.be.a('string');",
							"        pm.expect(item.response.result.folder.created_at).to.be.a('number');",
							"        pm.expect(item.response.result.folder.disk_id).to.be.a('string');",
							"        pm.expect(item.response.result.folder.disk_type).to.be.a('string');",
							"        pm.expect(item.response.result.folder.deleted).to.be.a('boolean');",
							"        pm.expect(item.response.result.folder.expires_at).to.be.a('number');",
							"        pm.expect(item.response.result.folder.drive_id).to.be.a('string');",
							"        pm.expect(item.response.result.folder.restore_trash_prior_folder_uuid).to.satisfy(value => value === null || typeof value === 'string');",
							"        pm.expect(item.response.result.folder.has_sovereign_permissions).to.be.a('boolean');",
							"        pm.expect(item.response.result.folder.shortcut_to).to.satisfy(value => value === null || typeof value === 'string');",
							"        pm.expect(item.response.result.folder.notes).to.satisfy(value => value === null || typeof value === 'string');",
							"        pm.expect(item.response.result.folder.external_id).to.satisfy(value => value === null || typeof value === 'string');",
							"        pm.expect(item.response.result.folder.external_payload).to.satisfy(value => value === null || typeof value === 'string');",
							"        pm.expect(item.response.result.folder.subfolder_uuids).to.be.a('string');",
							"        pm.expect(item.response.result.folder.file_uuids).to.be.a('string');",
							"        pm.expect(item.response.result.folder.labels).to.be.an('array');",
							"        pm.expect(item.response.result.folder.last_updated_date_ms).to.be.a('number');",
							"        pm.expect(item.response.result.folder.last_updated_by).to.be.a('string');",
							"        pm.expect(item.response.result.folder.clipped_directory_path).to.be.a('string');",
							"        pm.expect(item.response.result.folder.permission_previews).to.be.an('array');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Success should be true\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    pm.expect(responseData[0].success).to.be.true;",
							"});",
							"",
							"",
							"pm.test(\"Request contains expected fields: action and payload\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    responseData.forEach(item => {",
							"        pm.expect(item.request).to.exist;",
							"        pm.expect(item.request).to.have.all.keys('action', 'payload');",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"actions\": [\n    {\n      \"action\": \"UPDATE_FOLDER\",\n      \"payload\": {\n            \"id\": \"{{folder_id}}\",\n            \"name\": \"Allowed to Edit Name - Investigation\"\n            // labels?: LabelValue[];\n            // expires_at?: number;\n            // external_id?: ExternalID;\n            // external_payload?: ExternalPayload;\n            // notes?: string;\n            // shortcut_to?: FolderID;\n        }\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{FactoryEndpoint}}/v1/drive/{{org_id}}/directory/action",
					"host": [
						"{{FactoryEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"directory",
						"action"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/directory/list | SHARED WITH ME",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the schema of the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.all.keys('folders', 'files', 'total_files', 'total_folders', 'cursor', 'breadcrumbs', 'permission_previews');",
							"",
							"    pm.expect(responseData.folders).to.be.an('array');",
							"    pm.expect(responseData.files).to.be.an('array');",
							"    pm.expect(responseData.breadcrumbs).to.be.an('array');",
							"    pm.expect(responseData.permission_previews).to.be.an('array');",
							"",
							"    responseData.breadcrumbs.forEach(breadcrumb => {",
							"        pm.expect(breadcrumb).to.be.an('object');",
							"        pm.expect(breadcrumb).to.have.all.keys('resource_id', 'resource_name', 'visibility_preview');",
							"        pm.expect(breadcrumb.visibility_preview).to.be.an('array');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Breadcrumbs array contains required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.breadcrumbs).to.be.an('array');",
							"",
							"    responseData.breadcrumbs.forEach(breadcrumb => {",
							"        pm.expect(breadcrumb).to.be.an('object');",
							"        pm.expect(breadcrumb).to.have.all.keys('resource_id', 'resource_name', 'visibility_preview');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Permission previews is an array and contains strings\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.have.property('permission_previews').that.is.an('array');",
							"    responseData.permission_previews.forEach(function(item) {",
							"        pm.expect(item).to.be.a('string');",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{foreign_friend_api_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"disk_id\": \"{{disk_id}}\",\n//   \"path\": \"\",\n  \"filters\": \"\",\n  \"page_size\": 50,\n  \"direction\": \"ASC\"\n//   \"cursor\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/directory/list",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"directory",
						"list"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/permissions/directory/update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response schema contains the expected structure for permission data\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object').that.has.property('ok');",
							"    pm.expect(responseData.ok).to.have.property('data').that.is.an('object');",
							"    pm.expect(responseData.ok.data).to.have.property('permission').that.is.an('object');",
							"",
							"    const permission = responseData.ok.data.permission;",
							"    pm.expect(permission).to.include.all.keys('id', 'resource_id', 'resource_path', 'granted_to', 'granted_by', 'permission_types', 'begin_date_ms', 'expiry_date_ms', 'inheritable', 'note', 'created_at', 'last_modified_at', 'from_placeholder_grantee', 'labels', 'redeem_code', 'resource_name', 'grantee_name', 'granter_name', 'permission_previews');",
							"",
							"    pm.expect(permission.id).to.be.a('string');",
							"    pm.expect(permission.resource_id).to.be.a('string');",
							"    pm.expect(permission.resource_path).to.be.a('string');",
							"    pm.expect(permission.granted_to).to.be.a('string');",
							"    pm.expect(permission.granted_by).to.be.a('string');",
							"    pm.expect(permission.permission_types).to.be.an('array');",
							"    pm.expect(permission.begin_date_ms).to.be.a('number');",
							"    pm.expect(permission.expiry_date_ms).to.be.a('number');",
							"    pm.expect(permission.inheritable).to.be.a('boolean');",
							"    pm.expect(permission.note).to.be.a('string');",
							"    pm.expect(permission.created_at).to.be.a('number');",
							"    pm.expect(permission.last_modified_at).to.be.a('number');",
							"    pm.expect(permission.from_placeholder_grantee).to.satisfy(value => value === null || typeof value === 'object');",
							"    pm.expect(permission.labels).to.be.an('array');",
							"    pm.expect(permission.redeem_code).to.satisfy(value => value === null || typeof value === 'string');",
							"    pm.expect(permission.resource_name).to.be.a('string');",
							"    pm.expect(permission.grantee_name).to.be.a('string');",
							"    pm.expect(permission.granter_name).to.be.a('string');",
							"    pm.expect(permission.permission_previews).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Validate that 'granted_to' and 'granted_by' are non-empty strings\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok.data.permission.granted_to).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"    pm.expect(responseData.ok.data.permission.granted_by).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Ensure permission_types is an array containing valid permission type strings\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist;",
							"    pm.expect(responseData.ok.data).to.exist;",
							"    pm.expect(responseData.ok.data.permission).to.exist;",
							"    ",
							"    const permissionTypes = responseData.ok.data.permission.permission_types;",
							"    pm.expect(permissionTypes).to.be.an('array');",
							"    ",
							"    permissionTypes.forEach(function(type) {",
							"        pm.expect(type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Each permission type should not be empty\");",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{directory_permit_id}}\",\n  \"permission_types\": [\n    // \"VIEW\"\n    // \"EDIT\"\n    \"DELETE\"\n    // \"UPLOAD\",\n    // \"INVITE\"\n  ]\n//   begin_date_ms?: number;\n//   expiry_date_ms?: number;\n//   inheritable?: boolean;\n//   note?: string;\n//   metadata?: PermissionMetadata;\n//   external_id?: string;\n//   external_payload?: string;\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/directory/update",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"permissions",
						"directory",
						"update"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"DirectoryPermissionID_9b695faf-e10f-4528-ac16-621f0985d6d8\",\n  \"permission_types\": [\n    \"VIEW\",\n    \"EDIT\",\n    \"DELETE\",\n    \"UPLOAD\",\n    \"INVITE\"\n  ],\n  \"begin_date_ms\": 1753294622401,\n  \"external_id\": \"\",\n  \"external_payload\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/directory/update",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"permissions",
								"directory",
								"update"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "870"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 20:24:21 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"permission\": {\n                \"id\": \"DirectoryPermissionID_9b695faf-e10f-4528-ac16-621f0985d6d8\",\n                \"resource_id\": \"FolderID_f9765f26-96b1-4359-aa40-73b84985d0ba\",\n                \"resource_path\": \"DiskID_0186f372-c039-4c88-bf53-e1084a83677d::\",\n                \"granted_to\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae\",\n                \"granted_by\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n                \"permission_types\": [\n                    \"DELETE\",\n                    \"EDIT\",\n                    \"INVITE\",\n                    \"UPLOAD\",\n                    \"VIEW\"\n                ],\n                \"begin_date_ms\": 1753294622401,\n                \"expiry_date_ms\": -1,\n                \"inheritable\": true,\n                \"note\": \"\",\n                \"created_at\": 1753302177545,\n                \"last_modified_at\": 1753302261492,\n                \"from_placeholder_grantee\": null,\n                \"labels\": [],\n                \"redeem_code\": null,\n                \"resource_name\": \"\",\n                \"grantee_name\": \"Unknown User (UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-nae)\",\n                \"granter_name\": \"Owner\",\n                \"permission_previews\": [\n                    \"CREATE\",\n                    \"VIEW\",\n                    \"EDIT\",\n                    \"DELETE\",\n                    \"INVITE\"\n                ]\n            }\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "/drive/:org_id/permissions/directory/get/:SystemDirectoryID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response schema contains the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.ok.data).to.exist.and.to.be.an('object');",
							"    ",
							"    const requiredFields = [",
							"        'id',",
							"        'resource_id',",
							"        'resource_path',",
							"        'granted_to',",
							"        'granted_by',",
							"        'permission_types',",
							"        'begin_date_ms',",
							"        'expiry_date_ms',",
							"        'inheritable',",
							"        'note',",
							"        'created_at',",
							"        'last_modified_at'",
							"    ];",
							"",
							"    requiredFields.forEach(field => {",
							"        pm.expect(responseData.ok.data).to.have.property(field);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Permission types is an array and contains valid strings\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok.data.permission_types).to.be.an('array').that.is.not.empty;",
							"",
							"    responseData.ok.data.permission_types.forEach(function(permissionType) {",
							"        pm.expect(permissionType).to.be.a('string').that.is.not.empty;",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"The begin_date_ms and expiry_date_ms must be non-negative integers\", function () {",
							"    const responseData = pm.response.json();",
							"    const permissionsData = responseData.ok.data;",
							"",
							"    pm.expect(permissionsData).to.be.an('object');",
							"    pm.expect(permissionsData.begin_date_ms).to.be.a('number');",
							"    pm.expect(permissionsData.expiry_date_ms).to.be.a('number');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/directory/get/{{directory_permit_id}}",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"permissions",
						"directory",
						"get",
						"{{directory_permit_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/directory/action | no permit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 403\", function () {",
							"    pm.expect(pm.response.code).to.eql(401);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response contains an error object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('err').that.is.an('object');",
							"});",
							"",
							"",
							"pm.test(\"Error object has required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.err).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.err).to.have.all.keys('code', 'message');",
							"});",
							"",
							"",
							"pm.test(\"Error code must be a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.err).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.err.code).to.exist.and.to.be.a('number').and.to.be.at.least(0);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{foreign_friend_user_id}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"actions\": [\n    {\n      \"action\": \"UPDATE_FOLDER\",\n      \"payload\": {\n            \"id\": \"{{folder_id}}\",\n            \"name\": \"Not Allowed to Edit Name - Investigation\"\n            // labels?: LabelValue[];\n            // expires_at?: number;\n            // external_id?: ExternalID;\n            // external_payload?: ExternalPayload;\n            // notes?: string;\n            // shortcut_to?: FolderID;\n        }\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{FactoryEndpoint}}/v1/drive/{{org_id}}/directory/action",
					"host": [
						"{{FactoryEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"directory",
						"action"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/permissions/directory/list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response should contain required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist;",
							"    pm.expect(responseData.ok.data).to.exist;",
							"    pm.expect(responseData.ok.data).to.include.keys('items', 'page_size', 'total', 'cursor');",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Response should be a valid object and contain required fields in items\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist;",
							"    pm.expect(responseData.ok.data).to.exist;",
							"    pm.expect(responseData.ok.data.items).to.exist.and.to.be.an('array');",
							"",
							"    responseData.ok.data.items.forEach(item => {",
							"        pm.expect(item).to.be.an('object');",
							"        pm.expect(item).to.have.all.keys('id', 'resource_id', 'resource_path', 'granted_to', 'granted_by', 'permission_types', 'begin_date_ms', 'expiry_date_ms', 'inheritable', 'note', 'created_at', 'last_modified_at', 'from_placeholder_grantee', 'labels', 'redeem_code', 'resource_name', 'grantee_name', 'grantee_avatar', 'granter_name', 'permission_previews');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Ensure permission_types and permission_previews are arrays containing valid strings\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.ok).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.ok.data).to.exist.and.to.be.an('object');",
							"    ",
							"    const items = responseData.ok.data.items;",
							"    pm.expect(items).to.be.an('array');",
							"",
							"    items.forEach(item => {",
							"        pm.expect(item.permission_types).to.be.an('array').and.to.satisfy(arr => arr.every(el => typeof el === 'string' && el.length > 0), \"All elements in permission_types should be non-empty strings\");",
							"        pm.expect(item.permission_previews).to.be.an('array').and.to.satisfy(arr => arr.every(el => typeof el === 'string' && el.length > 0), \"All elements in permission_previews should be non-empty strings\");",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"filters\": {\n    \"resource_id\": \"{{folder_id}}\"\n  }\n//   page_size?: number;\n//   direction?: SortDirection;\n//   cursor?: string;\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/directory/list",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"permissions",
						"directory",
						"list"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"resource_id\": \"DirectoryPermissionID_9b695faf-e10f-4528-ac16-621f0985d6d8\",\n  \"grantee_id\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/directory/check",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"permissions",
								"directory",
								"check"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "244"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 20:25:11 GMT"
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date",
							"domain": "",
							"path": ""
						}
					],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"resource_id\": \"DirectoryPermissionID_9b695faf-e10f-4528-ac16-621f0985d6d8\",\n            \"grantee_id\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n            \"permissions\": [\n                \"VIEW\",\n                \"EDIT\",\n                \"UPLOAD\",\n                \"DELETE\",\n                \"INVITE\",\n                \"MANAGE\"\n            ]\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/permissions/directory/check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response schema matches the expected format\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.ok.data).to.exist.and.to.be.an('object');",
							"    ",
							"    pm.expect(responseData.ok.data).to.have.all.keys('resource_id', 'grantee_id', 'permissions');",
							"    pm.expect(responseData.ok.data.resource_id).to.be.a('string');",
							"    pm.expect(responseData.ok.data.grantee_id).to.be.a('string');",
							"    pm.expect(responseData.ok.data.permissions).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Validate resource_id and grantee_id are non-empty strings\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist;",
							"    pm.expect(responseData.ok.data).to.exist;",
							"",
							"    const { resource_id, grantee_id } = responseData.ok.data;",
							"",
							"    pm.expect(resource_id).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"resource_id should be a non-empty string\");",
							"    pm.expect(grantee_id).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"grantee_id should be a non-empty string\");",
							"});",
							"",
							"",
							"pm.test(\"Permissions is an array and contains at least one valid permission string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist;",
							"    pm.expect(responseData.ok.data).to.exist;",
							"    pm.expect(responseData.ok.data.permissions).to.be.an('array').that.is.not.empty;",
							"",
							"    responseData.ok.data.permissions.forEach(permission => {",
							"        pm.expect(permission).to.be.a('string').that.is.not.empty;",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"resource_id\": \"{{folder_id}}\",\n  \"grantee_id\": \"{{foreign_friend_user_id}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/directory/check",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"permissions",
						"directory",
						"check"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"resource_id\": \"DirectoryPermissionID_9b695faf-e10f-4528-ac16-621f0985d6d8\",\n  \"grantee_id\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/directory/check",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"permissions",
								"directory",
								"check"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "244"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 20:25:11 GMT"
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date",
							"domain": "",
							"path": ""
						}
					],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"resource_id\": \"DirectoryPermissionID_9b695faf-e10f-4528-ac16-621f0985d6d8\",\n            \"grantee_id\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n            \"permissions\": [\n                \"VIEW\",\n                \"EDIT\",\n                \"UPLOAD\",\n                \"DELETE\",\n                \"INVITE\",\n                \"MANAGE\"\n            ]\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/permissions/directory/create | placeholder",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Set env vars",
							"var jsonData = pm.response.json();",
							"if (pm.response.code === 200 && jsonData.ok && jsonData.ok.data.permission) {",
							"    var data = jsonData.ok.data;",
							"    var permission = data.permission;",
							"    if (permission && permission.id) {",
							"        pm.collectionVariables.set(\"directory_permit_id\", permission.id);",
							"        console.log(\"Successfully set directory_permit_id to: \" + permission.id);",
							"    }",
							"    if (permission && permission.redeem_code) {",
							"        pm.collectionVariables.set(\"redeem_code\", permission.redeem_code);",
							"        console.log(\"Successfully set redeem_code to: \" + permission.redeem_code);",
							"    }",
							"} else {",
							"    // Log an error if the request was not successful",
							"    console.error(\"Failed to retrieve directory_permit_id. Status code: \" + pm.response.code);",
							"    console.error(\"Response body:\", pm.response.text());",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n//   id?: DirectoryPermissionID;\n  \"resource_id\": \"{{folder_id}}\",\n  \"permission_types\": [\n    \"VIEW\",\n    \"EDIT\",\n    \"DELETE\",\n    \"UPLOAD\",\n    \"INVITE\"\n  ],\n  \"inheritable\": false\n//   begin_date_ms?: number;\n//   expiry_date_ms?: number;\n//   note?: string;\n//   metadata?: PermissionMetadata;\n//   external_id?: string;\n//   external_payload?: string;\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/directory/create",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"permissions",
						"directory",
						"create"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"resource_id\": \"FolderID_f9765f26-96b1-4359-aa40-73b84985d0ba\",\n  \"permission_types\": [\n    \"VIEW\",\n    \"EDIT\",\n    \"DELETE\",\n    \"UPLOAD\",\n    \"INVITE\"\n  ],\n  \"begin_date_ms\": 1753297637513,\n  \"expiry_date_ms\": -1,\n  \"inheritable\": true,\n  \"note\": \"\",\n  \"external_id\": \"\",\n  \"external_payload\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/directory/create",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"permissions",
								"directory",
								"create"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "843"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 20:27:31 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"permission\": {\n                \"id\": \"DirectoryPermissionID_5d444a40-bbbe-40d1-83ca-48d011c8caab\",\n                \"resource_id\": \"FolderID_f9765f26-96b1-4359-aa40-73b84985d0ba\",\n                \"resource_path\": \"DiskID_0186f372-c039-4c88-bf53-e1084a83677d::\",\n                \"granted_to\": \"PlaceholderPermissionGranteeID_cb1dcfdf-2f4d-40f1-a3e6-9fa0d9d13449\",\n                \"granted_by\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n                \"permission_types\": [\n                    \"DELETE\",\n                    \"EDIT\",\n                    \"INVITE\",\n                    \"UPLOAD\",\n                    \"VIEW\"\n                ],\n                \"begin_date_ms\": 1753297637513,\n                \"expiry_date_ms\": -1,\n                \"inheritable\": true,\n                \"note\": \"\",\n                \"created_at\": 1753302451644,\n                \"last_modified_at\": 1753302451644,\n                \"from_placeholder_grantee\": null,\n                \"labels\": [],\n                \"redeem_code\": \"RedeemTokenID_e1eeb742-0c46-4012-b698-ee435d8776ba\",\n                \"resource_name\": \"\",\n                \"grantee_name\": \"Awaiting Anon\",\n                \"granter_name\": \"Owner\",\n                \"permission_previews\": [\n                    \"CREATE\",\n                    \"VIEW\",\n                    \"EDIT\",\n                    \"DELETE\",\n                    \"INVITE\"\n                ]\n            }\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/permissions/directory/redeem",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has required fields in the 'ok' object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.ok.data).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.ok.data.permission).to.exist.and.to.be.an('object');",
							"    ",
							"    const permission = responseData.ok.data.permission;",
							"    pm.expect(permission).to.have.all.keys('id', 'resource_id', 'resource_path', 'granted_to', 'granted_by', 'permission_types', 'begin_date_ms', 'expiry_date_ms', 'inheritable', 'note', 'created_at', 'last_modified_at', 'from_placeholder_grantee', 'labels', 'redeem_code', 'resource_name', 'grantee_name', 'grantee_avatar', 'granter_name', 'permission_previews');",
							"});",
							"",
							"",
							"pm.test(\"Validate the schema of the permission object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.be.an('object').that.has.property('data').that.is.an('object');",
							"    pm.expect(responseData.ok.data).to.have.property('permission').that.is.an('object');",
							"    ",
							"    const permission = responseData.ok.data.permission;",
							"    ",
							"    pm.expect(permission).to.have.all.keys(",
							"        'id', ",
							"        'resource_id', ",
							"        'resource_path', ",
							"        'granted_to', ",
							"        'granted_by', ",
							"        'permission_types', ",
							"        'begin_date_ms', ",
							"        'expiry_date_ms', ",
							"        'inheritable', ",
							"        'note', ",
							"        'created_at', ",
							"        'last_modified_at', ",
							"        'from_placeholder_grantee', ",
							"        'labels', ",
							"        'redeem_code', ",
							"        'resource_name', ",
							"        'grantee_name', ",
							"        'grantee_avatar', ",
							"        'granter_name', ",
							"        'permission_previews'",
							"    );",
							"",
							"    pm.expect(permission.id).to.be.a('string');",
							"    pm.expect(permission.resource_id).to.be.a('string');",
							"    pm.expect(permission.resource_path).to.be.a('string');",
							"    pm.expect(permission.granted_to).to.be.a('string');",
							"    pm.expect(permission.granted_by).to.be.a('string');",
							"    pm.expect(permission.permission_types).to.be.an('array');",
							"    pm.expect(permission.begin_date_ms).to.be.a('number');",
							"    pm.expect(permission.expiry_date_ms).to.be.a('number');",
							"    pm.expect(permission.inheritable).to.be.a('boolean');",
							"    pm.expect(permission.note).to.be.a('string');",
							"    pm.expect(permission.created_at).to.be.a('number');",
							"    pm.expect(permission.last_modified_at).to.be.a('number');",
							"    pm.expect(permission.from_placeholder_grantee).to.be.a('string');",
							"    pm.expect(permission.labels).to.be.an('array');",
							"    pm.expect(permission.redeem_code).to.satisfy(value => value === null || typeof value === 'string');",
							"    pm.expect(permission.resource_name).to.be.a('string');",
							"    pm.expect(permission.grantee_name).to.be.a('string');",
							"    pm.expect(permission.grantee_avatar).to.be.a('string');",
							"    pm.expect(permission.granter_name).to.be.a('string');",
							"    pm.expect(permission.permission_previews).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Granted To and Granted By must be non-empty strings\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok.data.permission.granted_to).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Granted To should not be empty\");",
							"    pm.expect(responseData.ok.data.permission.granted_by).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Granted By should not be empty\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "//Currently Working at Web3's Server\n{\n  \"permission_id\": \"{{directory_permit_id}}\",\n  \"user_id\": \"{{foreign_friend_user_id}}\",\n  \"redeem_code\": \"{{redeem_code}}\",\n  \"note\": \"Hello World\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/directory/redeem",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"permissions",
						"directory",
						"redeem"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/permissions/directory/check",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"resource_id\": \"{{folder_id}}\",\n  \"grantee_id\": \"{{foreign_friend_user_id}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/directory/check",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"permissions",
						"directory",
						"check"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"resource_id\": \"DirectoryPermissionID_9b695faf-e10f-4528-ac16-621f0985d6d8\",\n  \"grantee_id\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/directory/check",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"permissions",
								"directory",
								"check"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "244"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 20:25:11 GMT"
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date",
							"domain": "",
							"path": ""
						}
					],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"resource_id\": \"DirectoryPermissionID_9b695faf-e10f-4528-ac16-621f0985d6d8\",\n            \"grantee_id\": \"UserID_jy44q-ztlrv-forew-yb2oj-m5clb-elvkn-7zjrd-mv2q7-lcrbk-5ke3i-wqe\",\n            \"permissions\": [\n                \"VIEW\",\n                \"EDIT\",\n                \"UPLOAD\",\n                \"DELETE\",\n                \"INVITE\",\n                \"MANAGE\"\n            ]\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/permissions/directory/delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response contains required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist;",
							"    pm.expect(responseData.ok.data).to.exist;",
							"    pm.expect(responseData.ok.data.deleted_id).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Deleted_id must be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist;",
							"    pm.expect(responseData.ok.data).to.exist;",
							"    pm.expect(responseData.ok.data.deleted_id).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Deleted_id should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response schema matches the expected structure\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('ok').that.is.an('object');",
							"    pm.expect(responseData.ok).to.have.property('data').that.is.an('object');",
							"    pm.expect(responseData.ok.data).to.have.property('deleted_id').that.is.a('string');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"permission_id\": \"{{directory_permit_id}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/directory/delete",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"permissions",
						"directory",
						"delete"
					]
				}
			},
			"response": [
				{
					"name": "Sample Responsse",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"permission_id\": \"DirectoryPermissionID_9b695faf-e10f-4528-ac16-621f0985d6d8\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/permissions/directory/delete",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"permissions",
								"directory",
								"delete"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "91"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 20:30:50 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"deleted_id\": \"DirectoryPermissionID_9b695faf-e10f-4528-ac16-621f0985d6d8\"\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/contacts/create | UUID CLAIM",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Duplicate Contact\",\n  \"id\": \"UserID_huqrv-nrxhk-zqr5f-a4wpb-mbhky-xhllv-pf72p-difdv-qny2o-tkewe-tae\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/create",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"contacts",
						"create"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Doe\",\n  \"icp_principal\": \"veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n  \"public_note\": \"\",\n  \"is_placeholder\": true,\n  \"id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\"\n  //\"private_note\": \"Primary contact for urgent issues\",\n  //\"external_id\": \"emp-1234\",\n  //\"external_payload\": \"{\\\"department\\\": \\\"product\\\", \\\"title\\\": \\\"Senior Project Manager\\\", \\\"location\\\": \\\"Remote\\\"}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/create",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"contacts",
								"create"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "815"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 19:46:13 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"name\": \"John Doe\",\n            \"avatar\": \"\",\n            \"email\": \"\",\n            \"notifications_url\": \"\",\n            \"public_note\": \"\",\n            \"private_note\": \"\",\n            \"evm_public_address\": \"\",\n            \"icp_principal\": \"veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"seed_phrase\": \"\",\n            \"labels\": [],\n            \"from_placeholder_user_id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"redeem_code\": \"RedeemTokenID_773013f7-9d2f-4daf-8873-daa09cb6cf23\",\n            \"created_at\": 1753299973103,\n            \"last_online_ms\": 0,\n            \"permission_previews\": [\n                \"CREATE\",\n                \"VIEW\",\n                \"EDIT\",\n                \"DELETE\",\n                \"INVITE\"\n            ],\n            \"group_previews\": [\n                {\n                    \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                    \"invite_id\": \"GroupInviteID_930a7fa9-0d9a-4f65-bb10-03db6a572ee6\",\n                    \"is_admin\": false,\n                    \"group_name\": \"Group for All\",\n                    \"group_avatar\": \"\"\n                }\n            ]\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/contacts/create | UUID CLAIM",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.expect(pm.response.code).to.eql(400);",
							"});",
							"",
							"",
							"pm.test(\"Response has an error object with required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.err).to.exist;",
							"    pm.expect(responseData.err).to.have.all.keys('code', 'message');",
							"});",
							"",
							"",
							"pm.test(\"Error code is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('err');",
							"    pm.expect(responseData.err).to.have.property('code').that.is.a('number').and.is.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Error message must be a string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.err).to.exist;",
							"    pm.expect(responseData.err.message).to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Duplicate Contact\",\n  \"id\": \"UserID_huqrv-nrxhk-zqr5f-a4wpb-mbhky-xhllv-pf72p-difdv-qny2o-tkewe-tae\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/create",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"contacts",
						"create"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Doe\",\n  \"icp_principal\": \"veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n  \"public_note\": \"\",\n  \"is_placeholder\": true,\n  \"id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\"\n  //\"private_note\": \"Primary contact for urgent issues\",\n  //\"external_id\": \"emp-1234\",\n  //\"external_payload\": \"{\\\"department\\\": \\\"product\\\", \\\"title\\\": \\\"Senior Project Manager\\\", \\\"location\\\": \\\"Remote\\\"}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/create",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"contacts",
								"create"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "815"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 19:46:13 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"name\": \"John Doe\",\n            \"avatar\": \"\",\n            \"email\": \"\",\n            \"notifications_url\": \"\",\n            \"public_note\": \"\",\n            \"private_note\": \"\",\n            \"evm_public_address\": \"\",\n            \"icp_principal\": \"veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"seed_phrase\": \"\",\n            \"labels\": [],\n            \"from_placeholder_user_id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"redeem_code\": \"RedeemTokenID_773013f7-9d2f-4daf-8873-daa09cb6cf23\",\n            \"created_at\": 1753299973103,\n            \"last_online_ms\": 0,\n            \"permission_previews\": [\n                \"CREATE\",\n                \"VIEW\",\n                \"EDIT\",\n                \"DELETE\",\n                \"INVITE\"\n            ],\n            \"group_previews\": [\n                {\n                    \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                    \"invite_id\": \"GroupInviteID_930a7fa9-0d9a-4f65-bb10-03db6a572ee6\",\n                    \"is_admin\": false,\n                    \"group_name\": \"Group for All\",\n                    \"group_avatar\": \"\"\n                }\n            ]\n        }\n    }\n}"
				}
			]
		},
		{
			"name": "drive/:org_id/organization/whoami",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"The response must contain the 'ok' object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('ok').that.is.an('object');",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'data' object contains the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.ok).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.ok.data).to.exist.and.to.be.an('object');",
							"",
							"    const requiredFields = ['nickname', 'userID', 'driveID', 'icp_principal', 'evm_public_address', 'is_owner', 'drive_nickname'];",
							"    requiredFields.forEach(field => {",
							"        pm.expect(responseData.ok.data).to.have.property(field);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"The is_owner property must be a boolean\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('ok').that.is.an('object');",
							"    pm.expect(responseData.ok.data).to.have.property('is_owner').that.is.a('boolean');",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/organization/whoami",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"organization",
						"whoami"
					]
				}
			},
			"response": []
		},
		{
			"name": "drive/:org_id/api_keys/create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Set env vars",
							"var jsonData = pm.response.json();",
							"if (pm.response.code === 200 && jsonData.ok && jsonData.ok.data.value) {",
							"    var data = jsonData.ok.data;",
							"    var api_key_value = data.value;",
							"    if (api_key_value) {",
							"        pm.collectionVariables.set(\"foreign_friend_api_key\", api_key_value);",
							"        pm.collectionVariables.set(\"foreign_friend_api_key_id\", data.id);",
							"        console.log(\"Successfully set foreign_friend_api_key to: \" + api_key_value);",
							"    }",
							"} else {",
							"    // Log an error if the request was not successful",
							"    console.error(\"Failed to retrieve auth_token. Status code: \" + pm.response.code);",
							"    console.error(\"Response body:\", pm.response.text());",
							"}",
							"",
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      ok: {",
							"        type: \"object\",",
							"        properties: {",
							"          data: {",
							"            type: \"object\",",
							"            properties: {",
							"              id: { type: \"string\" },",
							"              value: { type: \"string\" },",
							"              user_id: { type: \"string\" },",
							"              name: { type: \"string\" },",
							"              created_at: { type: \"integer\" },",
							"              is_revoked: { type: \"boolean\" },",
							"              begins_at: { type: \"integer\" },",
							"              expires_at: { type: \"integer\" },",
							"              labels: {",
							"                type: \"array\",",
							"                items: { type: \"string\" }",
							"              },",
							"              permission_previews: {",
							"                type: \"array\",",
							"                items: { type: \"string\" }",
							"              }",
							"            },",
							"            required: [\"id\", \"value\", \"user_id\", \"name\", \"created_at\", \"is_revoked\", \"begins_at\", \"expires_at\", \"labels\", \"permission_previews\"]",
							"          }",
							"        },",
							"        required: [\"data\"]",
							"      }",
							"    },",
							"    required: [\"ok\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    // id?: ApiKeyID;\n    \"name\": \"My API Key\",\n    \"user_id\": \"{{foreign_friend_user_id}}\"\n    // begins_at?: number;\n    // expires_at?: number;\n    // external_id?: string;\n    // external_payload?: string;\n    // private_note?: string;\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/api_keys/create",
					"host": [
						"{{ServerEndpoint}}"
					],
					"path": [
						"v1",
						"drive",
						"{{org_id}}",
						"api_keys",
						"create"
					]
				}
			},
			"response": [
				{
					"name": "sample response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Doe\",\n  \"icp_principal\": \"veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n  \"public_note\": \"\",\n  \"is_placeholder\": true,\n  \"id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\"\n  //\"private_note\": \"Primary contact for urgent issues\",\n  //\"external_id\": \"emp-1234\",\n  //\"external_payload\": \"{\\\"department\\\": \\\"product\\\", \\\"title\\\": \\\"Senior Project Manager\\\", \\\"location\\\": \\\"Remote\\\"}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ServerEndpoint}}/v1/drive/{{org_id}}/contacts/create",
							"host": [
								"{{ServerEndpoint}}"
							],
							"path": [
								"v1",
								"drive",
								"{{org_id}}",
								"contacts",
								"create"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Length",
							"value": "815"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Wed, 23 Jul 2025 19:46:13 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"ok\": {\n        \"data\": {\n            \"id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"name\": \"John Doe\",\n            \"avatar\": \"\",\n            \"email\": \"\",\n            \"notifications_url\": \"\",\n            \"public_note\": \"\",\n            \"private_note\": \"\",\n            \"evm_public_address\": \"\",\n            \"icp_principal\": \"veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"seed_phrase\": \"\",\n            \"labels\": [],\n            \"from_placeholder_user_id\": \"UserID_veqcy-bsctq-ulthr-e6zsq-5itsa-z7iou-faz2c-35dyh-3emzd-fwhfa-na3\",\n            \"redeem_code\": \"RedeemTokenID_773013f7-9d2f-4daf-8873-daa09cb6cf23\",\n            \"created_at\": 1753299973103,\n            \"last_online_ms\": 0,\n            \"permission_previews\": [\n                \"CREATE\",\n                \"VIEW\",\n                \"EDIT\",\n                \"DELETE\",\n                \"INVITE\"\n            ],\n            \"group_previews\": [\n                {\n                    \"group_id\": \"GroupID_e614966a-1e97-4362-a7c2-de16f2059120\",\n                    \"invite_id\": \"GroupInviteID_930a7fa9-0d9a-4f65-bb10-03db6a572ee6\",\n                    \"is_admin\": false,\n                    \"group_name\": \"Group for All\",\n                    \"group_avatar\": \"\"\n                }\n            ]\n        }\n    }\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "org_id",
			"value": "",
			"type": "default"
		},
		{
			"key": "auth_token",
			"value": "",
			"type": "default"
		},
		{
			"key": "contact_id",
			"value": "",
			"type": "default"
		},
		{
			"key": "group_id",
			"value": "",
			"type": "default"
		},
		{
			"key": "user_id",
			"value": "",
			"type": "default"
		},
		{
			"key": "GroupInvite_ID",
			"value": "",
			"type": "default"
		},
		{
			"key": "ServerEndpoint",
			"value": "http://localhost:8888",
			"type": "default"
		},
		{
			"key": "FactoryEndpoint",
			"value": "http://localhost:8888",
			"type": "default"
		},
		{
			"key": "gift_card_id",
			"value": "",
			"type": "default"
		},
		{
			"key": "factory_auth_token",
			"value": ""
		},
		{
			"key": "redeem_code",
			"value": ""
		},
		{
			"key": "group_invite_id",
			"value": ""
		},
		{
			"key": "invitee_id",
			"value": ""
		},
		{
			"key": "disk_id",
			"value": ""
		},
		{
			"key": "foreign_friend_api_key",
			"value": ""
		},
		{
			"key": "foreign_friend_user_id",
			"value": ""
		},
		{
			"key": "permission_id",
			"value": ""
		},
		{
			"key": "system_permission_id",
			"value": ""
		},
		{
			"key": "root_folder",
			"value": ""
		},
		{
			"key": "trash_folder",
			"value": ""
		},
		{
			"key": "file_id",
			"value": ""
		},
		{
			"key": "folder_id",
			"value": ""
		},
		{
			"key": "alt_folder_id",
			"value": ""
		},
		{
			"key": "directory_permit_id",
			"value": ""
		},
		{
			"key": "Server host",
			"value": ""
		},
		{
			"key": "shortlink_slug",
			"value": ""
		},
		{
			"key": "admin_user_id",
			"value": ""
		},
		{
			"key": "foreign_friend_api_key_id",
			"value": ""
		}
	]
}